{
 "paragraphs": [
  {
   "settings": {
    "params": {
     "bdtMeta": {}
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "import org.apache.spark.sql.DataFrame\n\nval joinFolder = \"/data/joins\"\nval saveJoins = false\n\ndef saveDataFrame(df: DataFrame, name: String): Unit = {\n    df.coalesce(1) // Print into a single file\n            .write\n            .option(\"delimiter\", \";\")\n            .option(\"header\", true) // Maintain Headers\n            .csv(s\"$joinFolder/$name\") // Write to csv\n}\nval initialCount = spark.sql(\n    \"\"\"\n      SELECT DISTINCT * FROM QuartosReservados\n      \"\"\")\nprintln(initialCount.count())",
   "id": "",
   "dateCreated": "2023-04-30 19:59:44.804",
   "config": {
    "editorHide": false
   },
   "dateStarted": "2023-05-01 22:59:03.550",
   "dateUpdated": "2023-05-01 22:59:04.505",
   "dateFinished": "2023-05-01 22:59:04.505"
  },
  {
   "user": "anonymous",
   "config": {
    "colWidth": 12,
    "fontSize": 9,
    "enabled": true,
    "results": {},
    "editorSetting": {
     "language": "scala",
     "editOnDblClick": false,
     "completionKey": "TAB",
     "completionSupport": true
    },
    "editorMode": "ace/mode/scala"
   },
   "settings": {
    "params": {
     "bdtMeta": {}
    },
    "forms": {}
   },
   "apps": [],
   "jobName": "paragraph_1563110258183_1613653816",
   "id": "20190714-161738_1950435706",
   "dateCreated": "2019-07-14T16:17:38+0300",
   "status": "FINISHED",
   "progressUpdateIntervalMs": 500,
   "focus": true,
   "$$hashKey": "object:394",
   "text": "val joinTipologia = spark.sql(\n    \"\"\"\n       SELECT DISTINCT \n           Q.hotel_ID, \n           Q.Reserve_ID,\n           Q.pais,\n           Q.estado_reserva,\n           Q.room_ID,\n           Q.tipo_quarto AS Q_tipo_quarto,\n           Q.rate_plan,\n           Q.data_reserva,\n           Q.data_chegada,\n           Q.data_partida,\n           Q.num_noites,\n           Q.ocupacao,\n           Q.adultos,\n           Q.criancas,\n           Q.bebes,\n           Q.preco_euros,\n           T.tipo_quarto as T_tipo_quarto, \n           T.quantidade,\n           T.capacidade_maxima,\n           T.capacidade_minima,\n           T.capacidade_max_adultos,\n           T.capacidade_min_adultos,\n           T.capacidade_max_criancas,\n           T.capacidade_min_criancas,\n           T.capacidade_max_bebes,\n           T.capacidade_max_camas_extra,\n           T.capacidade_max_camas_extra_criancas,\n           T.capacidade_max_bercos_extra\n       FROM QuartosReservados as Q\n       INNER JOIN Tipologias as T\n           ON Q.hotel_ID = T.hotel_ID AND T.room_ID = Q.room_ID\n      \"\"\")\n\njoinTipologia.createOrReplaceTempView(\"JoinTipologia\")\njoinTipologia.cache()\n\nif (saveJoins)\n    saveDataFrame(joinTipologia, \"joinTipologia\")\n\nprintln(joinTipologia.count())\njoinTipologia.printSchema()",
   "dateStarted": "2023-05-01 22:59:14.650",
   "dateUpdated": "2023-05-01 22:59:15.081",
   "dateFinished": "2023-05-01 22:59:15.081"
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {
      "inlay": {}
     }
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "var joinTipologiaAndHotel = spark.sql(\n    \"\"\"\n       SELECT \n           J.*,\n           H.localizacao,\n           H.area_localizacao,\n           H.estrelas,\n           H.idade_max_criancas,\n           H.idade_max_bebes,\n           H.hora_max_checkin,\n           H.qtd_quartos\n       FROM joinTipologia as J\n       INNER JOIN Hotel as H\n           ON J.hotel_ID = H.hotel_ID\n    \"\"\")\n\njoinTipologiaAndHotel.createOrReplaceTempView(\"JoinTipologiaAndHotel\")\n\nprintln(joinTipologiaAndHotel.count())\njoinTipologiaAndHotel.printSchema()\nif (saveJoins)\n    saveDataFrame(joinTipologiaAndHotel, \"joinTipologiaAndHotel\")",
   "id": "",
   "dateCreated": "2023-04-30 20:01:48.781",
   "config": {
    "tableHide": false
   },
   "dateStarted": "2023-05-01 22:59:22.986",
   "dateUpdated": "2023-05-01 22:59:23.548",
   "dateFinished": "2023-05-01 22:59:23.548"
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {}
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "var joinFeriados = spark.sql(\n    \"\"\"\n        SELECT *\n        FROM JoinTipologiaAndHotel AS J\n        LEFT JOIN (SELECT * FROM Feriados WHERE is_holiday=1) AS F\n            ON F.date <= J.data_partida AND f.date >= data_chegada\n    \"\"\"\n)\n\njoinFeriados.createOrReplaceTempView(\"JoinFeriados\")\n\njoinFeriados.count()\n\n//joinFeriados.show()",
   "id": "",
   "dateCreated": "2023-04-30 20:12:14.191",
   "config": {},
   "dateStarted": "2023-05-01 22:59:35.676",
   "dateUpdated": "2023-05-01 22:59:36.507",
   "dateFinished": "2023-05-01 22:59:36.507"
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {
      "inlay": {}
     }
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "val joinEventos = spark.sql(\n    \"\"\"\n        SELECT DISTINCT QR.*, E.*\n        FROM JoinFeriados QR\n        LEFT JOIN Eventos E\n            ON QR.data_partida >= E.start_Date AND QR.data_chegada <= E.end_date\n            AND QR.area_localizacao = E.Location\n    \"\"\")\n\njoinEventos.createOrReplaceTempView(\"JoinEventos\")\n\nprintln(joinEventos.count())\n//joinEventos.show()",
   "id": "",
   "dateCreated": "2023-04-30 20:16:51.675",
   "config": {},
   "dateStarted": "2023-05-01 22:59:52.588",
   "dateUpdated": "2023-05-01 22:59:55.733",
   "dateFinished": "2023-05-01 22:59:55.733"
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {
      "inlay": {
       "collapsed": true
      }
     }
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "val joinMeteoTemp = spark.sql(\n    \"\"\"\n        SELECT QR.*, M.city, M.tavg, M.tmax, M.tmin\n        FROM JoinEventos AS QR\n        JOIN Meteorologia AS M \n            ON QR.area_localizacao = M.city \n            AND M.date <= QR.data_partida AND M.date >= QR.data_chegada\n    \"\"\")\n\njoinMeteoTemp.createOrReplaceTempView(\"JoinMeteoTemp\")\n\nprintln(joinMeteoTemp.count())\n//joinMeteoTemp.show()",
   "id": "",
   "dateCreated": "2023-05-01 15:31:17.385",
   "config": {
    "tableHide": true
   },
   "dateStarted": "2023-05-01 23:04:15.721",
   "dateUpdated": "2023-05-01 23:04:18.628",
   "dateFinished": "2023-05-01 23:04:18.628"
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {}
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "saveDataFrame(joinMeteoTemp, \"FinalDataSet\")",
   "id": "",
   "dateCreated": "2023-05-01 15:47:23.871",
   "config": {},
   "dateStarted": "2023-05-01 23:04:22.871",
   "dateUpdated": "2023-05-01 23:04:27.216",
   "dateFinished": "2023-05-01 23:04:27.216"
  }
 ],
 "name": "Zeppelin Notebook",
 "id": "",
 "noteParams": {},
 "noteForms": {},
 "angularObjects": {},
 "config": {
  "isZeppelinNotebookCronEnable": false,
  "looknfeel": "default",
  "personalizedMode": "false"
 },
 "info": {}
}