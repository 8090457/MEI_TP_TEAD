{
 "paragraphs": [
  {
   "settings": {
    "params": {
     "bdtMeta": {
      "IS_INTELLIJ_SERVICE": true,
      "ZTOOLS_DEBUG_CELL_ID": "88c24501-c5cc-49d7-8af3-a83814865c87"
     }
    },
    "forms": {}
   },
   "apps": [],
   "status": "PENDING",
   "text": "%spark.spark\n//ZToolsId = 88c24501-c5cc-49d7-8af3-a83814865c87\n// It is generated code for integration with Big Data Tools plugin\n// Please DO NOT edit it.\ntry {\n  import org.apache.commons.lang.exception.ExceptionUtils\n  import org.apache.spark.sql.SparkSession\n\n  import java.io.{PrintWriter, StringWriter}\n  import java.util\n  import scala.collection.mutable.ListBuffer\n  import scala.collection.{immutable, mutable}\n  import scala.reflect.api.JavaUniverse\n  import scala.tools.nsc.interpreter.IMain\n  import org.json4s.jackson.Serialization\n  import org.json4s.{Formats, NoTypeHints}\n\n  import java.util.function.{Function => JFunction}\n  import java.util.regex.Pattern\n  import scala.language.implicitConversions\n  import scala.util.Try\n  import org.apache.spark.sql.Dataset\n  import org.apache.spark.rdd.RDD\n  import org.apache.spark.SparkContext\n\n  trait Loopback {\n    def pass(obj: Any, id: String): Any\n  }\n\n  object ResNames {\n    val REF = \"ref\"\n    val VALUE = \"value\"\n    val IS_PRIMITIVE = \"isPrimitive\"\n    val TYPE = \"type\"\n    val TIME = \"time\"\n    val LENGTH = \"length\"\n    val LAZY = \"lazy\"\n  }\n\n  object TrieMap {\n    class Node[T](var value: Option[T]) {\n      var children: mutable.Map[String, TrieMap.Node[T]] = _\n\n      def put(key: String, node: TrieMap.Node[T]): Option[Node[T]] = {\n        if (children == null)\n          children = mutable.Map[String, TrieMap.Node[T]]()\n        children.put(key, node)\n      }\n\n      def del(key: String): Option[Node[T]] = children.remove(key)\n\n      def forEach(func: Function[T, _]): Unit = {\n        func.apply(value.get)\n        if (children != null) children.foreach(t => t._2.forEach(func))\n      }\n    }\n\n    def split(key: String): Array[String] = {\n      var n = 0\n      var j = 0\n      for (i <- 0 until key.length) {\n        if (key.charAt(i) == '.') n += 1\n      }\n      val k = new Array[String](n + 1)\n      val sb = new mutable.StringBuilder(k.length)\n      for (i <- 0 until key.length) {\n        val ch = key.charAt(i)\n        if (ch == '.') {\n          k({\n            j += 1;\n            j - 1\n          }) = sb.toString\n          sb.setLength(0)\n        }\n        else sb.append(ch)\n      }\n      k(j) = sb.toString\n      k\n    }\n  }\n\n  class TrieMap[T] {\n    val root = new TrieMap.Node[T](null)\n\n    def subtree(key: Array[String], length: Int): TrieMap.Node[T] = {\n      var current = root\n      var i = 0\n      while ( {\n        i < length && current != null\n      }) {\n        if (current.children == null) return null\n        current = current.children.get(key(i)).orNull\n        i += 1\n      }\n      current\n    }\n\n    def put(key: Array[String], value: T): Option[TrieMap.Node[T]] = {\n      val node = subtree(key, key.length - 1)\n      node.put(key(key.length - 1), new TrieMap.Node[T](Option.apply(value)))\n    }\n\n    def put(key: String, value: T): Option[TrieMap.Node[T]] = {\n      val k = TrieMap.split(key)\n      put(k, value)\n    }\n\n    def contains(key: String): Boolean = {\n      val k = TrieMap.split(key)\n      val node = subtree(k, k.length)\n      node != null\n    }\n\n    def get(key: String): Option[T] = {\n      val k = TrieMap.split(key)\n      val node = subtree(k, k.length)\n      if (node == null) return Option.empty\n      node.value\n    }\n\n    def subtree(key: String): TrieMap.Node[T] = {\n      val k = TrieMap.split(key)\n      subtree(k, k.length)\n    }\n  }\n\n  trait TypeHandler {\n    def accept(obj: Any): Boolean\n\n    def handle(scalaInfo: ScalaVariableInfo, loopback: Loopback, depth: Int): mutable.Map[String, Any]\n\n    def getErrors: List[String] = List[String]()\n  }\n\n  abstract class AbstractCollectionHandler(limit: Int, timeout: Int) extends AbstractTypeHandler {\n    trait Iterator {\n      def hasNext: Boolean\n\n      def next: Any\n    }\n\n    def iterator(obj: Any): Iterator\n\n    def length(obj: Any): Int\n\n    override def handle(scalaInfo: ScalaVariableInfo, loopback: Loopback, depth: Int): mutable.Map[String, Any] = mutable.Map[String, Any](\n      ResNames.LENGTH -> length(scalaInfo.value),\n      ResNames.VALUE -> withJsonArray { json =>\n        val startTime = System.currentTimeMillis()\n        val it = iterator(scalaInfo.value)\n        var index = 0\n        while (it.hasNext && index < limit && !checkTimeoutError(scalaInfo.path, startTime, timeout)) {\n          val id = scalaInfo.path\n          json += loopback.pass(it.next, s\"$id[$index]\")\n          index += 1\n        }\n      }\n    )\n  }\n\n  abstract class AbstractTypeHandler extends TypeHandler {\n    val timeoutErrors: mutable.MutableList[String] = mutable.MutableList()\n\n    override def getErrors: List[String] = timeoutErrors.toList\n\n    protected def withJsonArray(body: mutable.MutableList[Any] => Unit): mutable.MutableList[Any] = {\n      val arr = mutable.MutableList[Any]()\n      body(arr)\n      arr\n    }\n\n    protected def withJsonObject(body: mutable.Map[String, Any] => Unit): mutable.Map[String, Any] = {\n      val obj = mutable.Map[String, Any]()\n      body(obj)\n      obj\n    }\n\n    protected def wrap(obj: Any, tpe: String): mutable.Map[String, Any] = mutable.Map[String, Any](\n      ResNames.VALUE -> Option(obj).orNull,\n      ResNames.TYPE -> tpe\n    )\n\n    protected def checkTimeoutError(name: String, startTime: Long, timeout: Int): Boolean = {\n      val isTimeout = System.currentTimeMillis() - startTime > timeout\n      if (isTimeout)\n        timeoutErrors += f\"Variable $name collect timeout exceed ${timeout}ms.\"\n      isTimeout\n    }\n\n  }\n\n  class ArrayHandler(limit: Int, timeout: Int) extends AbstractCollectionHandler(limit, timeout) {\n    override def accept(obj: Any): Boolean = obj.isInstanceOf[Array[_]]\n\n    override def length(obj: Any): Int = obj.asInstanceOf[Array[_]].length\n\n    override def iterator(obj: Any): Iterator = new Iterator {\n      private val it = obj.asInstanceOf[Array[_]].iterator\n\n      override def hasNext: Boolean = it.hasNext\n\n      override def next: Any = it.next\n    }\n  }\n\n  class JavaCollectionHandler(limit: Int, timeout: Int) extends AbstractCollectionHandler(limit, timeout) {\n    override def accept(obj: Any): Boolean = obj.isInstanceOf[util.Collection[_]]\n\n    override def iterator(obj: Any): Iterator = new Iterator() {\n      private val it = obj.asInstanceOf[util.Collection[_]].iterator()\n\n      override def hasNext: Boolean = it.hasNext\n\n      override def next: Any = it.next()\n    }\n\n    override def length(obj: Any): Int = obj.asInstanceOf[util.Collection[_]].size()\n  }\n  class MapHandler(limit: Int, timeout: Int) extends AbstractTypeHandler {\n    override def handle(scalaInfo: ScalaVariableInfo, loopback: Loopback, depth: Int): mutable.Map[String, Any] =\n      withJsonObject {\n        json =>\n          val obj = scalaInfo.value\n          val id = scalaInfo.path\n          val map = obj.asInstanceOf[Map[_, _]]\n          val keys = mutable.MutableList[Any]()\n          val values = mutable.MutableList[Any]()\n          json += (\"jvm-type\" -> obj.getClass.getCanonicalName)\n          json += (\"length\" -> map.size)\n          var index = 0\n\n          json += (\"key\" -> keys)\n          json += (\"value\" -> values)\n\n          val startTime = System.currentTimeMillis()\n          map.view.take(math.min(limit, map.size)).foreach {\n            case (key, value) =>\n              if (checkTimeoutError(scalaInfo.path, startTime, timeout))\n                return json\n              keys += loopback.pass(key, s\"$id.key[$index]\")\n              values += loopback.pass(value, s\"$id.value[$index]\")\n              index += 1\n          }\n      }\n\n    override def accept(obj: Any): Boolean = obj.isInstanceOf[Map[_, _]]\n  }\n\n  class NullHandler extends AbstractTypeHandler {\n    override def accept(obj: Any): Boolean = obj == null\n\n    override def handle(scalaInfo: ScalaVariableInfo, loopback: Loopback, depth: Int): mutable.Map[String, Any] =\n      mutable.Map[String, Any]()\n  }\n\n  class ObjectHandler(val stringSizeLimit: Int,\n                      val manager: HandlerManager,\n                      val referenceManager: ReferenceManager,\n                      val timeout: Int) extends AbstractTypeHandler {\n    private val INACCESSIBLE = ScalaVariableInfo(isAccessible = false, isLazy = false, null, null, null, null)\n    val ru: JavaUniverse = scala.reflect.runtime.universe\n    val mirror: ru.Mirror = ru.runtimeMirror(getClass.getClassLoader)\n    import scala.reflect.runtime.universe.NoSymbol\n    case class ReflectionProblem(e: Throwable, symbol: String, var count: Int)\n\n    val problems: mutable.Map[String, ReflectionProblem] = mutable.Map[String, ReflectionProblem]()\n\n    override def accept(obj: Any): Boolean = true\n\n    override def handle(scalaInfo: ScalaVariableInfo, loopback: Loopback, depth: Int): mutable.Map[String, Any] =\n      withJsonObject { result =>\n        val obj = scalaInfo.value\n\n        if (obj == null) {\n          return result\n        }\n        if (depth <= 0) {\n          var s = obj.toString\n          if (s.length>stringSizeLimit)\n            s = s.take(stringSizeLimit) + \"...\"\n          result += (ResNames.VALUE -> s)\n          return result\n        }\n\n        val startTime = System.currentTimeMillis()\n        val fields = listAccessibleProperties(scalaInfo, startTime)\n        if (fields.isEmpty) {\n          var s = obj.toString\n          if (s.length>stringSizeLimit)\n            s = s.take(stringSizeLimit) + \"...\"\n          result += (ResNames.VALUE -> s)\n          return result\n        }\n\n        val resolvedFields = mutable.Map[String, Any]()\n        result += (ResNames.VALUE -> resolvedFields)\n\n\n        fields.foreach { field =>\n          if (checkTimeoutError(field.name, startTime, timeout)) {\n            return result\n          }\n\n          if (field.ref != null && field.ref != field.path) {\n            resolvedFields += (field.name -> (mutable.Map[String, Any]() += (ResNames.REF -> field.ref)))\n          } else {\n            resolvedFields += (field.name -> manager.handleVariable(field, loopback, depth - 1))\n          }\n        }\n\n        result\n      }\n\n\n    override def getErrors: List[String] = problems.map(x =>\n      f\"Reflection error for ${x._2.symbol} counted ${x._2.count}.\\n\" +\n        f\"Error message: ${ExceptionUtils.getMessage(x._2.e)}\\n \" +\n        f\"Stacktrace:${ExceptionUtils.getStackTrace(x._2.e)}\").toList ++ super.getErrors\n\n    private def listAccessibleProperties(info: ScalaVariableInfo, startTime: Long): List[ScalaVariableInfo] = {\n      val instanceMirror = mirror.reflect(info.value)\n      val instanceSymbol = instanceMirror.symbol\n      val members = instanceSymbol.toType.members\n\n      val parsedMembers = mutable.MutableList[ScalaVariableInfo]()\n      members.foreach { symbol =>\n        if (checkTimeoutError(info.path, startTime, timeout))\n          return parsedMembers.toList\n        val variableInfo = get(instanceMirror, symbol, info.path)\n        if (variableInfo.isAccessible)\n          parsedMembers += variableInfo\n      }\n\n      parsedMembers.toList\n    }\n\n    private def get(instanceMirror: ru.InstanceMirror, symbol: ru.Symbol, path: String): ScalaVariableInfo = {\n      if (!problems.contains(path))\n        try {\n          // is public property\n          if (!symbol.isMethod && symbol.isTerm && (symbol.asTerm.isVar || symbol.asTerm.isVal)\n          && symbol.asTerm.getter != NoSymbol\n          && symbol.asTerm.getter.isPublic) {\n            val term = symbol.asTerm\n            val f = instanceMirror.reflectField(term)\n            val fieldPath = s\"$path.${term.name.toString.trim}\"\n            val value = f.get\n            val tpe = term.typeSignature.toString\n            return ScalaVariableInfo(isAccessible = tpe != \"<notype>\", isLazy = term.isLazy, value, tpe,\n              fieldPath, referenceManager.getRef(value, fieldPath))\n          }\n        } catch {\n          case e: Throwable => problems(path) = ReflectionProblem(e, symbol.toString, 1)\n        }\n      else\n        problems(path).count += 1\n\n      INACCESSIBLE\n    }\n  }\n\n  class PrimitiveHandler extends AbstractTypeHandler {\n    override def accept(obj: Any): Boolean =\n      obj match {\n        case _: Byte => true\n        case _: Short => true\n        case _: Boolean => true\n        case _: Char => true\n        case _: Int => true\n        case _: Long => true\n        case _: Float => true\n        case _: Double => true\n        case _ => false\n      }\n\n    override def handle(scalaInfo: ScalaVariableInfo, loopback: Loopback, depth: Int): mutable.Map[String, Any] =\n      mutable.Map[String, Any](\n        ResNames.VALUE -> scalaInfo.value,\n        ResNames.IS_PRIMITIVE -> 1\n      )\n  }\n\n  class SeqHandler(limit: Int, timeout: Int) extends AbstractCollectionHandler(limit, timeout) {\n    override def accept(obj: Any): Boolean = obj.isInstanceOf[Seq[_]]\n\n    override def iterator(obj: Any): Iterator = new Iterator {\n      private val it = obj.asInstanceOf[Seq[_]].iterator\n\n      override def hasNext: Boolean = it.hasNext\n\n      override def next: Any = it.next()\n    }\n\n    override def length(obj: Any): Int = obj.asInstanceOf[Seq[_]].size\n  }\n\n  class SetHandler(limit: Int, timeout: Int) extends AbstractCollectionHandler(limit, timeout) {\n    override def iterator(obj: Any): Iterator = new Iterator {\n      private val it = obj.asInstanceOf[Set[_]].iterator\n\n      override def hasNext: Boolean = it.hasNext\n\n      override def next: Any = it.next()\n    }\n\n    override def length(obj: Any): Int = obj.asInstanceOf[Set[_]].size\n\n    override def accept(obj: Any): Boolean = obj.isInstanceOf[Set[_]]\n  }\n\n  class SpecialsHandler(limit: Int) extends AbstractTypeHandler {\n    override def accept(obj: Any): Boolean = obj.getClass.getCanonicalName != null && obj.getClass.getCanonicalName.startsWith(\"scala.\")\n\n    override def handle(scalaInfo: ScalaVariableInfo, loopback: Loopback, depth: Int): mutable.Map[String, Any] = withJsonObject {\n      json =>\n        var s = scalaInfo.value.toString\n        if (s.length>limit)\n          s = s.take(limit) + \"...\"\n        json.put(ResNames.VALUE, s)\n    }\n  }\n\n  class StringHandler(limit: Int) extends AbstractTypeHandler {\n    override def accept(obj: Any): Boolean = obj.isInstanceOf[String]\n\n    override def handle(scalaInfo: ScalaVariableInfo, loopback: Loopback, depth: Int): mutable.Map[String, Any] = {\n      var s = scalaInfo.value.asInstanceOf[String]\n      if (s.length>limit)\n        s = s.take(limit) + \"...\"\n      mutable.Map(\n        ResNames.VALUE -> s\n      )\n    }\n  }\n\n  class ThrowableHandler extends AbstractTypeHandler {\n    override def accept(obj: Any): Boolean = obj.isInstanceOf[Throwable]\n\n    override def handle(scalaInfo: ScalaVariableInfo, loopback: Loopback, depth: Int): mutable.Map[String, Any] = {\n      val obj = scalaInfo.value\n      val throwable = obj.asInstanceOf[Throwable]\n      val writer = new StringWriter()\n      val out = new PrintWriter(writer)\n      throwable.printStackTrace(out)\n\n      mutable.Map(\n        ResNames.VALUE -> writer.toString\n      )\n    }\n  }\n\n  class HandlerManager(enableProfiling: Boolean,\n                       timeout: Int,\n                       stringSizeLimit: Int,\n                       collectionSizeLimit: Int,\n                       referenceManager: ReferenceManager) {\n    private val handlerChain = ListBuffer[AbstractTypeHandler](\n      new NullHandler(),\n      new StringHandler(stringSizeLimit),\n      new ArrayHandler(collectionSizeLimit, timeout),\n      new JavaCollectionHandler(collectionSizeLimit, timeout),\n      new SeqHandler(collectionSizeLimit, timeout),\n      new SetHandler(collectionSizeLimit, timeout),\n      new MapHandler(collectionSizeLimit, timeout),\n      new ThrowableHandler(),\n      new SpecialsHandler(stringSizeLimit),\n      new PrimitiveHandler(),\n      new DatasetHandler(),\n      new RDDHandler(),\n      new SparkContextHandler(),\n      new SparkSessionHandler(),\n      new ObjectHandler(stringSizeLimit, this, referenceManager, timeout)\n    ).map(new HandlerWrapper(_, enableProfiling))\n\n    def getErrors: mutable.Seq[String] = handlerChain.flatMap(x => x.handler.getErrors)\n\n    def handleVariable(info: ScalaVariableInfo, loopback: Loopback, depth: Int, startTime: Long = System.currentTimeMillis()): Any = {\n      handlerChain.find(_.accept(info)).map(_.handle(info, loopback, depth, startTime)).getOrElse(mutable.Map[String, Any]())\n    }\n  }\n\n  class HandlerWrapper(val handler: TypeHandler, profile: Boolean) {\n    def accept(info: ScalaVariableInfo): Boolean = info.isLazy || handler.accept(info.value)\n\n    def handle(scalaInfo: ScalaVariableInfo, loopback: Loopback, depth: Int, initStartTime: Long): Any = {\n      val startTime = if (initStartTime != null)\n        initStartTime\n      else\n        System.currentTimeMillis()\n\n      val data = if (scalaInfo.isLazy) {\n        mutable.Map[String, Any](ResNames.LAZY -> true)\n      }\n      else {\n        try {\n          val data = handler.handle(scalaInfo, loopback, depth: Int)\n          if (data.keys.count(_ == ResNames.IS_PRIMITIVE) > 0) {\n            return data(ResNames.VALUE)\n          }\n          data\n        } catch {\n          case t: Throwable =>\n            return ExceptionUtils.getRootCauseMessage(t)\n        }\n\n      }\n      try {\n        data.put(ResNames.TYPE, calculateType(scalaInfo))\n      } catch {\n        case t: Throwable =>\n          data.put(ResNames.TYPE, ExceptionUtils.getRootCauseMessage(t))\n      }\n\n      if (profile)\n        data.put(ResNames.TIME, System.currentTimeMillis() - startTime)\n\n      data\n    }\n\n    private def calculateType(scalaInfo: ScalaVariableInfo): String = {\n      if (scalaInfo.tpe != null)\n        return scalaInfo.tpe\n\n      if (scalaInfo.value != null)\n        scalaInfo.value.getClass.getCanonicalName\n      else\n        null\n    }\n  }\n  class InterpreterHandler(val interpreter: IMain) {\n    val wrapper = new ZtoolsInterpreterWrapper(interpreter)\n\n    def getVariableNames: immutable.Seq[String] =\n      interpreter.definedSymbolList.filter { x => x.isGetter }.map(_.name.toString).distinct\n\n    def getInfo(name: String, tpe: String): ScalaVariableInfo = {\n      val obj = valueOfTerm(name).orNull\n      ScalaVariableInfo(isAccessible = true, isLazy = false, obj, tpe, name, null)\n    }\n\n    def valueOfTerm(id: String): Option[Any] = wrapper.valueOfTerm(id)\n  }\n\n  case class ScalaVariableInfo(isAccessible: Boolean,\n                               isLazy: Boolean,\n                               value: Any,\n                               tpe: String,\n                               path: String,\n                               ref: String) {\n    val name: String = if (path != null)\n      path.substring(path.lastIndexOf('.') + 1)\n    else\n      null\n  }\n\n\n\n  //noinspection TypeAnnotation\n  class ZtoolsInterpreterWrapper(val iMain: IMain) {\n\n    import scala.language.implicitConversions\n    import scala.reflect.runtime.{universe => ru}\n    import iMain.global._\n\n    import scala.util.{Try => Trying}\n\n    private lazy val importToGlobal = iMain.global mkImporter ru\n    private lazy val importToRuntime = ru.internal createImporter iMain.global\n\n    private implicit def importFromRu(sym: ru.Symbol) = importToGlobal importSymbol sym\n\n    private implicit def importToRu(sym: Symbol): ru.Symbol = importToRuntime importSymbol sym\n\n    // see https://github.com/scala/scala/pull/5852/commits/a9424205121f450dea2fe2aa281dd400a579a2b7\n    def valueOfTerm(id: String): Option[Any] = exitingTyper {\n      def fixClassBasedFullName(fullName: List[String]): List[String] = {\n        if (settings.Yreplclassbased.value) {\n          val line :: read :: rest = fullName\n          line :: read :: \"INSTANCE\" :: rest\n        } else fullName\n      }\n\n      def value(fullName: String) = {\n        val universe = iMain.runtimeMirror.universe\n        import universe.{InstanceMirror, Symbol, TermName}\n        val pkg :: rest = fixClassBasedFullName((fullName split '.').toList)\n        val top = iMain.runtimeMirror.staticPackage(pkg)\n\n        @annotation.tailrec\n        def loop(inst: InstanceMirror, cur: Symbol, path: List[String]): Option[Any] = {\n          def mirrored =\n            if (inst != null) inst\n            else iMain.runtimeMirror reflect (iMain.runtimeMirror reflectModule cur.asModule).instance\n\n          path match {\n            case last :: Nil =>\n              cur.typeSignature.decls find (x => x.name.toString == last && x.isAccessor) map { m =>\n                (mirrored reflectMethod m.asMethod).apply()\n              }\n            case next :: rest =>\n              val s = cur.typeSignature.member(TermName(next))\n              val i =\n                if (s.isModule) {\n                  if (inst == null) null\n                  else iMain.runtimeMirror reflect (inst reflectModule s.asModule).instance\n                }\n                else if (s.isAccessor) {\n                  iMain.runtimeMirror reflect (mirrored reflectMethod s.asMethod).apply()\n                }\n                else {\n                  assert(false, s.fullName)\n                  inst\n                }\n              loop(i, s, rest)\n            case Nil => None\n          }\n        }\n\n        loop(null, top, rest)\n      }\n\n      Option(iMain.symbolOfTerm(id)) filter (_.exists) flatMap (s => Trying(value(s.fullName)).toOption.flatten)\n    }\n  }\n\n  class ReferenceManager {\n    private val refMap = mutable.Map[ReferenceWrapper, String]()\n    private val refInvMap = new TrieMap[ReferenceWrapper]()\n\n    /**\n     * Returns a reference (e.g. valid path) to the object or creates a record in reference maps (and returns null).\n     *\n     * @param obj  an object we want to find a reference for (can be null)\n     * @param path path of the object e.g. myVar.myField.b\n     * @return reference path to the object obj. The method returns null if obj is null itself or\n     *         obj hasn't been mentioned earlier or in the case of AnyVal object.\n     */\n    def getRef(obj: Any, path: String): String = obj match {\n      case null | _: Unit =>\n        clearRefIfPathExists(path)\n        null\n      case ref: AnyRef =>\n        val wrapper = new ReferenceWrapper(ref)\n        if (refMap.contains(wrapper)) {\n          if (refInvMap.get(path).orNull != wrapper) clearRefIfPathExists(path)\n          refMap(wrapper)\n        } else {\n          clearRefIfPathExists(path)\n          refMap(wrapper) = path\n          refInvMap.put(path, wrapper)\n          null\n        }\n      case _ => null\n    }\n\n\n    private def clearRefIfPathExists(path: String): Unit = {\n      if (refInvMap.contains(path)) {\n        val tree = refInvMap.subtree(path)\n        tree.forEach(refMap.remove(_: ReferenceWrapper))\n      }\n    }\n  }\n\n  class ReferenceWrapper(val ref: AnyRef) {\n    override def hashCode(): Int = ref.hashCode()\n\n    override def equals(obj: Any): Boolean = obj match {\n      case value: ReferenceWrapper =>\n        ref.eq(value.ref)\n      case _ => false\n    }\n  }\n\n\n  class VariablesView(val intp: IMain,\n                      val timeout: Int,\n                      val variableTimeout: Int,\n                      val collectionSizeLimit: Int,\n                      val stringSizeLimit: Int,\n                      val blackList: List[String],\n                      val whiteList: List[String] = null,\n                      val filterUnitResults: Boolean,\n                      val enableProfiling: Boolean,\n                      val depth: Int,\n                      val interpreterResCountLimit: Int = 5) {\n    val errors: mutable.MutableList[String] = mutable.MutableList[String]()\n    private val interpreterHandler = new InterpreterHandler(intp)\n    private val referenceManager = new ReferenceManager()\n\n    private val touched = mutable.Map[String, ScalaVariableInfo]()\n\n    private val handlerManager = new HandlerManager(\n      collectionSizeLimit = collectionSizeLimit,\n      stringSizeLimit = stringSizeLimit,\n      timeout = variableTimeout,\n      referenceManager = referenceManager,\n      enableProfiling = enableProfiling\n    )\n\n    //noinspection ScalaUnusedSymbol\n    def getZtoolsJsonResult: String = {\n      implicit val ztoolsFormats: AnyRef with Formats = Serialization.formats(NoTypeHints)\n      Serialization.write(\n        Map(\n          \"variables\" -> resolveVariables,\n          \"errors\" -> (errors ++ handlerManager.getErrors)\n        )\n      )\n    }\n\n    def toJson: String = {\n      implicit val ztoolsFormats: AnyRef with Formats = Serialization.formats(NoTypeHints)\n      Serialization.write(resolveVariables)\n    }\n\n    def resolveVariables: mutable.Map[String, Any] = {\n      val result: mutable.Map[String, Any] = mutable.Map[String, Any]()\n      val startTime = System.currentTimeMillis()\n\n      val interpreterVariablesNames = interpreterHandler.getVariableNames\n      val finalNames = filterVariableNames(interpreterVariablesNames)\n\n      finalNames.foreach { name =>\n        val varType = interpreterHandler.interpreter.typeOfTerm(name).toString().stripPrefix(\"()\")\n        val variable = mutable.Map[String, Any]()\n\n        result += name -> variable\n        variable += ResNames.TYPE -> varType\n        if (!isUnitOrNullResult(result, name))\n          variable += ResNames.VALUE -> \"<Not calculated>\"\n      }\n\n      var passedVariablesCount = 0\n      val totalVariablesCount = finalNames.size\n\n      if (checkTimeout(startTime, passedVariablesCount, totalVariablesCount))\n        return result\n\n      finalNames.foreach { name =>\n        if (checkTimeout(startTime, passedVariablesCount, totalVariablesCount))\n          return result\n        passedVariablesCount += 1\n\n        if (!isUnitOrNullResult(result, name)) {\n\n          calculateVariable(result, name)\n        }\n      }\n      result\n    }\n\n    private def calculateVariable(result: mutable.Map[String, Any], name: String) = {\n      val valMap = result(name).asInstanceOf[mutable.Map[String, Any]]\n      try {\n        val startTime = System.currentTimeMillis()\n\n        val info = interpreterHandler.getInfo(name, valMap(ResNames.TYPE).asInstanceOf[String])\n        val ref = referenceManager.getRef(info.value, name)\n        touched(info.path) = info\n\n        if (ref != null && ref != info.path) {\n          result += (info.path -> mutable.Map[String, Any](ResNames.REF -> ref))\n        } else {\n          result += info.path -> parseInfo(info, depth, startTime)\n        }\n      } catch {\n        case t: Throwable =>\n          valMap += ResNames.VALUE -> ExceptionUtils.getRootCauseMessage(t)\n      }\n    }\n\n    private def isUnitOrNullResult(result: mutable.Map[String, Any], name: String) = {\n      val res = result(name).asInstanceOf[mutable.Map[String, Any]]\n      val valType = res(ResNames.TYPE)\n      valType == \"Unit\" || valType == \"Null\"\n    }\n\n    def resolveVariable(path: String): mutable.Map[String, Any] = {\n      val result = mutable.Map[String, Any]()\n      val obj = touched.get(path).orNull\n      if (obj.ref != null) {\n        result += (ResNames.VALUE -> mutable.Map[String, Any](ResNames.REF -> obj.ref))\n      } else {\n        result += (ResNames.VALUE -> parseInfo(obj, depth))\n      }\n      result\n    }\n\n    private def parseInfo(info: ScalaVariableInfo, depth: Int, startTime: Long = System.currentTimeMillis()): Any = {\n      val loopback = new Loopback {\n        override def pass(obj: Any, id: String): Any = {\n          val si = ScalaVariableInfo(isAccessible = true, isLazy = false, obj, null, id, referenceManager.getRef(obj, id))\n          parseInfo(si, depth - 1)\n        }\n      }\n      handlerManager.handleVariable(info, loopback, depth, startTime)\n    }\n\n    private def filterVariableNames(interpreterVariablesNames: Seq[String]) = {\n      val variablesNames = interpreterVariablesNames.seq\n        .filter { name => !blackList.contains(name) }\n        .filter { name => whiteList == null || whiteList.contains(name) }\n\n\n      val p = Pattern.compile(\"res\\\\d*\")\n      val (resVariables, otherVariables: immutable.Seq[String]) = variablesNames.partition(x => p.matcher(x).matches())\n      val sortedResVariables = resVariables\n        .map(res => Try(res.stripPrefix(\"res\").toInt))\n        .filter(_.isSuccess)\n        .map(_.get)\n        .sortWith(_ > _)\n        .take(interpreterResCountLimit)\n        .map(num => \"res\" + num)\n\n      val finalNames = otherVariables ++ sortedResVariables\n      finalNames\n    }\n\n    //noinspection ScalaUnusedSymbol\n    private implicit def toJavaFunction[A, B](f: A => B): JFunction[A, B] = new JFunction[A, B] {\n      override def apply(a: A): B = f(a)\n    }\n\n    private def checkTimeout(startTimeout: Long, passed: Int, total: Int): Boolean = {\n      val isTimeoutExceed = System.currentTimeMillis() - startTimeout > timeout\n      if (isTimeoutExceed)\n        errors += s\"Variables collect timeout. Exceed ${timeout}ms. Parsed $passed from $total.\"\n      isTimeoutExceed\n    }\n  }\n\n  class DatasetHandler extends AbstractTypeHandler {\n    override def accept(obj: Any): Boolean = obj.isInstanceOf[Dataset[_]]\n\n    override def handle(scalaInfo: ScalaVariableInfo, loopback: Loopback, depth: Int): mutable.Map[String, Any] = {\n      val obj = scalaInfo.value\n      val df = obj.asInstanceOf[Dataset[_]]\n\n\n      val schema = df.schema\n      val jsonSchemaColumns = schema.fields.map(field => {\n        val value = withJsonObject { jsonField =>\n          jsonField += \"name\" -> wrap(field.name, null)\n          jsonField += \"nullable\" -> wrap(field.nullable, null)\n          jsonField += \"dataType\" -> wrap(field.dataType.typeName, null)\n        }\n        wrap(value, \"org.apache.spark.sql.types.StructField\")\n      }\n      )\n\n      val jsonSchema = mutable.Map(\n        ResNames.VALUE -> jsonSchemaColumns,\n        ResNames.TYPE -> \"org.apache.spark.sql.types.StructType\",\n        ResNames.LENGTH -> jsonSchemaColumns.length\n      )\n\n      val dfValue = mutable.Map(\n        \"schema()\" -> jsonSchema,\n        \"getStorageLevel()\" -> wrap(df.storageLevel.toString(), \"org.apache.spark.storage.StorageLevel\")\n      )\n\n      mutable.Map(\n        ResNames.VALUE -> dfValue\n      )\n    }\n  }\n\n\n  class RDDHandler extends AbstractTypeHandler {\n    override def accept(obj: Any): Boolean = obj.isInstanceOf[RDD[_]]\n\n    override def handle(scalaInfo: ScalaVariableInfo, loopback: Loopback, depth: Int): mutable.Map[String, Any] = withJsonObject {\n      json =>\n        val obj = scalaInfo.value\n        val rdd = obj.asInstanceOf[RDD[_]]\n        json += (ResNames.VALUE -> withJsonObject { value =>\n          value += (\"getNumPartitions()\" -> wrap(rdd.getNumPartitions, \"Int\"))\n          value += (\"name\" -> wrap(rdd.name, \"String\"))\n          value += (\"id\" -> wrap(rdd.id, \"Int\"))\n          value += (\"partitioner\" -> wrap(rdd.partitioner.toString, \"Option[org.apache.spark.Partitioner]\"))\n          value += (\"getStorageLevel()\" -> wrap(rdd.getStorageLevel.toString, \"org.apache.spark.storage.StorageLevel\"))\n        })\n    }\n  }\n\n  class SparkContextHandler extends AbstractTypeHandler {\n    override def accept(obj: Any): Boolean = obj.isInstanceOf[SparkContext]\n\n    override def handle(scalaInfo: ScalaVariableInfo, loopback: Loopback, depth: Int): mutable.Map[String, Any] = withJsonObject {\n      json =>\n        val sc = scalaInfo.value.asInstanceOf[SparkContext]\n        json += (ResNames.VALUE -> withJsonObject { json =>\n          json += (\"sparkUser\" -> wrap(sc.sparkUser, \"String\"))\n          json += (\"sparkTime\" -> wrap(sc.startTime, \"Long\"))\n          json += (\"applicationId()\" -> wrap(sc.applicationId, \"String\"))\n          json += (\"applicationAttemptId()\" -> wrap(sc.applicationAttemptId.toString, \"Option[String]\"))\n          json += (\"appName()\" -> sc.appName)\n        })\n    }\n  }\n\n  class SparkSessionHandler extends AbstractTypeHandler {\n    override def accept(obj: Any): Boolean = obj.isInstanceOf[SparkSession]\n\n    override def handle(scalaInfo: ScalaVariableInfo, loopback: Loopback, depth: Int): mutable.Map[String, Any] = withJsonObject {\n      json =>\n        val obj = scalaInfo.value\n        val id = scalaInfo.path\n\n        val spark = obj.asInstanceOf[SparkSession]\n        json += (ResNames.VALUE -> withJsonObject { json =>\n          json += (\"version()\" -> spark.version)\n          json += (\"sparkContext\" -> loopback.pass(spark.sparkContext, s\"$id.sparkContext\"))\n        })\n    }\n  }\n\n\n  /**\n   * Main section\n   */\n  val iMain: IMain = $intp\n  val depth: Int = 2\n  val filterUnitResults: Boolean = true\n  val enableProfiling: Boolean = true\n  val collectionSizeLimit = 100\n  val stringSizeLimit = 400\n  val timeout = 5000\n  val variableTimeout = 2000\n  val interpreterResCountLimit = 10\n  val blackList = \"$intp,sqlContext,z,engine\".split(',').toList\n  val whiteList: List[String] =  null\n\n\n  val variableView = new VariablesView(\n    intp = iMain,\n    timeout = timeout,\n    variableTimeout = variableTimeout,\n    collectionSizeLimit = collectionSizeLimit,\n    stringSizeLimit = stringSizeLimit,\n    blackList = blackList,\n    whiteList = whiteList,\n    filterUnitResults = filterUnitResults,\n    enableProfiling = enableProfiling,\n    depth = depth,\n    interpreterResCountLimit = interpreterResCountLimit\n  )\n\n  implicit val ztoolsFormats: AnyRef with Formats = Serialization.formats(NoTypeHints)\n  val variablesJson = variableView.getZtoolsJsonResult\n  println(\"---ztools-scala---\")\n  println(variablesJson)\n  println(\"---ztools-scala---\")\n}\ncatch {\n  case t: Throwable =>\n    import org.apache.commons.lang.exception.ExceptionUtils\n    import org.json4s.jackson.Serialization\n    import org.json4s.{Formats, NoTypeHints}\n\n    implicit val ztoolsFormats: AnyRef with Formats = Serialization.formats(NoTypeHints)\n    val result = Serialization.write(Map(\n      \"errors\" -> Array(f\"${ExceptionUtils.getMessage(t)}\\n${ExceptionUtils.getStackTrace(t)}\")\n    ))\n    println(\"---ztools-scala---\")\n    println(result)\n    println(\"---ztools-scala---\")\n}\n{\n    var sqlTableShows: Array[String] = Array(\"SHOW TABLES  \")\n    val additionalTables = Array[Tuple2[String, String]]((\"\", \"jointipologia\"), (\"\", \"jointipologiaandhotel\"), (\"\", \"joinferiados\"), (\"\", \"joineventos\"), (\"\", \"joinmeteotemp\"), (\"\", \"joineddataset\"))\n    val timeout = 5000\n    val collectOnlyTempTables = false\n    val appendOutput = false\n\n    case class ZtoolsColumn(name: String,\n                            columnType: String,\n                            description: String)\n\n    case class ZtoolsTable(name: String,\n                           databaseName: String,\n                           var columns: Array[ZtoolsColumn],\n                           var error: String = null)\n\n    case class ZtoolsSqlProfile(request: String, time: Long)\n\n    case class ZtoolsSqlInfo(tables: Array[ZtoolsTable],\n                             errors: Array[String],\n                             profiling: Array[ZtoolsSqlProfile],\n                             appendOutput: Boolean = appendOutput)\n\n\n    //TO KNOW:\n    //We collect info by spark.sql not spark.catalog because there some errors with Glue, database does not read\n    //Additionally we cannot use column name because it can be different \"namespace\" in EMR and \"database\" in vanilla spark\n    def calcZtoolsSqlSchemas(): String = {\n        import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility\n        import com.fasterxml.jackson.annotation.PropertyAccessor\n        import com.fasterxml.jackson.databind.ObjectMapper\n        import org.apache.commons.lang.exception.ExceptionUtils\n        import org.apache.spark.sql.Row\n\n        import scala.collection.mutable.ArrayBuffer\n\n        val startTime = System.currentTimeMillis()\n        val errors = ArrayBuffer[String]()\n\n        def convertThrowable(msg: String, t: Throwable): String = msg + \"\\n\" +\n                ExceptionUtils.getRootCauseMessage(t) + \"\\n\" +\n                ExceptionUtils.getStackTrace(t)\n\n        def escapeSql(string: String) = \"`\" + string.replace(\"`\", \"``\") + \"`\"\n\n\n\n\n        var tables = ArrayBuffer[ZtoolsTable]()\n        var profilingResult = ArrayBuffer[ZtoolsSqlProfile]()\n\n        def performSql(sqlRequest: String): Tuple2[Array[_ <: Row], String] = {\n            if (System.currentTimeMillis() - startTime > timeout) {\n                val error = f\"Timeout $timeout exceed. Sql request '$sqlRequest' ignored.\"\n                errors.append(error)\n                return (Array.empty, error)\n            }\n            val startTransactionTime = System.currentTimeMillis()\n            try {\n                val rows = spark.sql(sqlRequest).collect()\n                (rows, null)\n            } catch {\n                case t: Throwable =>\n                    errors.append(convertThrowable(sqlRequest, t))\n                    (Array.empty, ExceptionUtils.getMessage(t))\n            } finally {\n                profilingResult += ZtoolsSqlProfile(sqlRequest, System.currentTimeMillis() - startTransactionTime)\n            }\n        }\n\n        if (sqlTableShows!=null && sqlTableShows.isEmpty) {\n            val sqlRequest = \"show databases\"\n            val databases = performSql(sqlRequest)._1.map(_.getAs[String](0))\n            sqlTableShows = databases.map(db => f\"SHOW TABLES in $db\")\n        }\n\n        if (sqlTableShows==null) {\n            sqlTableShows = Array.empty\n        }\n\n        sqlTableShows.foreach(sqlRequest => {\n            try {\n                var listTables = performSql(sqlRequest)._1\n                if (collectOnlyTempTables)\n                    listTables = listTables.filter(_.getAs[Boolean](2) == true)\n\n                listTables.map(row => ZtoolsTable(\n                    databaseName = row.getAs[String](0),\n                    name = row.getAs[String](1),\n                    columns = Array.empty[ZtoolsColumn])).foreach(t => tables.append(t))\n            } catch {\n                case t: Throwable =>\n                    errors.append(convertThrowable(s\"Error transform output of  $sqlRequest\", t))\n                    ArrayBuffer.empty[ZtoolsTable]\n            }\n        })\n\n        val tableSet = (additionalTables.map(it => ZtoolsTable(it._2, it._1, Array.empty)) ++ tables).distinct\n\n        def processTable(table: ZtoolsTable): Unit = {\n            val columns = try {\n                val tableSqlName = if (table.databaseName == null || table.databaseName.isEmpty)\n                    escapeSql(table.name)\n                else\n                    escapeSql(table.databaseName) + \".\" + escapeSql(table.name)\n\n                //https://spark.apache.org/docs/3.0.0-preview/sql-ref-syntax-aux-describe-table.html\n                val sqlResult = performSql(s\"DESCRIBE TABLE $tableSqlName\")\n\n                val columnRows = sqlResult._1\n                table.error = sqlResult._2\n\n                //Ignore partition section\n                columnRows.takeWhile(row => !Option(row.getAs[String](0)).getOrElse(\"\").startsWith(\"# \"))\n                        .map(row => ZtoolsColumn(row.getAs[String](0), row.getAs[String](1), row.getAs[String](2)))\n            } catch {\n                case t: Throwable => convertThrowable(s\"Error list columns for ${table.name}\", t)\n                    table.error = ExceptionUtils.getRootCauseMessage(t)\n                    errors.append(convertThrowable(s\"Error list columns for ${table.name}\", t))\n                    return\n            }\n            table.columns = columns\n        }\n\n        tableSet.foreach(table => {\n            processTable(table)\n        })\n\n        val res = ZtoolsSqlInfo(tableSet.toArray, errors.toArray, profilingResult.toArray)\n        val objectMapper = new ObjectMapper().setVisibility(PropertyAccessor.FIELD, Visibility.ANY).writerWithDefaultPrettyPrinter()\n        objectMapper.writeValueAsString(res)\n    }\n\n    def ztoolsPrintResult(): Unit = {\n        val ztoolsSqlResult = calcZtoolsSqlSchemas()\n        println(\"---ztools-sql---\")\n        println(ztoolsSqlResult)\n        println(\"---ztools-sql---\")\n    }\n\n    ztoolsPrintResult()\n}",
   "id": "",
   "dateCreated": "2023-05-09 21:52:38.723",
   "config": {
    "tableHide": true,
    "editorHide": true
   },
   "dateStarted": "2023-05-09 21:54:07.520",
   "dateUpdated": "2023-05-09 21:54:07.520"
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {}
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "// FILE #2",
   "id": "",
   "dateCreated": "2023-05-08 15:40:50.806",
   "config": {},
   "dateStarted": "2023-05-09 21:52:38.189",
   "dateUpdated": "2023-05-09 21:52:38.515",
   "dateFinished": "2023-05-09 21:52:38.515",
   "results": {
    "code": "SUCCESS",
    "msg": []
   }
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {
      "ZTOOLS_DATA_FRAMES": [
       {
        "columns": [
         {
          "name": "hotel_ID",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "Reserve_ID",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "pais",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "estado_reserva",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "room_ID",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "tipo_quarto",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "rate_plan",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "data_reserva",
          "tpe": {
           "presentableName": "timestamp"
          },
          "nullable": true
         },
         {
          "name": "num_noites",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "ocupacao",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "adultos",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "criancas",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "bebes",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "preco_euros",
          "tpe": {
           "presentableName": "double"
          },
          "nullable": true
         },
         {
          "name": "data_chegada",
          "tpe": {
           "presentableName": "date"
          },
          "nullable": true
         },
         {
          "name": "data_partida",
          "tpe": {
           "presentableName": "date"
          },
          "nullable": true
         },
         {
          "name": "preco_noite",
          "tpe": {
           "presentableName": "double"
          },
          "nullable": true
         }
        ]
       }
      ]
     }
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "import org.apache.spark.sql.DataFrame\n\nval joinFolder = \"/data/joins\"\nval saveJoins = false\n\ndef saveDataFrame(df: DataFrame, name: String): Unit = {\n    df.coalesce(1) // Print into a single file\n            .write\n            .mode(\"overwrite\")\n            .option(\"delimiter\", \";\")\n            .option(\"header\", true) // Maintain Headers\n            .csv(s\"$joinFolder/$name\") // Write to csv\n}\nval initialCount = spark.sql(\n    \"\"\"\n      SELECT DISTINCT * FROM QuartosReservados\n      \"\"\")\nprintln(initialCount.count())",
   "id": "",
   "dateCreated": "2023-04-30 19:59:44.804",
   "config": {
    "editorHide": false
   },
   "dateStarted": "2023-05-09 21:52:38.517",
   "dateUpdated": "2023-05-09 21:52:44.101",
   "dateFinished": "2023-05-09 21:52:44.100",
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "24955\nimport org.apache.spark.sql.DataFrame\n\u001b[1m\u001b[34mjoinFolder\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m = /data/joins\n\u001b[1m\u001b[34msaveJoins\u001b[0m: \u001b[1m\u001b[32mBoolean\u001b[0m = false\n\u001b[1m\u001b[34msaveDataFrame\u001b[0m: \u001b[1m\u001b[32m(df: org.apache.spark.sql.DataFrame, name: String)Unit\u001b[0m\n\u001b[1m\u001b[34minitialCount\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [hotel_ID: int, Reserve_ID: int ... 29 more fields]\n"
     }
    ]
   }
  },
  {
   "user": "anonymous",
   "config": {
    "colWidth": 12,
    "fontSize": 9,
    "enabled": true,
    "results": {},
    "editorSetting": {
     "language": "scala",
     "editOnDblClick": false,
     "completionKey": "TAB",
     "completionSupport": true
    },
    "editorMode": "ace/mode/scala"
   },
   "settings": {
    "params": {
     "bdtMeta": {
      "ZTOOLS_DATA_FRAMES": [
       {
        "columns": [
         {
          "name": "hotel_ID",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "Reserve_ID",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "pais",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "estado_reserva",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "room_ID",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "Q_tipo_quarto",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "rate_plan",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "data_reserva",
          "tpe": {
           "presentableName": "timestamp"
          },
          "nullable": true
         },
         {
          "name": "data_chegada",
          "tpe": {
           "presentableName": "date"
          },
          "nullable": true
         },
         {
          "name": "data_partida",
          "tpe": {
           "presentableName": "date"
          },
          "nullable": true
         },
         {
          "name": "num_noites",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "ocupacao",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "adultos",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "criancas",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "bebes",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "preco_euros",
          "tpe": {
           "presentableName": "double"
          },
          "nullable": true
         },
         {
          "name": "T_tipo_quarto",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "quantidade",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_maxima",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_max_adultos",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_max_criancas",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_max_bebes",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         }
        ]
       }
      ]
     }
    },
    "forms": {}
   },
   "apps": [],
   "jobName": "paragraph_1563110258183_1613653816",
   "id": "20190714-161738_1950435706",
   "dateCreated": "2019-07-14T16:17:38+0300",
   "status": "FINISHED",
   "progressUpdateIntervalMs": 500,
   "focus": true,
   "$$hashKey": "object:394",
   "text": "val joinTipologia = spark.sql(\n    \"\"\"\n       SELECT DISTINCT \n           Q.hotel_ID, \n           Q.Reserve_ID,\n           Q.pais,\n           Q.estado_reserva,\n           Q.room_ID,\n           Q.tipo_quarto AS Q_tipo_quarto,\n           Q.rate_plan,\n           Q.data_reserva,\n           Q.data_chegada,\n           Q.data_partida,\n           Q.num_noites,\n           Q.ocupacao,\n           Q.adultos,\n           Q.criancas,\n           Q.bebes,\n           Q.preco_euros,\n           T.tipo_quarto as T_tipo_quarto, \n           T.quantidade,\n           T.capacidade_maxima,\n           T.capacidade_max_adultos,\n           T.capacidade_max_criancas,\n           T.capacidade_max_bebes\n       FROM QuartosReservados as Q\n       INNER JOIN Tipologias as T\n           ON Q.hotel_ID = T.hotel_ID AND T.room_ID = Q.room_ID\n      \"\"\")\n\njoinTipologia.createOrReplaceTempView(\"JoinTipologia\")\njoinTipologia.cache()\n\nif (saveJoins)\n    saveDataFrame(joinTipologia, \"joinTipologia\")\n\nprintln(joinTipologia.count())\njoinTipologia.printSchema()",
   "dateStarted": "2023-05-09 21:52:44.119",
   "dateUpdated": "2023-05-09 21:52:49.575",
   "dateFinished": "2023-05-09 21:52:49.575",
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "24947\nroot\n |-- hotel_ID: integer (nullable = true)\n |-- Reserve_ID: integer (nullable = true)\n |-- pais: string (nullable = true)\n |-- estado_reserva: string (nullable = true)\n |-- room_ID: integer (nullable = true)\n |-- Q_tipo_quarto: string (nullable = true)\n |-- rate_plan: string (nullable = true)\n |-- data_reserva: timestamp (nullable = true)\n |-- data_chegada: date (nullable = true)\n |-- data_partida: date (nullable = true)\n |-- num_noites: integer (nullable = true)\n |-- ocupacao: integer (nullable = true)\n |-- adultos: integer (nullable = true)\n |-- criancas: integer (nullable = true)\n |-- bebes: integer (nullable = true)\n |-- preco_euros: double (nullable = true)\n |-- T_tipo_quarto: string (nullable = true)\n |-- quantidade: integer (nullable = true)\n |-- capacidade_maxima: integer (nullable = true)\n |-- capacidade_max_adultos: integer (nullable = true)\n |-- capacidade_max_criancas: integer (nullable = true)\n |-- capacidade_max_bebes: integer (nullable = true)\n\n\u001b[1m\u001b[34mjoinTipologia\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [hotel_ID: int, Reserve_ID: int ... 20 more fields]\n"
     }
    ]
   }
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {
      "inlay": {},
      "ZTOOLS_DATA_FRAMES": [
       {
        "columns": [
         {
          "name": "hotel_ID",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "Reserve_ID",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "pais",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "estado_reserva",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "room_ID",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "Q_tipo_quarto",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "rate_plan",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "data_reserva",
          "tpe": {
           "presentableName": "timestamp"
          },
          "nullable": true
         },
         {
          "name": "data_chegada",
          "tpe": {
           "presentableName": "date"
          },
          "nullable": true
         },
         {
          "name": "data_partida",
          "tpe": {
           "presentableName": "date"
          },
          "nullable": true
         },
         {
          "name": "num_noites",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "ocupacao",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "adultos",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "criancas",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "bebes",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "preco_euros",
          "tpe": {
           "presentableName": "double"
          },
          "nullable": true
         },
         {
          "name": "T_tipo_quarto",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "quantidade",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_maxima",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_max_adultos",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_max_criancas",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_max_bebes",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "localizacao",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "area_localizacao",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "estrelas",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "idade_max_criancas",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "idade_max_bebes",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "hora_max_checkin",
          "tpe": {
           "presentableName": "timestamp"
          },
          "nullable": true
         },
         {
          "name": "qtd_quartos",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         }
        ]
       }
      ]
     }
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "var joinTipologiaAndHotel = spark.sql(\n    \"\"\"\n       SELECT \n           J.*,\n           H.localizacao,\n           H.area_localizacao,\n           H.estrelas,\n           H.idade_max_criancas,\n           H.idade_max_bebes,\n           H.hora_max_checkin,\n           H.qtd_quartos\n       FROM joinTipologia as J\n       INNER JOIN Hotel as H\n           ON J.hotel_ID = H.hotel_ID\n    \"\"\")\n\njoinTipologiaAndHotel.createOrReplaceTempView(\"JoinTipologiaAndHotel\")\n\nprintln(joinTipologiaAndHotel.count())\n//joinTipologiaAndHotel.printSchema()\nif (saveJoins)\n    saveDataFrame(joinTipologiaAndHotel, \"joinTipologiaAndHotel\")",
   "id": "",
   "dateCreated": "2023-04-30 20:01:48.781",
   "config": {
    "tableHide": false
   },
   "dateStarted": "2023-05-09 21:52:49.586",
   "dateUpdated": "2023-05-09 21:52:53.549",
   "dateFinished": "2023-05-09 21:52:53.549",
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "24947\n\u001b[1m\u001b[34mjoinTipologiaAndHotel\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [hotel_ID: int, Reserve_ID: int ... 27 more fields]\n"
     }
    ]
   }
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {
      "inlay": {},
      "ZTOOLS_DATA_FRAMES": [
       {
        "columns": [
         {
          "name": "hotel_ID",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "Reserve_ID",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "pais",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "estado_reserva",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "room_ID",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "Q_tipo_quarto",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "rate_plan",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "data_reserva",
          "tpe": {
           "presentableName": "timestamp"
          },
          "nullable": true
         },
         {
          "name": "data_chegada",
          "tpe": {
           "presentableName": "date"
          },
          "nullable": true
         },
         {
          "name": "data_partida",
          "tpe": {
           "presentableName": "date"
          },
          "nullable": true
         },
         {
          "name": "num_noites",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "ocupacao",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "adultos",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "criancas",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "bebes",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "preco_euros",
          "tpe": {
           "presentableName": "double"
          },
          "nullable": true
         },
         {
          "name": "T_tipo_quarto",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "quantidade",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_maxima",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_max_adultos",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_max_criancas",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_max_bebes",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "localizacao",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "area_localizacao",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "estrelas",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "idade_max_criancas",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "idade_max_bebes",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "hora_max_checkin",
          "tpe": {
           "presentableName": "timestamp"
          },
          "nullable": true
         },
         {
          "name": "qtd_quartos",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "is_holiday",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": false
         }
        ]
       }
      ]
     }
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "var joinFeriados = spark.sql(\n    \"\"\"\n        SELECT J.*, F.is_holiday\n        FROM JoinTipologiaAndHotel AS J\n        LEFT JOIN (SELECT * FROM Feriados WHERE is_holiday=1) AS F\n            ON F.date <= J.data_partida AND f.date >= data_chegada\n    \"\"\"\n)\njoinFeriados = joinFeriados.na.fill(0, Seq(\"is_holiday\"))\n\njoinFeriados.createOrReplaceTempView(\"JoinFeriados\")\n\n// Substituição de valores nullos por 0\n//val updatedFeriados = joinFeriados.na.fill(0, Seq(\"is_holiday\"))\n\nprintln(joinFeriados.count())\n\njoinFeriados.show()",
   "id": "",
   "dateCreated": "2023-04-30 20:12:14.191",
   "config": {
    "tableHide": false
   },
   "dateStarted": "2023-05-09 21:52:53.562",
   "dateUpdated": "2023-05-09 21:52:58.303",
   "dateFinished": "2023-05-09 21:52:58.303",
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "25213\n+--------+----------+--------------+--------------+-------+--------------------+--------------------+--------------------+------------+------------+----------+--------+-------+--------+-----+-----------+--------------------+----------+-----------------+----------------------+-----------------------+--------------------+--------------------+----------------+--------+------------------+---------------+-------------------+-----------+----------+\n|hotel_ID|Reserve_ID|          pais|estado_reserva|room_ID|       Q_tipo_quarto|           rate_plan|        data_reserva|data_chegada|data_partida|num_noites|ocupacao|adultos|criancas|bebes|preco_euros|       T_tipo_quarto|quantidade|capacidade_maxima|capacidade_max_adultos|capacidade_max_criancas|capacidade_max_bebes|         localizacao|area_localizacao|estrelas|idade_max_criancas|idade_max_bebes|   hora_max_checkin|qtd_quartos|is_holiday|\n+--------+----------+--------------+--------------+-------+--------------------+--------------------+--------------------+------------+------------+----------+--------+-------+--------+-----+-----------+--------------------+----------+-----------------+----------------------+-----------------------+--------------------+--------------------+----------------+--------+------------------+---------------+-------------------+-----------+----------+\n|     503|   1722075|        Brasil|     Registado|   2785|Duplo Economico T...|             BAR APA|2023-04-16 22:43:...|  2023-06-12|  2023-06-16|         4|       2|      2|       0|    0|      340.0|Duplo Economico T...|        64|                2|                     2|                      0|                   0|              Aveiro|          Aveiro|       3|                10|             36|2023-05-09 23:00:00|        187|         0|\n|     482|   1720759|      Portugal|     Registado|   2285|      Apartamento T1|(WEB) Non-refunda...|2023-04-15 07:48:...|  2023-04-15|  2023-04-16|         1|       3|      3|       0|    0|      70.68|      Apartamento T1|        90|                4|                     4|                      3|                   1|            Portimão|           Lagos|       4|                 3|             36|2023-05-09 23:59:00|        143|         0|\n|     311|   1720055|        Itália|     Registado|   2034|DBS - Quarto Dupl...|      MR - Main Rate|2023-04-14 07:06:...|  2023-04-17|  2023-04-18|         1|       2|      2|       0|    0|      90.25|DBS - Quarto Dupl...|         5|                2|                     2|                      2|                   0|                Maia|            Maia|       3|                12|             36|2023-05-09 23:59:00|         30|         0|\n|     514|   1715174|   Reino Unido|     Cancelado|   2425|     Eco Garden Room|   Non-Refundable >5|2023-04-07 11:59:...|  2023-06-17|  2023-06-22|         5|       2|      2|       0|    0|      580.0|     Eco Garden Room|         4|                2|                     2|                      0|                   0|Charneca de Caparica|       Carnaxide|       3|                12|             24|2023-05-09 18:00:00|         13|         0|\n|     556|   1715161|      Portugal|      Pendente|   2831|Double Room Standard|WEB (Best Availab...|2023-04-07 11:45:...|  2023-04-22|  2023-04-23|         1|       2|      2|       0|    1|      72.25|Double Room Standard|        45|                3|                     2|                      0|                   1|             Covilhã|  Castelo Branco|       3|                10|              3|2023-05-09 23:00:00|         84|         0|\n|     556|   1711558|      Portugal|      Pendente|   2831|Double Room Standard|WEB (Best Availab...|2023-04-02 21:17:...|  2023-04-06|  2023-04-09|         3|       2|      2|       0|    0|      215.9|Double Room Standard|        45|                3|                     2|                      0|                   1|             Covilhã|  Castelo Branco|       3|                10|              3|2023-05-09 23:00:00|         84|         1|\n|     556|   1711558|      Portugal|      Pendente|   2831|Double Room Standard|WEB (Best Availab...|2023-04-02 21:17:...|  2023-04-06|  2023-04-09|         3|       2|      2|       0|    0|      215.9|Double Room Standard|        45|                3|                     2|                      0|                   1|             Covilhã|  Castelo Branco|       3|                10|              3|2023-05-09 23:00:00|         84|         1|\n|     319|   1711236|       Bélgica|     Registado|   1416|               Suite|         Normal (RO)|2023-04-02 16:20:...|  2023-08-20|  2023-08-23|         3|       2|      2|       0|    0|      352.5|               Suite|         2|                2|                     2|                      0|                   0|              Aveiro|          Aveiro|       3|                12|             24|2023-05-09 23:59:00|         96|         0|\n|     311|   1709937|        Itália|      Pendente|   2034|DBS - Quarto Dupl...|      MR - Main Rate|2023-03-31 16:43:...|  2023-04-14|  2023-04-15|         1|       2|      4|       0|    0|      171.0|DBS - Quarto Dupl...|         5|                2|                     2|                      2|                   0|                Maia|            Maia|       3|                12|             36|2023-05-09 23:59:00|         30|         0|\n|     310|   1709380|      Portugal|    Modificada|   1673|Quarto Duplo Supe...|      MR - Main Rate|2023-03-30 21:08:...|  2023-04-01|  2023-04-02|         1|       2|      2|       0|    0|    50.6825|Quarto Duplo Supe...|        63|                2|                     2|                      1|                   0|                Gaia|           Porto|       3|                 0|              0|2023-05-09 23:59:00|        192|         0|\n|     539|   1708305|      Portugal|    Confirmado|   2542|Quarto Dpl. Standard|                 Bar|2023-03-29 15:13:...|  2023-04-07|  2023-04-09|         2|       1|      1|       0|    0|      170.0|Quarto Dpl. Standard|         5|                2|                     2|                      0|                   0|              Amares|          Amares|       0|                 0|              0|2023-05-09 18:00:00|         58|         1|\n|     539|   1708305|      Portugal|    Confirmado|   2542|Quarto Dpl. Standard|                 Bar|2023-03-29 15:13:...|  2023-04-07|  2023-04-09|         2|       1|      1|       0|    0|      170.0|Quarto Dpl. Standard|         5|                2|                     2|                      0|                   0|              Amares|          Amares|       0|                 0|              0|2023-05-09 18:00:00|         58|         1|\n|     309|   1707106|    Luxemburgo|     Registado|   1372|Quarto Duplo Stan...|      MR - Main Rate|2023-03-27 22:34:...|  2023-03-27|  2023-03-28|         1|       2|      2|       0|    0|       47.5|Quarto Duplo Stan...|        10|                2|                     2|                      1|                   0|             Valongo|           Porto|       3|                12|              4|2023-05-09 23:59:00|         41|         0|\n|     319|   1705435|       Espanha|     Registado|   2890|          City Duplo|         Normal (RO)|2023-03-25 20:05:...|  2023-04-08|  2023-04-09|         1|       2|      2|       0|    0|       73.5|          City Duplo|        13|                2|                     2|                      0|                   0|              Aveiro|          Aveiro|       3|                12|             24|2023-05-09 23:59:00|         96|         1|\n|     273|   1704694|       Espanha|     Registado|   1235|           Rosmarine|              Normal|2023-03-24 16:59:...|  2023-07-14|  2023-07-16|         2|       2|      2|       0|    0|      450.0|           Rosmarine|         1|                2|                     2|                      0|                   0|    Seixas - Caminha|Viana do Castelo|       0|                 0|              0|2023-05-09 12:00:00|         14|         0|\n|     309|   1697270|      Portugal|     Registado|   2254|Quarto Duplo Supe...|      MR - Main Rate|2023-03-14 12:18:...|  2023-06-01|  2023-06-04|         3|       2|      2|       0|    0|    189.829|Quarto Duplo Supe...|         8|                2|                     2|                      1|                   0|             Valongo|           Porto|       3|                12|              4|2023-05-09 23:59:00|         41|         0|\n|     310|   1693127|      Portugal|     Registado|   1673|Quarto Duplo Supe...|      MR - Main Rate|2023-03-08 10:54:...|  2023-03-29|  2023-04-02|         4|       1|      1|       0|    0|   216.5525|Quarto Duplo Supe...|        63|                2|                     2|                      1|                   0|                Gaia|           Porto|       3|                 0|              0|2023-05-09 23:59:00|        192|         0|\n|     358|   1692359|Estados Unidos|     Registado|   1745|Suite Deluxe com ...|                 BAR|2023-03-07 09:15:...|  2023-04-21|  2023-04-28|         7|       2|      2|       0|    0|     2329.0|Suite Deluxe com ...|         1|                2|                     2|                      0|                   0|               Porto|           Porto|       0|                12|              2|2023-05-09 23:59:00|         10|         1|\n|     366|   1692243|      Portugal|     Registado|   1652|     QUARTO FAMILIAR|      Non Refundable|2023-03-06 23:15:...|  2023-03-11|  2023-03-12|         1|       2|      2|       2|    0|       95.4|     QUARTO FAMILIAR|         4|                4|                     2|                      2|                   1|      Castelo Branco|  Castelo Branco|       4|                12|              2|2023-05-09 23:59:00|         71|         0|\n|     185|   1687655|        Israel|    Modificada|    721|               Suite|                 BAR|2023-02-28 16:35:...|  2023-06-02|  2023-06-05|         3|       2|      2|       0|    0|      675.0|               Suite|         1|                4|                     4|                      2|                   1|   Valdigem - Lamego|          Chaves|       4|                12|             36|2023-05-09 23:00:00|         20|         0|\n+--------+----------+--------------+--------------+-------+--------------------+--------------------+--------------------+------------+------------+----------+--------+-------+--------+-----+-----------+--------------------+----------+-----------------+----------------------+-----------------------+--------------------+--------------------+----------------+--------+------------------+---------------+-------------------+-----------+----------+\nonly showing top 20 rows\n\n\u001b[1m\u001b[34mjoinFeriados\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [hotel_ID: int, Reserve_ID: int ... 28 more fields]\njoinFeriados: org.apache.spark.sql.DataFrame = [hotel_ID: int, Reserve_ID: int ... 28 more fields]\n"
     }
    ]
   }
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {
      "inlay": {},
      "ZTOOLS_DATA_FRAMES": [
       {
        "columns": [
         {
          "name": "hotel_ID",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "Reserve_ID",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "pais",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "estado_reserva",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "room_ID",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "Q_tipo_quarto",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "rate_plan",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "data_reserva",
          "tpe": {
           "presentableName": "timestamp"
          },
          "nullable": true
         },
         {
          "name": "data_chegada",
          "tpe": {
           "presentableName": "date"
          },
          "nullable": true
         },
         {
          "name": "data_partida",
          "tpe": {
           "presentableName": "date"
          },
          "nullable": true
         },
         {
          "name": "num_noites",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "ocupacao",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "adultos",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "criancas",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "bebes",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "preco_euros",
          "tpe": {
           "presentableName": "double"
          },
          "nullable": true
         },
         {
          "name": "T_tipo_quarto",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "quantidade",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_maxima",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_max_adultos",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_max_criancas",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_max_bebes",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "localizacao",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "area_localizacao",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "estrelas",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "idade_max_criancas",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "idade_max_bebes",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "hora_max_checkin",
          "tpe": {
           "presentableName": "timestamp"
          },
          "nullable": true
         },
         {
          "name": "qtd_quartos",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "is_holiday",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": false
         },
         {
          "name": "Location",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "Event",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "start_Date",
          "tpe": {
           "presentableName": "date"
          },
          "nullable": true
         },
         {
          "name": "end_date",
          "tpe": {
           "presentableName": "date"
          },
          "nullable": true
         }
        ]
       }
      ]
     }
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "val joinEventos = spark.sql(\n    \"\"\"\n        SELECT DISTINCT QR.*, E.*\n        FROM JoinFeriados QR\n        LEFT JOIN Eventos E\n            ON QR.data_partida >= E.start_Date AND QR.data_chegada <= E.end_date\n            AND QR.area_localizacao = E.Location\n    \"\"\")\n\njoinEventos.createOrReplaceTempView(\"JoinEventos\")\n\nprintln(joinEventos.count())\n//joinEventos.show()",
   "id": "",
   "dateCreated": "2023-04-30 20:16:51.675",
   "config": {},
   "dateStarted": "2023-05-09 21:52:58.337",
   "dateUpdated": "2023-05-09 21:53:08.322",
   "dateFinished": "2023-05-09 21:53:08.322",
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "24961\n\u001b[1m\u001b[34mjoinEventos\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [hotel_ID: int, Reserve_ID: int ... 32 more fields]\n"
     }
    ]
   }
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {
      "inlay": {
       "collapsed": true
      },
      "ZTOOLS_DATA_FRAMES": [
       {
        "columns": [
         {
          "name": "hotel_ID",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "Reserve_ID",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "pais",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "estado_reserva",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "room_ID",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "Q_tipo_quarto",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "rate_plan",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "data_reserva",
          "tpe": {
           "presentableName": "timestamp"
          },
          "nullable": true
         },
         {
          "name": "data_chegada",
          "tpe": {
           "presentableName": "date"
          },
          "nullable": true
         },
         {
          "name": "data_partida",
          "tpe": {
           "presentableName": "date"
          },
          "nullable": true
         },
         {
          "name": "num_noites",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "ocupacao",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "adultos",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "criancas",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "bebes",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "preco_euros",
          "tpe": {
           "presentableName": "double"
          },
          "nullable": true
         },
         {
          "name": "T_tipo_quarto",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "quantidade",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_maxima",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_max_adultos",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_max_criancas",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_max_bebes",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "localizacao",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "area_localizacao",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "estrelas",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "idade_max_criancas",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "idade_max_bebes",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "hora_max_checkin",
          "tpe": {
           "presentableName": "timestamp"
          },
          "nullable": true
         },
         {
          "name": "qtd_quartos",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "is_holiday",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": false
         },
         {
          "name": "Location",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "Event",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "start_Date",
          "tpe": {
           "presentableName": "date"
          },
          "nullable": true
         },
         {
          "name": "end_date",
          "tpe": {
           "presentableName": "date"
          },
          "nullable": true
         },
         {
          "name": "city",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "tavg",
          "tpe": {
           "presentableName": "double"
          },
          "nullable": true
         },
         {
          "name": "tmax",
          "tpe": {
           "presentableName": "double"
          },
          "nullable": true
         },
         {
          "name": "tmin",
          "tpe": {
           "presentableName": "double"
          },
          "nullable": true
         },
         {
          "name": "prcp",
          "tpe": {
           "presentableName": "double"
          },
          "nullable": true
         }
        ]
       }
      ]
     }
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "val joinMeteoTemp = spark.sql(\n    \"\"\"\n        SELECT QR.*, M.city, M.tavg, M.tmax, M.tmin, M.prcp\n        FROM JoinEventos AS QR\n        JOIN Meteorologia AS M \n            ON QR.area_localizacao = M.city \n            AND M.date <= QR.data_partida AND M.date >= QR.data_chegada\n    \"\"\")\n\njoinMeteoTemp.createOrReplaceTempView(\"JoinMeteoTemp\")\n\nprintln(joinMeteoTemp.count())\njoinMeteoTemp.show()",
   "id": "",
   "dateCreated": "2023-05-01 15:31:17.385",
   "config": {
    "tableHide": true
   },
   "dateStarted": "2023-05-09 21:53:08.332",
   "dateUpdated": "2023-05-09 21:53:24.464",
   "dateFinished": "2023-05-09 21:53:24.464",
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "67109\n+--------+----------+--------+--------------+-------+--------------------+-------------------+--------------------+------------+------------+----------+--------+-------+--------+-----+--------------+--------------------+----------+-----------------+----------------------+-----------------------+--------------------+-----------+----------------+--------+------------------+---------------+-------------------+-----------+----------+--------+-----+----------+--------+---------+----+----+----+----+\n|hotel_ID|Reserve_ID|    pais|estado_reserva|room_ID|       Q_tipo_quarto|          rate_plan|        data_reserva|data_chegada|data_partida|num_noites|ocupacao|adultos|criancas|bebes|   preco_euros|       T_tipo_quarto|quantidade|capacidade_maxima|capacidade_max_adultos|capacidade_max_criancas|capacidade_max_bebes|localizacao|area_localizacao|estrelas|idade_max_criancas|idade_max_bebes|   hora_max_checkin|qtd_quartos|is_holiday|Location|Event|start_Date|end_date|     city|tavg|tmax|tmin|prcp|\n+--------+----------+--------+--------------+-------+--------------------+-------------------+--------------------+------------+------------+----------+--------+-------+--------+-----+--------------+--------------------+----------+-----------------+----------------------+-----------------------+--------------------+-----------+----------------+--------+------------------+---------------+-------------------+-----------+----------+--------+-----+----------+--------+---------+----+----+----+----+\n|     225|   1617407|  França|     Registado|    846|Apartamento Vista...|                 OR|2022-10-30 11:11:...|  2022-11-09|  2022-11-14|         5|       3|      3|       0|    0|        1075.0|Apartamento Vista...|         3|                5|                     5|                      4|                   2|      Porto|           Porto|       0|                 2|             24|2023-05-09 17:00:00|          5|         0|    null| null|      null|    null|    Porto|14.5|16.2|13.1| 3.2|\n|     225|   1617407|  França|     Registado|    846|Apartamento Vista...|                 OR|2022-10-30 11:11:...|  2022-11-09|  2022-11-14|         5|       3|      3|       0|    0|        1075.0|Apartamento Vista...|         3|                5|                     5|                      4|                   2|      Porto|           Porto|       0|                 2|             24|2023-05-09 17:00:00|          5|         0|    null| null|      null|    null|    Porto|15.7|18.6|13.7|17.4|\n|     225|   1617407|  França|     Registado|    846|Apartamento Vista...|                 OR|2022-10-30 11:11:...|  2022-11-09|  2022-11-14|         5|       3|      3|       0|    0|        1075.0|Apartamento Vista...|         3|                5|                     5|                      4|                   2|      Porto|           Porto|       0|                 2|             24|2023-05-09 17:00:00|          5|         0|    null| null|      null|    null|    Porto|15.5|20.0|12.0| 0.0|\n|     225|   1617407|  França|     Registado|    846|Apartamento Vista...|                 OR|2022-10-30 11:11:...|  2022-11-09|  2022-11-14|         5|       3|      3|       0|    0|        1075.0|Apartamento Vista...|         3|                5|                     5|                      4|                   2|      Porto|           Porto|       0|                 2|             24|2023-05-09 17:00:00|          5|         0|    null| null|      null|    null|    Porto|15.5|20.5|12.0| 0.0|\n|     225|   1617407|  França|     Registado|    846|Apartamento Vista...|                 OR|2022-10-30 11:11:...|  2022-11-09|  2022-11-14|         5|       3|      3|       0|    0|        1075.0|Apartamento Vista...|         3|                5|                     5|                      4|                   2|      Porto|           Porto|       0|                 2|             24|2023-05-09 17:00:00|          5|         0|    null| null|      null|    null|    Porto|15.9|19.7|13.9| 0.0|\n|     225|   1617407|  França|     Registado|    846|Apartamento Vista...|                 OR|2022-10-30 11:11:...|  2022-11-09|  2022-11-14|         5|       3|      3|       0|    0|        1075.0|Apartamento Vista...|         3|                5|                     5|                      4|                   2|      Porto|           Porto|       0|                 2|             24|2023-05-09 17:00:00|          5|         0|    null| null|      null|    null|    Porto|14.7|16.7|13.3|20.6|\n|     311|   1491643|  França|     Registado|   1407|DB - Quarto Duplo...|       DB Room Only|2022-05-09 12:41:...|  2022-06-09|  2022-06-10|         1|       1|      1|       0|    0|          74.0|DB - Quarto Duplo...|         8|                2|                     2|                      2|                   0|       Maia|            Maia|       3|                12|             36|2023-05-09 23:59:00|         30|         1|    null| null|      null|    null|     Maia|20.5|24.1|16.6| 0.0|\n|     311|   1491643|  França|     Registado|   1407|DB - Quarto Duplo...|       DB Room Only|2022-05-09 12:41:...|  2022-06-09|  2022-06-10|         1|       1|      1|       0|    0|          74.0|DB - Quarto Duplo...|         8|                2|                     2|                      2|                   0|       Maia|            Maia|       3|                12|             36|2023-05-09 23:59:00|         30|         1|    null| null|      null|    null|     Maia|19.6|22.9|17.4| 0.0|\n|     179|   1490275|   Suiça|     Registado|    631|        Twin Comfort|No Reembolsable 13%|2022-05-07 13:42:...|  2022-05-09|  2022-05-13|         4|       2|      2|       0|    0|460.0799999999|        Twin Comfort|         8|                2|                     2|                      0|                   0|      Porto|           Porto|       4|                12|             24|2023-05-09 23:59:00|        132|         0|    null| null|      null|    null|    Porto|18.5|24.3|14.0|null|\n|     179|   1490275|   Suiça|     Registado|    631|        Twin Comfort|No Reembolsable 13%|2022-05-07 13:42:...|  2022-05-09|  2022-05-13|         4|       2|      2|       0|    0|460.0799999999|        Twin Comfort|         8|                2|                     2|                      0|                   0|      Porto|           Porto|       4|                12|             24|2023-05-09 23:59:00|        132|         0|    null| null|      null|    null|    Porto|16.8|21.7|12.6|null|\n|     179|   1490275|   Suiça|     Registado|    631|        Twin Comfort|No Reembolsable 13%|2022-05-07 13:42:...|  2022-05-09|  2022-05-13|         4|       2|      2|       0|    0|460.0799999999|        Twin Comfort|         8|                2|                     2|                      0|                   0|      Porto|           Porto|       4|                12|             24|2023-05-09 23:59:00|        132|         0|    null| null|      null|    null|    Porto|15.1|19.7|11.2|null|\n|     179|   1490275|   Suiça|     Registado|    631|        Twin Comfort|No Reembolsable 13%|2022-05-07 13:42:...|  2022-05-09|  2022-05-13|         4|       2|      2|       0|    0|460.0799999999|        Twin Comfort|         8|                2|                     2|                      0|                   0|      Porto|           Porto|       4|                12|             24|2023-05-09 23:59:00|        132|         0|    null| null|      null|    null|    Porto|16.5|21.7|12.8|null|\n|     179|   1490275|   Suiça|     Registado|    631|        Twin Comfort|No Reembolsable 13%|2022-05-07 13:42:...|  2022-05-09|  2022-05-13|         4|       2|      2|       0|    0|460.0799999999|        Twin Comfort|         8|                2|                     2|                      0|                   0|      Porto|           Porto|       4|                12|             24|2023-05-09 23:59:00|        132|         0|    null| null|      null|    null|    Porto|18.5|23.9|14.2|null|\n|     310|   1444650|Portugal|    Modificada|   1424|Quarto Twin Standard|              PROMO|2022-03-01 16:27:...|  2022-03-02|  2022-03-04|         2|       2|      2|       0|    0|          88.0|Quarto Twin Standard|        25|                2|                     2|                      1|                   0|       Gaia|           Porto|       3|                 0|              0|2023-05-09 23:59:00|        192|         0|    null| null|      null|    null|    Porto| 9.7|14.6| 5.6| 0.0|\n|     310|   1444650|Portugal|    Modificada|   1424|Quarto Twin Standard|              PROMO|2022-03-01 16:27:...|  2022-03-02|  2022-03-04|         2|       2|      2|       0|    0|          88.0|Quarto Twin Standard|        25|                2|                     2|                      1|                   0|       Gaia|           Porto|       3|                 0|              0|2023-05-09 23:59:00|        192|         0|    null| null|      null|    null|    Porto|11.6|14.6| 8.9|11.9|\n|     310|   1444650|Portugal|    Modificada|   1424|Quarto Twin Standard|              PROMO|2022-03-01 16:27:...|  2022-03-02|  2022-03-04|         2|       2|      2|       0|    0|          88.0|Quarto Twin Standard|        25|                2|                     2|                      1|                   0|       Gaia|           Porto|       3|                 0|              0|2023-05-09 23:59:00|        192|         0|    null| null|      null|    null|    Porto|10.7|16.2| 7.3| 0.5|\n|     493|   1684542|Portugal|     Registado|   2323|  Apartamento T1 R/C|                Bar|2023-02-24 11:50:...|  2023-02-27|  2023-03-03|         4|       2|      2|       0|    0|         420.0|  Apartamento T1 R/C|         1|                4|                     4|                      3|                   1|  Carnaxide|       Carnaxide|       0|                 0|              0|2023-05-09 12:00:00|          5|         0|    null| null|      null|    null|Carnaxide|10.7|15.3| 7.1| 0.0|\n|     493|   1684542|Portugal|     Registado|   2323|  Apartamento T1 R/C|                Bar|2023-02-24 11:50:...|  2023-02-27|  2023-03-03|         4|       2|      2|       0|    0|         420.0|  Apartamento T1 R/C|         1|                4|                     4|                      3|                   1|  Carnaxide|       Carnaxide|       0|                 0|              0|2023-05-09 12:00:00|          5|         0|    null| null|      null|    null|Carnaxide|10.0|14.3| 6.6| 0.0|\n|     493|   1684542|Portugal|     Registado|   2323|  Apartamento T1 R/C|                Bar|2023-02-24 11:50:...|  2023-02-27|  2023-03-03|         4|       2|      2|       0|    0|         420.0|  Apartamento T1 R/C|         1|                4|                     4|                      3|                   1|  Carnaxide|       Carnaxide|       0|                 0|              0|2023-05-09 12:00:00|          5|         0|    null| null|      null|    null|Carnaxide| 9.5|12.9| 6.5| 0.0|\n|     493|   1684542|Portugal|     Registado|   2323|  Apartamento T1 R/C|                Bar|2023-02-24 11:50:...|  2023-02-27|  2023-03-03|         4|       2|      2|       0|    0|         420.0|  Apartamento T1 R/C|         1|                4|                     4|                      3|                   1|  Carnaxide|       Carnaxide|       0|                 0|              0|2023-05-09 12:00:00|          5|         0|    null| null|      null|    null|Carnaxide|10.0|13.1| 6.9| 0.0|\n+--------+----------+--------+--------------+-------+--------------------+-------------------+--------------------+------------+------------+----------+--------+-------+--------+-----+--------------+--------------------+----------+-----------------+----------------------+-----------------------+--------------------+-----------+----------------+--------+------------------+---------------+-------------------+-----------+----------+--------+-----+----------+--------+---------+----+----+----+----+\nonly showing top 20 rows\n\n\u001b[1m\u001b[34mjoinMeteoTemp\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [hotel_ID: int, Reserve_ID: int ... 37 more fields]\n"
     }
    ]
   }
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {
      "ZTOOLS_DATA_FRAMES": [
       {
        "columns": [
         {
          "name": "hotel_ID",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "Reserve_ID",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "pais",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "estado_reserva",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "room_ID",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "Q_tipo_quarto",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "rate_plan",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "data_reserva",
          "tpe": {
           "presentableName": "timestamp"
          },
          "nullable": true
         },
         {
          "name": "data_chegada",
          "tpe": {
           "presentableName": "date"
          },
          "nullable": true
         },
         {
          "name": "data_partida",
          "tpe": {
           "presentableName": "date"
          },
          "nullable": true
         },
         {
          "name": "num_noites",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "ocupacao",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "adultos",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "criancas",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "bebes",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "preco_euros",
          "tpe": {
           "presentableName": "double"
          },
          "nullable": true
         },
         {
          "name": "T_tipo_quarto",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "quantidade",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_maxima",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_max_adultos",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_max_criancas",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_max_bebes",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "localizacao",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "area_localizacao",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "estrelas",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "idade_max_criancas",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "idade_max_bebes",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "hora_max_checkin",
          "tpe": {
           "presentableName": "timestamp"
          },
          "nullable": true
         },
         {
          "name": "qtd_quartos",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "is_holiday",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": false
         },
         {
          "name": "Location",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "Event",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "start_Date",
          "tpe": {
           "presentableName": "date"
          },
          "nullable": true
         },
         {
          "name": "end_date",
          "tpe": {
           "presentableName": "date"
          },
          "nullable": true
         },
         {
          "name": "city",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "tavg",
          "tpe": {
           "presentableName": "double"
          },
          "nullable": true
         },
         {
          "name": "tmax",
          "tpe": {
           "presentableName": "double"
          },
          "nullable": true
         },
         {
          "name": "tmin",
          "tpe": {
           "presentableName": "double"
          },
          "nullable": true
         },
         {
          "name": "prcp",
          "tpe": {
           "presentableName": "double"
          },
          "nullable": true
         }
        ]
       }
      ]
     }
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "val joinMeteoTemp = spark.sql(\"select * from JoinMeteoTemp\")\n//joinMeteoTemp.show(100000)\n\njoinMeteoTemp.createOrReplaceTempView(\"JoinedDataset\")\n\n//saveDataFrame(joinMeteoTemp, \"FinalDataSet\")",
   "id": "",
   "dateCreated": "2023-05-01 15:47:23.871",
   "config": {},
   "dateStarted": "2023-05-09 21:53:24.484",
   "dateUpdated": "2023-05-09 21:53:24.748",
   "dateFinished": "2023-05-09 21:53:24.748",
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "\u001b[1m\u001b[34mjoinMeteoTemp\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [hotel_ID: int, Reserve_ID: int ... 37 more fields]\n"
     }
    ]
   }
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {}
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "/* \n-----------------------------------------------------------------------------------------\n                                After Join Transformations\n-----------------------------------------------------------------------------------------\n*/",
   "id": "",
   "dateCreated": "2023-05-08 17:09:23.435",
   "config": {
    "editorHide": false
   },
   "dateStarted": "2023-05-09 21:53:24.762",
   "dateUpdated": "2023-05-09 21:53:24.961",
   "dateFinished": "2023-05-09 21:53:24.961",
   "results": {
    "code": "SUCCESS",
    "msg": []
   }
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {}
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "val duplicateReservations = spark.sql(\"SELECT Reserve_ID, count(*) as count FROM JoinTipologiaAndHotel GROUP BY Reserve_ID\").filter($\"count\" > 1)\nprintln(duplicateReservations.count())\nduplicateReservations.show()",
   "id": "",
   "dateCreated": "2023-05-08 17:50:08.525",
   "config": {},
   "dateStarted": "2023-05-09 21:53:24.963",
   "dateUpdated": "2023-05-09 21:53:35.921",
   "dateFinished": "2023-05-09 21:53:35.921",
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "1060\n+----------+-----+\n|Reserve_ID|count|\n+----------+-----+\n|   1496883|    2|\n|   1696164|    2|\n|   1482093|    2|\n|   1649924|    4|\n|   1630633|    2|\n|   1683856|    2|\n|   1467564|    4|\n|   1694268|    2|\n|   1493490|    2|\n|   1522179|    2|\n|   1507650|    2|\n|   1600427|    2|\n|   1688117|    2|\n|   1630293|    4|\n|   1530600|    3|\n|   1644433|    2|\n|   1702047|    2|\n|   1649048|    2|\n|   1721754|    2|\n|   1624186|    2|\n+----------+-----+\nonly showing top 20 rows\n\n\u001b[1m\u001b[34mduplicateReservations\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [Reserve_ID: int, count: bigint]\n"
     }
    ]
   }
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {}
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "spark.sql(\"SELECT * FROM JoinedDataset\").show()",
   "id": "",
   "dateCreated": "2023-05-08 17:09:27.489",
   "config": {},
   "dateStarted": "2023-05-09 21:53:35.944",
   "dateUpdated": "2023-05-09 21:53:42.919",
   "dateFinished": "2023-05-09 21:53:42.919",
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "datan|hotel_ID|Reserve_ID|    pais|estado_reserva|room_ID|       Q_tipo_quarto|          rate_plan|        data_reserva|data_chegada|data_partida|num_noites|ocupacao|adultos|criancas|bebes|   preco_euros|       T_tipo_quarto|quantidade|capacidade_maxima|capacidade_max_adultos|capacidade_max_criancas|capacidade_max_bebes|localizacao|area_localizacao|estrelas|idade_max_criancas|idade_max_bebes|   hora_max_checkin|qtd_quartos|is_holiday|Location|Event|start_Date|end_date|     city|tavg|tmax|tmin|prcp|\n+--------+----------+--------+--------------+-------+--------------------+-------------------+--------------------+------------+------------+----------+--------+-------+--------+-----+--------------+--------------------+----------+-----------------+----------------------+-----------------------+--------------------+-----------+----------------+--------+------------------+---------------+-------------------+-----------+----------+--------+-----+----------+--------+---------+----+----+----+----+\n|     225|   1617407|  França|     Registado|    846|Apartamento Vista...|                 OR|2022-10-30 11:11:...|  2022-11-09|  2022-11-14|         5|       3|      3|       0|    0|        1075.0|Apartamento Vista...|         3|                5|                     5|                      4|                   2|      Porto|           Porto|       0|                 2|             24|2023-05-09 17:00:00|          5|         0|    null| null|      null|    null|    Porto|14.5|16.2|13.1| 3.2|\n|     225|   1617407|  França|     Registado|    846|Apartamento Vista...|                 OR|2022-10-30 11:11:...|  2022-11-09|  2022-11-14|         5|       3|      3|       0|    0|        1075.0|Apartamento Vista...|         3|                5|                     5|                      4|                   2|      Porto|           Porto|       0|                 2|             24|2023-05-09 17:00:00|          5|         0|    null| null|      null|    null|    Porto|15.7|18.6|13.7|17.4|\n|     225|   1617407|  França|     Registado|    846|Apartamento Vista...|                 OR|2022-10-30 11:11:...|  2022-11-09|  2022-11-14|         5|       3|      3|       0|    0|        1075.0|Apartamento Vista...|         3|                5|                     5|                      4|                   2|      Porto|           Porto|       0|                 2|             24|2023-05-09 17:00:00|          5|         0|    null| null|      null|    null|    Porto|15.5|20.0|12.0| 0.0|\n|     225|   1617407|  França|     Registado|    846|Apartamento Vista...|                 OR|2022-10-30 11:11:...|  2022-11-09|  2022-11-14|         5|       3|      3|       0|    0|        1075.0|Apartamento Vista...|         3|                5|                     5|                      4|                   2|      Porto|           Porto|       0|                 2|             24|2023-05-09 17:00:00|          5|         0|    null| null|      null|    null|    Porto|15.5|20.5|12.0| 0.0|\n|     225|   1617407|  França|     Registado|    846|Apartamento Vista...|                 OR|2022-10-30 11:11:...|  2022-11-09|  2022-11-14|         5|       3|      3|       0|    0|        1075.0|Apartamento Vista...|         3|                5|                     5|                      4|                   2|      Porto|           Porto|       0|                 2|             24|2023-05-09 17:00:00|          5|         0|    null| null|      null|    null|    Porto|15.9|19.7|13.9| 0.0|\n|     225|   1617407|  França|     Registado|    846|Apartamento Vista...|                 OR|2022-10-30 11:11:...|  2022-11-09|  2022-11-14|         5|       3|      3|       0|    0|        1075.0|Apartamento Vista...|         3|                5|                     5|                      4|                   2|      Porto|           Porto|       0|                 2|             24|2023-05-09 17:00:00|          5|         0|    null| null|      null|    null|    Porto|14.7|16.7|13.3|20.6|\n|     311|   1491643|  França|     Registado|   1407|DB - Quarto Duplo...|       DB Room Only|2022-05-09 12:41:...|  2022-06-09|  2022-06-10|         1|       1|      1|       0|    0|          74.0|DB - Quarto Duplo...|         8|                2|                     2|                      2|                   0|       Maia|            Maia|       3|                12|             36|2023-05-09 23:59:00|         30|         1|    null| null|      null|    null|     Maia|20.5|24.1|16.6| 0.0|\n|     311|   1491643|  França|     Registado|   1407|DB - Quarto Duplo...|       DB Room Only|2022-05-09 12:41:...|  2022-06-09|  2022-06-10|         1|       1|      1|       0|    0|          74.0|DB - Quarto Duplo...|         8|                2|                     2|                      2|                   0|       Maia|            Maia|       3|                12|             36|2023-05-09 23:59:00|         30|         1|    null| null|      null|    null|     Maia|19.6|22.9|17.4| 0.0|\n|     179|   1490275|   Suiça|     Registado|    631|        Twin Comfort|No Reembolsable 13%|2022-05-07 13:42:...|  2022-05-09|  2022-05-13|         4|       2|      2|       0|    0|460.0799999999|        Twin Comfort|         8|                2|                     2|                      0|                   0|      Porto|           Porto|       4|                12|             24|2023-05-09 23:59:00|        132|         0|    null| null|      null|    null|    Porto|18.5|24.3|14.0|null|\n|     179|   1490275|   Suiça|     Registado|    631|        Twin Comfort|No Reembolsable 13%|2022-05-07 13:42:...|  2022-05-09|  2022-05-13|         4|       2|      2|       0|    0|460.0799999999|        Twin Comfort|         8|                2|                     2|                      0|                   0|      Porto|           Porto|       4|                12|             24|2023-05-09 23:59:00|        132|         0|    null| null|      null|    null|    Porto|16.8|21.7|12.6|null|\n|     179|   1490275|   Suiça|     Registado|    631|        Twin Comfort|No Reembolsable 13%|2022-05-07 13:42:...|  2022-05-09|  2022-05-13|         4|       2|      2|       0|    0|460.0799999999|        Twin Comfort|         8|                2|                     2|                      0|                   0|      Porto|           Porto|       4|                12|             24|2023-05-09 23:59:00|        132|         0|    null| null|      null|    null|    Porto|15.1|19.7|11.2|null|\n|     179|   1490275|   Suiça|     Registado|    631|        Twin Comfort|No Reembolsable 13%|2022-05-07 13:42:...|  2022-05-09|  2022-05-13|         4|       2|      2|       0|    0|460.0799999999|        Twin Comfort|         8|                2|                     2|                      0|                   0|      Porto|           Porto|       4|                12|             24|2023-05-09 23:59:00|        132|         0|    null| null|      null|    null|    Porto|16.5|21.7|12.8|null|\n|     179|   1490275|   Suiça|     Registado|    631|        Twin Comfort|No Reembolsable 13%|2022-05-07 13:42:...|  2022-05-09|  2022-05-13|         4|       2|      2|       0|    0|460.0799999999|        Twin Comfort|         8|                2|                     2|                      0|                   0|      Porto|           Porto|       4|                12|             24|2023-05-09 23:59:00|        132|         0|    null| null|      null|    null|    Porto|18.5|23.9|14.2|null|\n|     310|   1444650|Portugal|    Modificada|   1424|Quarto Twin Standard|              PROMO|2022-03-01 16:27:...|  2022-03-02|  2022-03-04|         2|       2|      2|       0|    0|          88.0|Quarto Twin Standard|        25|                2|                     2|                      1|                   0|       Gaia|           Porto|       3|                 0|              0|2023-05-09 23:59:00|        192|         0|    null| null|      null|    null|    Porto| 9.7|14.6| 5.6| 0.0|\n|     310|   1444650|Portugal|    Modificada|   1424|Quarto Twin Standard|              PROMO|2022-03-01 16:27:...|  2022-03-02|  2022-03-04|         2|       2|      2|       0|    0|          88.0|Quarto Twin Standard|        25|                2|                     2|                      1|                   0|       Gaia|           Porto|       3|                 0|              0|2023-05-09 23:59:00|        192|         0|    null| null|      null|    null|    Porto|11.6|14.6| 8.9|11.9|\n|     310|   1444650|Portugal|    Modificada|   1424|Quarto Twin Standard|              PROMO|2022-03-01 16:27:...|  2022-03-02|  2022-03-04|         2|       2|      2|       0|    0|          88.0|Quarto Twin Standard|        25|                2|                     2|                      1|                   0|       Gaia|           Porto|       3|                 0|              0|2023-05-09 23:59:00|        192|         0|    null| null|      null|    null|    Porto|10.7|16.2| 7.3| 0.5|\n|     493|   1684542|Portugal|     Registado|   2323|  Apartamento T1 R/C|                Bar|2023-02-24 11:50:...|  2023-02-27|  2023-03-03|         4|       2|      2|       0|    0|         420.0|  Apartamento T1 R/C|         1|                4|                     4|                      3|                   1|  Carnaxide|       Carnaxide|       0|                 0|              0|2023-05-09 12:00:00|          5|         0|    null| null|      null|    null|Carnaxide|10.7|15.3| 7.1| 0.0|\n|     493|   1684542|Portugal|     Registado|   2323|  Apartamento T1 R/C|                Bar|2023-02-24 11:50:...|  2023-02-27|  2023-03-03|         4|       2|      2|       0|    0|         420.0|  Apartamento T1 R/C|         1|                4|                     4|                      3|                   1|  Carnaxide|       Carnaxide|       0|                 0|              0|2023-05-09 12:00:00|          5|         0|    null| null|      null|    null|Carnaxide|10.0|14.3| 6.6| 0.0|\n|     493|   1684542|Portugal|     Registado|   2323|  Apartamento T1 R/C|                Bar|2023-02-24 11:50:...|  2023-02-27|  2023-03-03|         4|       2|      2|       0|    0|         420.0|  Apartamento T1 R/C|         1|                4|                     4|                      3|                   1|  Carnaxide|       Carnaxide|       0|                 0|              0|2023-05-09 12:00:00|          5|         0|    null| null|      null|    null|Carnaxide| 9.5|12.9| 6.5| 0.0|\n|     493|   1684542|Portugal|     Registado|   2323|  Apartamento T1 R/C|                Bar|2023-02-24 11:50:...|  2023-02-27|  2023-03-03|         4|       2|      2|       0|    0|         420.0|  Apartamento T1 R/C|         1|                4|                     4|                      3|                   1|  Carnaxide|       Carnaxide|       0|                 0|              0|2023-05-09 12:00:00|          5|         0|    null| null|      null|    null|Carnaxide|10.0|13.1| 6.9| 0.0|\n+--------+----------+--------+--------------+-------+--------------------+-------------------+--------------------+------------+------------+----------+--------+-------+--------+-----+--------------+--------------------+----------+-----------------+----------------------+-----------------------+--------------------+-----------+----------------+--------+------------------+---------------+-------------------+-----------+----------+--------+-----+----------+--------+---------+----+----+----+----+\nonly showing top 20 rows\n\n"
     }
    ]
   }
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {
      "ZTOOLS_DATA_FRAMES": [
       {
        "columns": [
         {
          "name": "hotel_ID",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "Reserve_ID",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "pais",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "estado_reserva",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "room_ID",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "tipo_quarto",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "rate_plan",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "data_reserva",
          "tpe": {
           "presentableName": "timestamp"
          },
          "nullable": true
         },
         {
          "name": "data_chegada",
          "tpe": {
           "presentableName": "date"
          },
          "nullable": true
         },
         {
          "name": "data_partida",
          "tpe": {
           "presentableName": "date"
          },
          "nullable": true
         },
         {
          "name": "num_noites",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "ocupacao",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "adultos",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "criancas",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "bebes",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "preco_euros",
          "tpe": {
           "presentableName": "double"
          },
          "nullable": true
         },
         {
          "name": "quantidade",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_maxima",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_max_adultos",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_max_criancas",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_max_bebes",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "localizacao",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "area_localizacao",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "estrelas",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "idade_max_criancas",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "idade_max_bebes",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "hora_max_checkin",
          "tpe": {
           "presentableName": "timestamp"
          },
          "nullable": true
         },
         {
          "name": "qtd_quartos",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "is_holiday",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "event_Location",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "event",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "city",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "temperature_avg",
          "tpe": {
           "presentableName": "double"
          },
          "nullable": true
         },
         {
          "name": "temperature_tmax",
          "tpe": {
           "presentableName": "double"
          },
          "nullable": true
         },
         {
          "name": "temperature_min",
          "tpe": {
           "presentableName": "double"
          },
          "nullable": true
         },
         {
          "name": "precipitation_avg",
          "tpe": {
           "presentableName": "double"
          },
          "nullable": true
         }
        ]
       }
      ]
     }
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "// Join pelo reserve_ID\n// Selecionar tudo das reservas\n\nvar finalDataSet = spark.sql(\n    \"\"\"\n    SELECT \n        first(hotel_ID) AS hotel_ID, \n        Reserve_ID,\n        first(pais) AS pais,\n        first(estado_reserva) AS estado_reserva,\n        first(room_ID) AS room_ID,\n        first(T_tipo_quarto) AS tipo_quarto,\n        first(rate_plan) AS rate_plan,\n        first(data_reserva) AS data_reserva,\n        first(data_chegada) AS data_chegada,\n        first(data_partida) AS data_partida,\n        first(num_noites) AS num_noites,\n        first(ocupacao) AS ocupacao,\n        first(adultos) AS adultos,\n        first(criancas) AS criancas,\n        first(bebes) AS bebes,\n        first(preco_euros) AS preco_euros,\n        first(quantidade) AS quantidade,\n        first(capacidade_maxima) AS capacidade_maxima,\n        first(capacidade_max_adultos) AS capacidade_max_adultos,\n        first(capacidade_max_criancas) AS capacidade_max_criancas,\n        first(capacidade_max_bebes) AS capacidade_max_bebes,\n        first(localizacao) AS localizacao,\n        first(area_localizacao) AS area_localizacao,\n        first(estrelas) AS estrelas,\n        first(idade_max_criancas) AS idade_max_criancas,\n        first(idade_max_bebes) AS idade_max_bebes,\n        first(hora_max_checkin) AS hora_max_checkin,\n        first(qtd_quartos) AS qtd_quartos,\n        first(is_holiday) AS is_holiday,\n        first(Location) AS event_Location,\n        first(Event) AS event,\n        first(city) AS city,\n        avg(tavg) AS temperature_avg,\n        max(tmax) AS temperature_tmax,\n        min(tmin) AS temperature_min,\n        avg(prcp) AS precipitation_avg\n       \n    FROM JoinedDataset\n    GROUP BY Reserve_ID\n    \"\"\")\n\nprintln(finalDataSet.count())\nfinalDataSet.show()",
   "id": "",
   "dateCreated": "2023-05-08 17:09:37.474",
   "config": {},
   "dateStarted": "2023-05-09 21:53:42.951",
   "dateUpdated": "2023-05-09 21:54:07.497",
   "dateFinished": "2023-05-09 21:54:07.497",
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "21195\nn|hotel_ID|Reserve_ID|          pais|estado_reserva|room_ID|         tipo_quarto|          rate_plan|        data_reserva|data_chegada|data_partida|num_noites|ocupacao|adultos|criancas|bebes|preco_euros|quantidade|capacidade_maxima|capacidade_max_adultos|capacidade_max_criancas|capacidade_max_bebes|         localizacao|area_localizacao|estrelas|idade_max_criancas|idade_max_bebes|   hora_max_checkin|qtd_quartos|is_holiday|event_Location|event|            city|   temperature_avg|temperature_tmax|temperature_min| precipitation_avg|\nn|     395|   1423075|       Espanha|     Cancelado|   1828|             Estúdio|           Standard|2022-01-16 17:45:...|  2022-02-25|  2022-02-27|         2|       2|      4|       0|    0|      280.0|         5|                2|                     2|                      0|                   1|               Porto|           Porto|       0|                 3|             36|2023-05-09 20:00:00|         16|         0|          null| null|           Porto|12.566666666666668|            18.9|            6.5|              null|\n|     535|   1429890|      Portugal|     Registado|   2523|        Quarto Duplo|            WebSite|2022-02-02 15:28:...|  2022-02-06|  2022-02-07|         1|       2|      2|       0|    0|       58.5|         5|                3|                     2|                      1|                   1| Travanca do Mondego|         Coimbra|       4|                12|             24|2023-05-09 23:55:00|         11|         0|          null| null|         Coimbra|              11.2|            18.0|            6.9|              null|\n|     539|   1434277|      Portugal|     Registado|   2546|            Villa T2|                Bar|2022-02-11 12:50:...|  2022-02-12|  2022-02-13|         1|       1|      1|       0|    0|      160.0|         2|                4|                     4|                      0|                   0|              Amares|          Amares|       0|                 0|              0|2023-05-09 18:00:00|         58|         0|          null| null|          Amares|              9.95|            13.1|            6.8|              null|\n|     179|   1434507|Estados Unidos|     Cancelado|    630|      Duplo  Comfort|        Tarifa Base|2022-02-11 21:12:...|  2022-07-09|  2022-07-13|         4|       2|      2|       0|    0|     593.64|        27|                2|                     2|                      0|                   0|               Porto|           Porto|       4|                12|             24|2023-05-09 23:59:00|        132|         0|          null| null|           Porto|             25.68|            38.1|           14.1|               0.0|\n|     280|   1435255|      Portugal|     Registado|   2564|      SUITE FAMILIAR|                BAR|2022-02-13 15:47:...|  2022-04-23|  2022-04-24|         1|       2|      2|       2|    0|      200.0|         2|                4|                     3|                      2|                   2|    Viana do Castelo|Viana do Castelo|       4|                12|             24|2023-05-09 23:59:00|         37|         0|          null| null|Viana do Castelo|             12.05|            16.6|            7.4|              null|\n|     309|   1437296|      Portugal|      Pendente|   1372|Quarto Duplo Stan...|              PROMO|2022-02-16 14:20:...|  2022-02-16|  2022-02-17|         1|       1|      1|       0|    0|       43.0|        10|                2|                     2|                      1|                   0|             Valongo|           Porto|       3|                12|              4|2023-05-09 23:59:00|         41|         0|          null| null|           Porto|12.350000000000001|            16.4|            9.1|1.5499999999999998|\n|     310|   1441431|      Portugal|      Pendente|   1424|Quarto Twin Standard|              PROMO|2022-02-23 14:03:...|  2022-02-23|  2022-02-24|         1|       2|      2|       0|    0|       39.6|        25|                2|                     2|                      1|                   0|                Gaia|           Porto|       3|                 0|              0|2023-05-09 23:59:00|        192|         0|          null| null|           Porto|              12.2|            22.7|            6.4|               0.0|\n|     395|   1443176|      Portugal|     Cancelado|   1829|     Estúdio Jardim |           Standard|2022-02-26 20:48:...|  2022-03-01|  2022-03-02|         1|       1|      1|       0|    0|       55.0|         6|                2|                     2|                      0|                   1|               Porto|           Porto|       0|                 3|             36|2023-05-09 20:00:00|         16|         1|          null| null|           Porto|11.399999999999999|            17.0|            7.3|              4.45|\n|     311|   1450711|        França|  NãoRegistado|   1407|DB - Quarto Duplo...|       DB Room Only|2022-03-12 19:35:...|  2022-03-13|  2022-03-14|         1|       2|      2|       0|    0|       64.0|         8|                2|                     2|                      2|                   0|                Maia|            Maia|       3|                12|             36|2023-05-09 23:59:00|         30|         0|          null| null|            Maia|              10.5|            14.2|            6.3|              null|\n|     304|   1459640|      Alemanha|     Registado|   1406|  301 - Quarto Duplo|          Rack Rate|2022-03-26 20:09:...|  2022-06-27|  2022-07-01|         4|       2|      2|       0|    0|     250.24|         1|                2|                     2|                      0|                   0|             Coimbra|         Coimbra|       0|                11|             23|2023-05-09 22:30:00|         28|         0|          null| null|         Coimbra|17.099999999999998|            26.4|           11.6|               0.0|\n|     514|   1460507|Estados Unidos|     Registado|   2492|         Garden Room|  Non-Refundable >5|2022-03-28 00:08:...|  2022-06-27|  2022-07-04|         7|       2|      2|       0|    0|      924.0|         4|                3|                     2|                      0|                   0|Charneca de Caparica|       Carnaxide|       3|                12|             24|2023-05-09 18:00:00|         13|         0|          null| null|       Carnaxide|20.175000000000004|            30.2|           15.3|               0.0|\n|     322|   1462518|       Espanha|     Registado|   1413|               Duplo|Não Reembolsável AP|2022-03-30 16:23:...|  2022-04-02|  2022-04-03|         1|       2|      2|       0|    0|       62.0|        19|                2|                     2|                      1|                   0|              Aveiro|          Aveiro|       3|                10|             24|2023-05-09 23:59:00|         52|         0|          null| null|          Aveiro|              10.7|            15.4|            5.2|              null|\n|     310|   1466376|      Portugal|  NãoRegistado|   1395|Quarto Duplo Stan...|                NRF|2022-04-04 14:40:...|  2022-04-05|  2022-04-06|         1|       2|      2|       0|    0|       43.2|        10|                2|                     2|                      1|                   0|                Gaia|           Porto|       3|                 0|              0|2023-05-09 23:59:00|        192|         0|          null| null|           Porto|             10.85|            17.0|            6.3|              null|\n|     444|   1468011|      Portugal|     Registado|   2076|               Suite|             Normal|2022-04-06 12:31:...|  2022-04-15|  2022-04-17|         2|       2|      2|       2|    0|      320.0|         4|                4|                     2|                      3|                   1|              Nazaré|         Batalha|       4|                12|             24|2023-05-09 23:59:00|         77|         1|          null| null|         Batalha|              14.6|            20.0|           11.5|              null|\n|     560|   1477495|        França|     Registado|   2866|         Estúdio 2+1|                 7N|2022-04-19 21:00:...|  2022-09-18|  2022-09-25|         7|       2|      2|       0|    0|     573.75|         1|                3|                     2|                      1|                   1|               Porto|           Porto|       0|                 3|             36|2023-05-09 20:00:00|          8|         0|          null| null|           Porto|           20.4375|            29.2|           11.8|               0.0|\n|     444|   1477635|Estados Unidos|     Registado|   2386| Twin vista  mar ...|             Normal|2022-04-20 03:36:...|  2022-05-07|  2022-05-08|         1|       2|      6|       0|    0|      270.0|         5|                2|                     2|                      1|                   1|              Nazaré|         Batalha|       4|                12|             24|2023-05-09 23:59:00|         77|         0|          null| null|         Batalha|             16.25|            23.0|           10.6|              null|\n|     311|   1479818|      Alemanha|     Cancelado|   1407|DB - Quarto Duplo...|           Duplo BB|2022-04-23 08:57:...|  2022-07-02|  2022-07-03|         1|       2|      2|       0|    0|       99.0|         8|                2|                     2|                      2|                   0|                Maia|            Maia|       3|                12|             36|2023-05-09 23:59:00|         30|         0|          null| null|            Maia|18.450000000000003|            24.7|           14.0|               1.5|\n|     444|   1482093|      Portugal|     Registado|   2073|              Duplo |             Normal|2022-04-26 11:15:...|  2022-05-14|  2022-05-15|         1|       2|      4|       0|    0|      160.0|        14|                2|                     2|                      1|                   1|              Nazaré|         Batalha|       4|                12|             24|2023-05-09 23:59:00|         77|         0|          null| null|         Batalha|19.799999999999997|            28.0|           15.0|              null|\n|     504|   1488965|       Espanha|     Registado|   2374|       Cela da Torre|                Bar|2022-05-05 16:09:...|  2022-05-06|  2022-05-07|         1|       2|      2|       0|    0|     106.59|         1|                2|                     2|                      0|                   1|              Monção|          Monção|       4|                12|             36|2023-05-09 23:59:00|         27|         0|          null| null|          Monção|              18.2|            25.9|           10.0|               0.0|\n|      44|   1489269|Estados Unidos|     Cancelado|     85| Quarto Vista Pinhão|                BAR|2022-05-05 23:32:...|  2022-07-13|  2022-07-15|         2|       2|      2|       0|    0|      268.0|         6|                2|                     2|                      0|                   0|      Pinhão - Alijó|           Alijó|       3|                12|             24|2023-05-09 23:00:00|         10|         0|          null| null|           Alijó|31.366666666666664|            40.8|           23.8|               0.0|\n+--------+----------+--------------+--------------+-------+--------------------+-------------------+--------------------+------------+------------+----------+--------+-------+--------+-----+-----------+----------+-----------------+----------------------+-----------------------+--------------------+--------------------+----------------+--------+------------------+---------------+-------------------+-----------+----------+--------------+-----+----------------+------------------+----------------+---------------+------------------+\nonly showing top 20 rows\n\n\u001b[1m\u001b[34mfinalDataSet\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [hotel_ID: int, Reserve_ID: int ... 34 more fields]\n"
     }
    ]
   }
  },
  {
   "settings": {
    "params": {},
    "forms": {}
   },
   "apps": [],
   "status": "READY",
   "text": "",
   "id": "",
   "dateCreated": "2023-05-09 21:32:31.048",
   "config": {}
  }
 ],
 "name": "Zeppelin Notebook",
 "id": "",
 "noteParams": {},
 "noteForms": {},
 "angularObjects": {},
 "config": {
  "isZeppelinNotebookCronEnable": false,
  "looknfeel": "default",
  "personalizedMode": "false"
 },
 "info": {}
}