{
 "paragraphs": [
  {
   "settings": {
    "params": {
     "bdtMeta": {}
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "// FILE #3",
   "id": "",
   "dateCreated": "2023-05-08 15:40:50.806",
   "config": {},
   "dateStarted": "2023-05-08 17:39:58.155",
   "dateUpdated": "2023-05-08 17:39:58.390",
   "dateFinished": "2023-05-08 17:39:58.390"
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {}
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "import org.apache.spark.sql.DataFrame\n\nval joinFolder = \"/data/joins\"\nval saveJoins = false\n\ndef saveDataFrame(df: DataFrame, name: String): Unit = {\n    df.coalesce(1) // Print into a single file\n            .write\n            .mode(\"overwrite\")\n            .option(\"delimiter\", \";\")\n            .option(\"header\", true) // Maintain Headers\n            .csv(s\"$joinFolder/$name\") // Write to csv\n}\nval initialCount = spark.sql(\n    \"\"\"\n      SELECT DISTINCT * FROM QuartosReservados\n      \"\"\")\nprintln(initialCount.count())",
   "id": "",
   "dateCreated": "2023-04-30 19:59:44.804",
   "config": {
    "editorHide": false
   },
   "dateStarted": "2023-05-08 17:39:58.392",
   "dateUpdated": "2023-05-08 17:40:01.434",
   "dateFinished": "2023-05-08 17:40:01.434"
  },
  {
   "user": "anonymous",
   "config": {
    "colWidth": 12,
    "fontSize": 9,
    "enabled": true,
    "results": {},
    "editorSetting": {
     "language": "scala",
     "editOnDblClick": false,
     "completionKey": "TAB",
     "completionSupport": true
    },
    "editorMode": "ace/mode/scala"
   },
   "settings": {
    "params": {
     "bdtMeta": {}
    },
    "forms": {}
   },
   "apps": [],
   "jobName": "paragraph_1563110258183_1613653816",
   "id": "20190714-161738_1950435706",
   "dateCreated": "2019-07-14T16:17:38+0300",
   "status": "FINISHED",
   "progressUpdateIntervalMs": 500,
   "focus": true,
   "$$hashKey": "object:394",
   "text": "val joinTipologia = spark.sql(\n    \"\"\"\n       SELECT DISTINCT \n           Q.hotel_ID, \n           Q.Reserve_ID,\n           Q.pais,\n           Q.estado_reserva,\n           Q.room_ID,\n           Q.tipo_quarto AS Q_tipo_quarto,\n           Q.rate_plan,\n           Q.data_reserva,\n           Q.data_chegada,\n           Q.data_partida,\n           Q.num_noites,\n           Q.ocupacao,\n           Q.adultos,\n           Q.criancas,\n           Q.bebes,\n           Q.preco_euros,\n           T.tipo_quarto as T_tipo_quarto, \n           T.quantidade,\n           T.capacidade_maxima,\n           T.capacidade_max_adultos,\n           T.capacidade_max_criancas,\n           T.capacidade_max_bebes\n       FROM QuartosReservados as Q\n       INNER JOIN Tipologias as T\n           ON Q.hotel_ID = T.hotel_ID AND T.room_ID = Q.room_ID\n      \"\"\")\n\njoinTipologia.createOrReplaceTempView(\"JoinTipologia\")\njoinTipologia.cache()\n\nif (saveJoins)\n    saveDataFrame(joinTipologia, \"joinTipologia\")\n\nprintln(joinTipologia.count())\njoinTipologia.printSchema()",
   "dateStarted": "2023-05-08 17:40:01.474",
   "dateUpdated": "2023-05-08 17:40:02.161",
   "dateFinished": "2023-05-08 17:40:02.161"
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {
      "inlay": {}
     }
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "var joinTipologiaAndHotel = spark.sql(\n    \"\"\"\n       SELECT \n           J.*,\n           H.localizacao,\n           H.area_localizacao,\n           H.estrelas,\n           H.idade_max_criancas,\n           H.idade_max_bebes,\n           H.hora_max_checkin,\n           H.qtd_quartos\n       FROM joinTipologia as J\n       INNER JOIN Hotel as H\n           ON J.hotel_ID = H.hotel_ID\n    \"\"\")\n\njoinTipologiaAndHotel.createOrReplaceTempView(\"JoinTipologiaAndHotel\")\n\nprintln(joinTipologiaAndHotel.count())\n//joinTipologiaAndHotel.printSchema()\nif (saveJoins)\n    saveDataFrame(joinTipologiaAndHotel, \"joinTipologiaAndHotel\")",
   "id": "",
   "dateCreated": "2023-04-30 20:01:48.781",
   "config": {
    "tableHide": false
   },
   "dateStarted": "2023-05-08 17:49:10.543",
   "dateUpdated": "2023-05-08 17:49:15.972",
   "dateFinished": "2023-05-08 17:49:15.972"
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {
      "inlay": {}
     }
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "var joinFeriados = spark.sql(\n    \"\"\"\n        SELECT J.*, F.is_holiday\n        FROM JoinTipologiaAndHotel AS J\n        LEFT JOIN (SELECT * FROM Feriados WHERE is_holiday=1) AS F\n            ON F.date <= J.data_partida AND f.date >= data_chegada\n    \"\"\"\n)\njoinFeriados = joinFeriados.na.fill(0, Seq(\"is_holiday\"))\n\njoinFeriados.createOrReplaceTempView(\"JoinFeriados\")\n\n// Substituição de valores nullos por 0\n//val updatedFeriados = joinFeriados.na.fill(0, Seq(\"is_holiday\"))\n\nprintln(joinFeriados.count())\n\njoinFeriados.show()",
   "id": "",
   "dateCreated": "2023-04-30 20:12:14.191",
   "config": {
    "tableHide": false
   },
   "dateStarted": "2023-05-08 17:40:03.165",
   "dateUpdated": "2023-05-08 17:40:07.523",
   "dateFinished": "2023-05-08 17:40:07.523"
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {
      "inlay": {}
     }
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "val joinEventos = spark.sql(\n    \"\"\"\n        SELECT DISTINCT QR.*, E.*\n        FROM JoinFeriados QR\n        LEFT JOIN Eventos E\n            ON QR.data_partida >= E.start_Date AND QR.data_chegada <= E.end_date\n            AND QR.area_localizacao = E.Location\n    \"\"\")\n\njoinEventos.createOrReplaceTempView(\"JoinEventos\")\n\nprintln(joinEventos.count())\n//joinEventos.show()",
   "id": "",
   "dateCreated": "2023-04-30 20:16:51.675",
   "config": {},
   "dateStarted": "2023-05-08 17:40:07.540",
   "dateUpdated": "2023-05-08 17:40:15.840",
   "dateFinished": "2023-05-08 17:40:15.840"
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {
      "inlay": {
       "collapsed": true
      }
     }
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "val joinMeteoTemp = spark.sql(\n    \"\"\"\n        SELECT QR.*, M.city, M.tavg, M.tmax, M.tmin, M.prcp\n        FROM JoinEventos AS QR\n        JOIN Meteorologia AS M \n            ON QR.area_localizacao = M.city \n            AND M.date <= QR.data_partida AND M.date >= QR.data_chegada\n    \"\"\")\n\njoinMeteoTemp.createOrReplaceTempView(\"JoinMeteoTemp\")\n\nprintln(joinMeteoTemp.count())\njoinMeteoTemp.show()",
   "id": "",
   "dateCreated": "2023-05-01 15:31:17.385",
   "config": {
    "tableHide": true
   },
   "dateStarted": "2023-05-08 17:40:15.846",
   "dateUpdated": "2023-05-08 17:40:27.158",
   "dateFinished": "2023-05-08 17:40:27.158"
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {}
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "val joinMeteoTemp = spark.sql(\"select * from JoinMeteoTemp\")\n//joinMeteoTemp.show(100000)\n\njoinMeteoTemp.createOrReplaceTempView(\"JoinedDataset\")\n\n//saveDataFrame(joinMeteoTemp, \"FinalDataSet\")",
   "id": "",
   "dateCreated": "2023-05-01 15:47:23.871",
   "config": {},
   "dateStarted": "2023-05-08 17:40:27.171",
   "dateUpdated": "2023-05-08 17:40:27.501",
   "dateFinished": "2023-05-08 17:40:27.501"
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {}
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "/* \n-----------------------------------------------------------------------------------------\n                                After Join Transformations\n-----------------------------------------------------------------------------------------\n*/",
   "id": "",
   "dateCreated": "2023-05-08 17:09:23.435",
   "config": {
    "editorHide": false
   },
   "dateStarted": "2023-05-08 17:40:27.509",
   "dateUpdated": "2023-05-08 17:40:27.795",
   "dateFinished": "2023-05-08 17:40:27.795"
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {}
    },
    "forms": {}
   },
   "apps": [],
   "status": "ABORT",
   "text": "val duplicateReservations = spark.sql(\"SELECT Reserve_ID, count(*) as count FROM JoinTipologiaAndHotel GROUP BY Reserve_ID\").filter($\"count\" > 1)\nprintln(duplicateReservations.count())\nduplicateReservations.show()",
   "id": "",
   "dateCreated": "2023-05-08 17:50:08.525",
   "config": {},
   "dateStarted": "2023-05-08 17:51:21.818",
   "dateUpdated": "2023-05-08 17:51:21.818",
   "dateFinished": "2023-05-08 17:50:45.638"
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {}
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "spark.sql(\"SELECT * FROM JoinedDataset\").show()",
   "id": "",
   "dateCreated": "2023-05-08 17:09:27.489",
   "config": {},
   "dateStarted": "2023-05-08 17:40:27.797",
   "dateUpdated": "2023-05-08 17:40:34.476",
   "dateFinished": "2023-05-08 17:40:34.476"
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {}
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "// Join pelo reserve_ID\n// Selecionar tudo das reservas\n\nvar finalDataSet = spark.sql(\n    \"\"\"\n    SELECT \n        first(hotel_ID) AS hotel_ID, \n        Reserve_ID,\n        first(pais) AS pais,\n        first(estado_reserva) AS estado_reserva,\n        first(room_ID) AS room_ID,\n        first(T_tipo_quarto) AS tipo_quarto,\n        first(rate_plan) AS rate_plan,\n        first(data_reserva) AS data_reserva,\n        first(data_chegada) AS data_chegada,\n        first(data_partida) AS data_partida,\n        first(num_noites) AS num_noites,\n        first(ocupacao) AS ocupacao,\n        first(adultos) AS adultos,\n        first(criancas) AS criancas,\n        first(bebes) AS bebes,\n        first(preco_euros) AS preco_euros,\n        first(quantidade) AS quantidade,\n        first(capacidade_maxima) AS capacidade_maxima,\n        first(capacidade_max_adultos) AS capacidade_max_adultos,\n        first(capacidade_max_criancas) AS capacidade_max_criancas,\n        first(capacidade_max_bebes) AS capacidade_max_bebes,\n        first(localizacao) AS localizacao,\n        first(area_localizacao) AS area_localizacao,\n        first(estrelas) AS estrelas,\n        first(idade_max_criancas) AS idade_max_criancas,\n        first(idade_max_bebes) AS idade_max_bebes,\n        first(hora_max_checkin) AS hora_max_checkin,\n        first(qtd_quartos) AS qtd_quartos,\n        first(is_holiday) AS is_holiday,\n        first(Location) AS event_Location,\n        first(Event) AS event,\n        first(city) AS city,\n        avg(tavg) AS temperature_avg,\n        max(tmax) AS temperature_tmax,\n        min(tmin) AS temperature_min,\n        avg(prcp) AS precipitation_avg\n       \n    FROM JoinedDataset\n    GROUP BY Reserve_ID\n    \"\"\")\n\nprintln(finalDataSet.count())\nfinalDataSet.show()",
   "id": "",
   "dateCreated": "2023-05-08 17:09:37.474",
   "config": {},
   "dateStarted": "2023-05-08 17:44:00.446",
   "dateUpdated": "2023-05-08 17:44:14.387",
   "dateFinished": "2023-05-08 17:44:14.386"
  }
 ],
 "name": "Zeppelin Notebook",
 "id": "",
 "noteParams": {},
 "noteForms": {},
 "angularObjects": {},
 "config": {
  "isZeppelinNotebookCronEnable": false,
  "looknfeel": "default",
  "personalizedMode": "false"
 },
 "info": {}
}