{
 "paragraphs": [
  {
   "settings": {
    "params": {},
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "%spark.spark\n//ZToolsId = 3648ad31-5212-4338-92bd-23b4ddf882a9\n// It is generated code for integration with Big Data Tools plugin\n// Please DO NOT edit it.\ntry {\n    import org.apache.commons.lang.exception.ExceptionUtils\n    import org.apache.spark.SparkContext\n    import org.apache.spark.rdd.RDD\n    import org.apache.spark.sql.{Dataset, SparkSession}\n    import org.json4s.jackson.Serialization\n    import org.json4s.{Formats, NoTypeHints}\n\n    import java.io.{PrintWriter, StringWriter}\n    import java.util\n    import java.util.function.{Function => JFunction}\n    import java.util.regex.Pattern\n    import scala.collection.mutable.ListBuffer\n    import scala.collection.{immutable, mutable}\n    import scala.language.implicitConversions\n    import scala.reflect.api.JavaUniverse\n    import scala.tools.nsc.interpreter.IMain\n    import scala.util.Try\n\n    trait Loopback {\n        def pass(obj: Any, id: String): Any\n    }\n\n    object ResNames {\n        val REF = \"ref\"\n        val VALUE = \"value\"\n        val IS_PRIMITIVE = \"isPrimitive\"\n        val TYPE = \"type\"\n        val TIME = \"time\"\n        val LENGTH = \"length\"\n        val LAZY = \"lazy\"\n    }\n\n    object TrieMap {\n        class Node[T](var value: Option[T]) {\n            var children: mutable.Map[String, TrieMap.Node[T]] = _\n\n            def put(key: String, node: TrieMap.Node[T]): Option[Node[T]] = {\n                if (children == null)\n                    children = mutable.Map[String, TrieMap.Node[T]]()\n                children.put(key, node)\n            }\n\n            def del(key: String): Option[Node[T]] = children.remove(key)\n\n            def forEach(func: Function[T, _]): Unit = {\n                func.apply(value.get)\n                if (children != null) children.foreach(t => t._2.forEach(func))\n            }\n        }\n\n        def split(key: String): Array[String] = {\n            var n = 0\n            var j = 0\n            for (i <- 0 until key.length) {\n                if (key.charAt(i) == '.') n += 1\n            }\n            val k = new Array[String](n + 1)\n            val sb = new mutable.StringBuilder(k.length)\n            for (i <- 0 until key.length) {\n                val ch = key.charAt(i)\n                if (ch == '.') {\n                    k({\n                        j += 1;\n                        j - 1\n                    }) = sb.toString\n                    sb.setLength(0)\n                }\n                else sb.append(ch)\n            }\n            k(j) = sb.toString\n            k\n        }\n    }\n\n    class TrieMap[T] {\n        val root = new TrieMap.Node[T](null)\n\n        def subtree(key: Array[String], length: Int): TrieMap.Node[T] = {\n            var current = root\n            var i = 0\n            while ( {\n                i < length && current != null\n            }) {\n                if (current.children == null) return null\n                current = current.children.get(key(i)).orNull\n                i += 1\n            }\n            current\n        }\n\n        def put(key: Array[String], value: T): Option[TrieMap.Node[T]] = {\n            val node = subtree(key, key.length - 1)\n            node.put(key(key.length - 1), new TrieMap.Node[T](Option.apply(value)))\n        }\n\n        def put(key: String, value: T): Option[TrieMap.Node[T]] = {\n            val k = TrieMap.split(key)\n            put(k, value)\n        }\n\n        def contains(key: String): Boolean = {\n            val k = TrieMap.split(key)\n            val node = subtree(k, k.length)\n            node != null\n        }\n\n        def get(key: String): Option[T] = {\n            val k = TrieMap.split(key)\n            val node = subtree(k, k.length)\n            if (node == null) return Option.empty\n            node.value\n        }\n\n        def subtree(key: String): TrieMap.Node[T] = {\n            val k = TrieMap.split(key)\n            subtree(k, k.length)\n        }\n    }\n\n    trait TypeHandler {\n        def accept(obj: Any): Boolean\n\n        def handle(scalaInfo: ScalaVariableInfo, loopback: Loopback, depth: Int): mutable.Map[String, Any]\n\n        def getErrors: List[String] = List[String]()\n    }\n\n    abstract class AbstractCollectionHandler(limit: Int, timeout: Int) extends AbstractTypeHandler {\n        trait Iterator {\n            def hasNext: Boolean\n\n            def next: Any\n        }\n\n        def iterator(obj: Any): Iterator\n\n        def length(obj: Any): Int\n\n        override def handle(scalaInfo: ScalaVariableInfo, loopback: Loopback, depth: Int): mutable.Map[String, Any] = {\n            if (depth <= 0) {\n                withJsonObject { result =>\n                    var s = scalaInfo.value.toString\n                    if (s.length > 1000)\n                        s = s.take(1000) + \"...\"\n                    result += (ResNames.VALUE -> s)\n                    return result\n                }\n            } else {\n                mutable.Map[String, Any](\n                    ResNames.LENGTH -> length(scalaInfo.value),\n                    ResNames.VALUE -> withJsonArray { json =>\n                        val startTime = System.currentTimeMillis()\n                        val it = iterator(scalaInfo.value)\n                        var index = 0\n                        while (it.hasNext && index < limit && !checkTimeoutError(scalaInfo.path, startTime, timeout)) {\n                            val id = scalaInfo.path\n                            json += loopback.pass(it.next, s\"$id[$index]\")\n                            index += 1\n                        }\n                    })\n            }\n        }\n    }\n\n    abstract class AbstractTypeHandler extends TypeHandler {\n        val timeoutErrors: mutable.MutableList[String] = mutable.MutableList()\n\n        override def getErrors: List[String] = timeoutErrors.toList\n\n        protected def withJsonArray(body: mutable.MutableList[Any] => Unit): mutable.MutableList[Any] = {\n            val arr = mutable.MutableList[Any]()\n            body(arr)\n            arr\n        }\n\n        protected def withJsonObject(body: mutable.Map[String, Any] => Unit): mutable.Map[String, Any] = {\n            val obj = mutable.Map[String, Any]()\n            body(obj)\n            obj\n        }\n\n        protected def wrap(obj: Any, tpe: String): mutable.Map[String, Any] = mutable.Map[String, Any](\n            ResNames.VALUE -> Option(obj).orNull,\n            ResNames.TYPE -> tpe\n        )\n\n        protected def checkTimeoutError(name: String, startTime: Long, timeout: Int): Boolean = {\n            val isTimeout = System.currentTimeMillis() - startTime > timeout\n            if (isTimeout)\n                timeoutErrors += f\"Variable $name collect timeout exceed ${timeout}ms.\"\n            isTimeout\n        }\n\n    }\n\n    class ArrayHandler(limit: Int, timeout: Int) extends AbstractCollectionHandler(limit, timeout) {\n        override def accept(obj: Any): Boolean = obj.isInstanceOf[Array[_]]\n\n        override def length(obj: Any): Int = obj.asInstanceOf[Array[_]].length\n\n        override def iterator(obj: Any): Iterator = new Iterator {\n            private val it = obj.asInstanceOf[Array[_]].iterator\n\n            override def hasNext: Boolean = it.hasNext\n\n            override def next: Any = it.next\n        }\n    }\n\n    class JavaCollectionHandler(limit: Int, timeout: Int) extends AbstractCollectionHandler(limit, timeout) {\n        override def accept(obj: Any): Boolean = obj.isInstanceOf[util.Collection[_]]\n\n        override def iterator(obj: Any): Iterator = new Iterator() {\n            private val it = obj.asInstanceOf[util.Collection[_]].iterator()\n\n            override def hasNext: Boolean = it.hasNext\n\n            override def next: Any = it.next()\n        }\n\n        override def length(obj: Any): Int = obj.asInstanceOf[util.Collection[_]].size()\n    }\n    class MapHandler(limit: Int, timeout: Int) extends AbstractTypeHandler {\n        override def handle(scalaInfo: ScalaVariableInfo, loopback: Loopback, depth: Int): mutable.Map[String, Any] =\n            withJsonObject {\n                json =>\n                    val obj = scalaInfo.value\n                    val id = scalaInfo.path\n                    val map = obj.asInstanceOf[Map[_, _]]\n                    val keys = mutable.MutableList[Any]()\n                    val values = mutable.MutableList[Any]()\n                    json += (\"jvm-type\" -> obj.getClass.getCanonicalName)\n                    json += (\"length\" -> map.size)\n                    var index = 0\n\n                    json += (\"key\" -> keys)\n                    json += (\"value\" -> values)\n\n                    val startTime = System.currentTimeMillis()\n                    map.view.take(math.min(limit, map.size)).foreach {\n                        case (key, value) =>\n                            if (checkTimeoutError(scalaInfo.path, startTime, timeout))\n                                return json\n                            keys += loopback.pass(key, s\"$id.key[$index]\")\n                            values += loopback.pass(value, s\"$id.value[$index]\")\n                            index += 1\n                    }\n            }\n\n        override def accept(obj: Any): Boolean = obj.isInstanceOf[Map[_, _]]\n    }\n\n    class NullHandler extends AbstractTypeHandler {\n        override def accept(obj: Any): Boolean = obj == null\n\n        override def handle(scalaInfo: ScalaVariableInfo, loopback: Loopback, depth: Int): mutable.Map[String, Any] =\n            mutable.Map[String, Any]()\n    }\n\n    class ObjectHandler(val stringSizeLimit: Int,\n                        val manager: HandlerManager,\n                        val referenceManager: ReferenceManager,\n                        val timeout: Int) extends AbstractTypeHandler {\n        private val INACCESSIBLE = ScalaVariableInfo(isAccessible = false, isLazy = false, null, null, null, null)\n        val ru: JavaUniverse = scala.reflect.runtime.universe\n        val mirror: ru.Mirror = ru.runtimeMirror(getClass.getClassLoader)\n\n        import scala.reflect.runtime.universe.NoSymbol\n\n        case class ReflectionProblem(e: Throwable, symbol: String, var count: Int)\n\n        val problems: mutable.Map[String, ReflectionProblem] = mutable.Map[String, ReflectionProblem]()\n\n        override def accept(obj: Any): Boolean = true\n\n        override def handle(scalaInfo: ScalaVariableInfo, loopback: Loopback, depth: Int): mutable.Map[String, Any] =\n            withJsonObject { result =>\n                val obj = scalaInfo.value\n\n                if (obj == null) {\n                    return result\n                }\n                if (depth <= 0) {\n                    var s = obj.toString\n                    if (s.length > stringSizeLimit)\n                        s = s.take(stringSizeLimit) + \"...\"\n                    result += (ResNames.VALUE -> s)\n                    return result\n                }\n\n                val startTime = System.currentTimeMillis()\n                val fields = listAccessibleProperties(scalaInfo, startTime)\n                if (fields.isEmpty) {\n                    var s = obj.toString\n                    if (s.length > stringSizeLimit)\n                        s = s.take(stringSizeLimit) + \"...\"\n                    result += (ResNames.VALUE -> s)\n                    return result\n                }\n\n                val resolvedFields = mutable.Map[String, Any]()\n                result += (ResNames.VALUE -> resolvedFields)\n\n\n                fields.foreach { field =>\n                    if (checkTimeoutError(field.name, startTime, timeout)) {\n                        return result\n                    }\n\n                    if (field.ref != null && field.ref != field.path) {\n                        resolvedFields += (field.name -> (mutable.Map[String, Any]() += (ResNames.REF -> field.ref)))\n                    } else {\n                        resolvedFields += (field.name -> manager.handleVariable(field, loopback, depth - 1))\n                    }\n                }\n\n                result\n            }\n\n\n        override def getErrors: List[String] = problems.map(x =>\n            f\"Reflection error for ${x._2.symbol} counted ${x._2.count}.\\n\" +\n                    f\"Error message: ${ExceptionUtils.getMessage(x._2.e)}\\n \" +\n                    f\"Stacktrace:${ExceptionUtils.getStackTrace(x._2.e)}\").toList ++ super.getErrors\n\n        private def listAccessibleProperties(info: ScalaVariableInfo, startTime: Long): List[ScalaVariableInfo] = {\n            val instanceMirror = mirror.reflect(info.value)\n            val instanceSymbol = instanceMirror.symbol\n            val members = instanceSymbol.toType.members\n\n            val parsedMembers = mutable.MutableList[ScalaVariableInfo]()\n            members.foreach { symbol =>\n                if (checkTimeoutError(info.path, startTime, timeout))\n                    return parsedMembers.toList\n                val variableInfo = get(instanceMirror, symbol, info.path)\n                if (variableInfo.isAccessible)\n                    parsedMembers += variableInfo\n            }\n\n            parsedMembers.toList\n        }\n\n        private def get(instanceMirror: ru.InstanceMirror, symbol: ru.Symbol, path: String): ScalaVariableInfo = {\n            if (!problems.contains(path))\n                try {\n                    // is public property\n                    if (!symbol.isMethod && symbol.isTerm && (symbol.asTerm.isVar || symbol.asTerm.isVal)\n                            && symbol.asTerm.getter != NoSymbol\n                            && symbol.asTerm.getter.isPublic) {\n                        val term = symbol.asTerm\n                        val f = instanceMirror.reflectField(term)\n                        val fieldPath = s\"$path.${term.name.toString.trim}\"\n                        val value = f.get\n                        val tpe = term.typeSignature.toString\n                        return ScalaVariableInfo(isAccessible = tpe != \"<notype>\", isLazy = term.isLazy, value, tpe,\n                            fieldPath, referenceManager.getRef(value, fieldPath))\n                    }\n                } catch {\n                    case e: Throwable => problems(path) = ReflectionProblem(e, symbol.toString, 1)\n                }\n            else\n                problems(path).count += 1\n\n            INACCESSIBLE\n        }\n    }\n\n    class PrimitiveHandler extends AbstractTypeHandler {\n        override def accept(obj: Any): Boolean =\n            obj match {\n                case _: Byte => true\n                case _: Short => true\n                case _: Boolean => true\n                case _: Char => true\n                case _: Int => true\n                case _: Long => true\n                case _: Float => true\n                case _: Double => true\n                case _ => false\n            }\n\n        override def handle(scalaInfo: ScalaVariableInfo, loopback: Loopback, depth: Int): mutable.Map[String, Any] =\n            mutable.Map[String, Any](\n                ResNames.VALUE -> scalaInfo.value,\n                ResNames.IS_PRIMITIVE -> 1\n            )\n    }\n\n    class SeqHandler(limit: Int, timeout: Int) extends AbstractCollectionHandler(limit, timeout) {\n        override def accept(obj: Any): Boolean = obj.isInstanceOf[Seq[_]]\n\n        override def iterator(obj: Any): Iterator = new Iterator {\n            private val it = obj.asInstanceOf[Seq[_]].iterator\n\n            override def hasNext: Boolean = it.hasNext\n\n            override def next: Any = it.next()\n        }\n\n        override def length(obj: Any): Int = obj.asInstanceOf[Seq[_]].size\n    }\n\n    class SetHandler(limit: Int, timeout: Int) extends AbstractCollectionHandler(limit, timeout) {\n        override def iterator(obj: Any): Iterator = new Iterator {\n            private val it = obj.asInstanceOf[Set[_]].iterator\n\n            override def hasNext: Boolean = it.hasNext\n\n            override def next: Any = it.next()\n        }\n\n        override def length(obj: Any): Int = obj.asInstanceOf[Set[_]].size\n\n        override def accept(obj: Any): Boolean = obj.isInstanceOf[Set[_]]\n    }\n\n    class SpecialsHandler(limit: Int) extends AbstractTypeHandler {\n        override def accept(obj: Any): Boolean = obj.getClass.getCanonicalName != null && obj.getClass.getCanonicalName.startsWith(\"scala.\")\n\n        override def handle(scalaInfo: ScalaVariableInfo, loopback: Loopback, depth: Int): mutable.Map[String, Any] = withJsonObject {\n            json =>\n                var s = scalaInfo.value.toString\n                if (s.length > limit)\n                    s = s.take(limit) + \"...\"\n                json.put(ResNames.VALUE, s)\n        }\n    }\n\n    class StringHandler(limit: Int) extends AbstractTypeHandler {\n        override def accept(obj: Any): Boolean = obj.isInstanceOf[String]\n\n        override def handle(scalaInfo: ScalaVariableInfo, loopback: Loopback, depth: Int): mutable.Map[String, Any] = {\n            var s = scalaInfo.value.asInstanceOf[String]\n            if (s.length > limit)\n                s = s.take(limit) + \"...\"\n            mutable.Map(\n                ResNames.VALUE -> s\n            )\n        }\n    }\n\n    class ThrowableHandler extends AbstractTypeHandler {\n        override def accept(obj: Any): Boolean = obj.isInstanceOf[Throwable]\n\n        override def handle(scalaInfo: ScalaVariableInfo, loopback: Loopback, depth: Int): mutable.Map[String, Any] = {\n            val obj = scalaInfo.value\n            val throwable = obj.asInstanceOf[Throwable]\n            val writer = new StringWriter()\n            val out = new PrintWriter(writer)\n            throwable.printStackTrace(out)\n\n            mutable.Map(\n                ResNames.VALUE -> writer.toString\n            )\n        }\n    }\n\n    class HandlerManager(enableProfiling: Boolean,\n                         timeout: Int,\n                         stringSizeLimit: Int,\n                         collectionSizeLimit: Int,\n                         referenceManager: ReferenceManager) {\n        private val handlerChain = ListBuffer[AbstractTypeHandler](\n            new NullHandler(),\n            new StringHandler(stringSizeLimit),\n            new ArrayHandler(collectionSizeLimit, timeout),\n            new JavaCollectionHandler(collectionSizeLimit, timeout),\n            new SeqHandler(collectionSizeLimit, timeout),\n            new SetHandler(collectionSizeLimit, timeout),\n            new MapHandler(collectionSizeLimit, timeout),\n            new ThrowableHandler(),\n            new SpecialsHandler(stringSizeLimit),\n            new PrimitiveHandler(),\n            new DatasetHandler(),\n            new RDDHandler(),\n            new SparkContextHandler(),\n            new SparkSessionHandler(),\n            new ObjectHandler(stringSizeLimit, this, referenceManager, timeout)\n        ).map(new HandlerWrapper(_, enableProfiling))\n\n        def getErrors: mutable.Seq[String] = handlerChain.flatMap(x => x.handler.getErrors)\n\n        def handleVariable(info: ScalaVariableInfo, loopback: Loopback, depth: Int, startTime: Long = System.currentTimeMillis()): Any = {\n            handlerChain.find(_.accept(info)).map(_.handle(info, loopback, depth, startTime)).getOrElse(mutable.Map[String, Any]())\n        }\n    }\n\n    class HandlerWrapper(val handler: TypeHandler, profile: Boolean) {\n        def accept(info: ScalaVariableInfo): Boolean = info.isLazy || handler.accept(info.value)\n\n        def handle(scalaInfo: ScalaVariableInfo, loopback: Loopback, depth: Int, initStartTime: Long): Any = {\n            val startTime = if (initStartTime != null)\n                initStartTime\n            else\n                System.currentTimeMillis()\n\n            val data = if (scalaInfo.isLazy) {\n                mutable.Map[String, Any](ResNames.LAZY -> true)\n            }\n            else {\n                try {\n                    val data = handler.handle(scalaInfo, loopback, depth: Int)\n                    if (data.keys.count(_ == ResNames.IS_PRIMITIVE) > 0) {\n                        return data(ResNames.VALUE)\n                    }\n                    data\n                } catch {\n                    case t: Throwable =>\n                        return ExceptionUtils.getRootCauseMessage(t)\n                }\n\n            }\n            try {\n                data.put(ResNames.TYPE, calculateType(scalaInfo))\n            } catch {\n                case t: Throwable =>\n                    data.put(ResNames.TYPE, ExceptionUtils.getRootCauseMessage(t))\n            }\n\n            if (profile)\n                data.put(ResNames.TIME, System.currentTimeMillis() - startTime)\n\n            data\n        }\n\n        private def calculateType(scalaInfo: ScalaVariableInfo): String = {\n            if (scalaInfo.tpe != null)\n                return scalaInfo.tpe\n\n            if (scalaInfo.value != null)\n                scalaInfo.value.getClass.getCanonicalName\n            else\n                null\n        }\n    }\n    class InterpreterHandler(val interpreter: IMain) {\n        val wrapper = new ZtoolsInterpreterWrapper(interpreter)\n\n        def getVariableNames: immutable.Seq[String] =\n            interpreter.definedSymbolList.filter { x => x.isGetter }.map(_.name.toString).distinct\n\n        def getInfo(name: String, tpe: String): ScalaVariableInfo = {\n            val obj = valueOfTerm(name).orNull\n            ScalaVariableInfo(isAccessible = true, isLazy = false, obj, tpe, name, null)\n        }\n\n        def valueOfTerm(id: String): Option[Any] = wrapper.valueOfTerm(id)\n    }\n\n    case class ScalaVariableInfo(isAccessible: Boolean,\n                                 isLazy: Boolean,\n                                 value: Any,\n                                 tpe: String,\n                                 path: String,\n                                 ref: String) {\n        val name: String = if (path != null)\n            path.substring(path.lastIndexOf('.') + 1)\n        else\n            null\n    }\n\n\n    //noinspection TypeAnnotation\n    class ZtoolsInterpreterWrapper(val iMain: IMain) {\n\n        import iMain.global._\n\n        import scala.language.implicitConversions\n        import scala.reflect.runtime.{universe => ru}\n        import scala.util.{Try => Trying}\n\n        private lazy val importToGlobal = iMain.global mkImporter ru\n        private lazy val importToRuntime = ru.internal createImporter iMain.global\n\n        private implicit def importFromRu(sym: ru.Symbol) = importToGlobal importSymbol sym\n\n        private implicit def importToRu(sym: Symbol): ru.Symbol = importToRuntime importSymbol sym\n\n        // see https://github.com/scala/scala/pull/5852/commits/a9424205121f450dea2fe2aa281dd400a579a2b7\n        def valueOfTerm(id: String): Option[Any] = exitingTyper {\n            def fixClassBasedFullName(fullName: List[String]): List[String] = {\n                if (settings.Yreplclassbased.value) {\n                    val line :: read :: rest = fullName\n                    line :: read :: \"INSTANCE\" :: rest\n                } else fullName\n            }\n\n            def value(fullName: String) = {\n                val universe = iMain.runtimeMirror.universe\n                import universe.{InstanceMirror, Symbol, TermName}\n                val pkg :: rest = fixClassBasedFullName((fullName split '.').toList)\n                val top = iMain.runtimeMirror.staticPackage(pkg)\n\n                @annotation.tailrec\n                def loop(inst: InstanceMirror, cur: Symbol, path: List[String]): Option[Any] = {\n                    def mirrored =\n                        if (inst != null) inst\n                        else iMain.runtimeMirror reflect (iMain.runtimeMirror reflectModule cur.asModule).instance\n\n                    path match {\n                        case last :: Nil =>\n                            cur.typeSignature.decls find (x => x.name.toString == last && x.isAccessor) map { m =>\n                                (mirrored reflectMethod m.asMethod).apply()\n                            }\n                        case next :: rest =>\n                            val s = cur.typeSignature.member(TermName(next))\n                            val i =\n                                if (s.isModule) {\n                                    if (inst == null) null\n                                    else iMain.runtimeMirror reflect (inst reflectModule s.asModule).instance\n                                }\n                                else if (s.isAccessor) {\n                                    iMain.runtimeMirror reflect (mirrored reflectMethod s.asMethod).apply()\n                                }\n                                else {\n                                    assert(false, s.fullName)\n                                    inst\n                                }\n                            loop(i, s, rest)\n                        case Nil => None\n                    }\n                }\n\n                loop(null, top, rest)\n            }\n\n            Option(iMain.symbolOfTerm(id)) filter (_.exists) flatMap (s => Trying(value(s.fullName)).toOption.flatten)\n        }\n    }\n\n    class ReferenceManager {\n        private val refMap = mutable.Map[ReferenceWrapper, String]()\n        private val refInvMap = new TrieMap[ReferenceWrapper]()\n\n        /**\n         * Returns a reference (e.g. valid path) to the object or creates a record in reference maps (and returns null).\n         *\n         * @param obj  an object we want to find a reference for (can be null)\n         * @param path path of the object e.g. myVar.myField.b\n         * @return reference path to the object obj. The method returns null if obj is null itself or\n         *         obj hasn't been mentioned earlier or in the case of AnyVal object.\n         */\n        def getRef(obj: Any, path: String): String = obj match {\n            case null | _: Unit =>\n                clearRefIfPathExists(path)\n                null\n            case ref: AnyRef =>\n                val wrapper = new ReferenceWrapper(ref)\n                if (refMap.contains(wrapper)) {\n                    if (refInvMap.get(path).orNull != wrapper) clearRefIfPathExists(path)\n                    refMap(wrapper)\n                } else {\n                    clearRefIfPathExists(path)\n                    refMap(wrapper) = path\n                    refInvMap.put(path, wrapper)\n                    null\n                }\n            case _ => null\n        }\n\n\n        private def clearRefIfPathExists(path: String): Unit = {\n            if (refInvMap.contains(path)) {\n                val tree = refInvMap.subtree(path)\n                tree.forEach(refMap.remove(_: ReferenceWrapper))\n            }\n        }\n    }\n\n    class ReferenceWrapper(val ref: AnyRef) {\n        override def hashCode(): Int = ref.hashCode()\n\n        override def equals(obj: Any): Boolean = obj match {\n            case value: ReferenceWrapper =>\n                ref.eq(value.ref)\n            case _ => false\n        }\n    }\n\n\n    class VariablesView(val intp: IMain,\n                        val timeout: Int,\n                        val variableTimeout: Int,\n                        val collectionSizeLimit: Int,\n                        val stringSizeLimit: Int,\n                        val blackList: List[String],\n                        val whiteList: List[String] = null,\n                        val filterUnitResults: Boolean,\n                        val enableProfiling: Boolean,\n                        val depth: Int,\n                        val interpreterResCountLimit: Int = 5) {\n        val errors: mutable.MutableList[String] = mutable.MutableList[String]()\n        private val interpreterHandler = new InterpreterHandler(intp)\n        private val referenceManager = new ReferenceManager()\n\n        private val touched = mutable.Map[String, ScalaVariableInfo]()\n\n        private val handlerManager = new HandlerManager(\n            collectionSizeLimit = collectionSizeLimit,\n            stringSizeLimit = stringSizeLimit,\n            timeout = variableTimeout,\n            referenceManager = referenceManager,\n            enableProfiling = enableProfiling\n        )\n\n        //noinspection ScalaUnusedSymbol\n        def getZtoolsJsonResult: String = {\n            implicit val ztoolsFormats: AnyRef with Formats = Serialization.formats(NoTypeHints)\n            Serialization.write(\n                Map(\n                    \"variables\" -> resolveVariables,\n                    \"errors\" -> (errors ++ handlerManager.getErrors)\n                )\n            )\n        }\n\n        def toJson: String = {\n            implicit val ztoolsFormats: AnyRef with Formats = Serialization.formats(NoTypeHints)\n            Serialization.write(resolveVariables)\n        }\n\n        def resolveVariables: mutable.Map[String, Any] = {\n            val result: mutable.Map[String, Any] = mutable.Map[String, Any]()\n            val startTime = System.currentTimeMillis()\n\n            val interpreterVariablesNames = interpreterHandler.getVariableNames\n            val finalNames = filterVariableNames(interpreterVariablesNames)\n\n            finalNames.foreach { name =>\n                val varType = interpreterHandler.interpreter.typeOfTerm(name).toString().stripPrefix(\"()\")\n                val variable = mutable.Map[String, Any]()\n\n                result += name -> variable\n                variable += ResNames.TYPE -> varType\n                if (!isUnitOrNullResult(result, name))\n                    variable += ResNames.VALUE -> \"<Not calculated>\"\n            }\n\n            var passedVariablesCount = 0\n            val totalVariablesCount = finalNames.size\n\n            if (checkTimeout(startTime, passedVariablesCount, totalVariablesCount))\n                return result\n\n            finalNames.foreach { name =>\n                if (checkTimeout(startTime, passedVariablesCount, totalVariablesCount))\n                    return result\n                passedVariablesCount += 1\n\n                if (!isUnitOrNullResult(result, name)) {\n\n                    calculateVariable(result, name)\n                }\n            }\n            result\n        }\n\n        private def calculateVariable(result: mutable.Map[String, Any], name: String) = {\n            val valMap = result(name).asInstanceOf[mutable.Map[String, Any]]\n            try {\n                val startTime = System.currentTimeMillis()\n\n                val info = interpreterHandler.getInfo(name, valMap(ResNames.TYPE).asInstanceOf[String])\n                val ref = referenceManager.getRef(info.value, name)\n                touched(info.path) = info\n\n                if (ref != null && ref != info.path) {\n                    result += (info.path -> mutable.Map[String, Any](ResNames.REF -> ref))\n                } else {\n                    result += info.path -> parseInfo(info, depth, startTime)\n                }\n            } catch {\n                case t: Throwable =>\n                    valMap += ResNames.VALUE -> ExceptionUtils.getRootCauseMessage(t)\n            }\n        }\n\n        private def isUnitOrNullResult(result: mutable.Map[String, Any], name: String) = {\n            val res = result(name).asInstanceOf[mutable.Map[String, Any]]\n            val valType = res(ResNames.TYPE)\n            valType == \"Unit\" || valType == \"Null\"\n        }\n\n        def resolveVariable(path: String): mutable.Map[String, Any] = {\n            val result = mutable.Map[String, Any]()\n            val obj = touched.get(path).orNull\n            if (obj.ref != null) {\n                result += (ResNames.VALUE -> mutable.Map[String, Any](ResNames.REF -> obj.ref))\n            } else {\n                result += (ResNames.VALUE -> parseInfo(obj, depth))\n            }\n            result\n        }\n\n        private def parseInfo(info: ScalaVariableInfo, depth: Int, startTime: Long = System.currentTimeMillis()): Any = {\n            val loopback = new Loopback {\n                override def pass(obj: Any, id: String): Any = {\n                    val si = ScalaVariableInfo(isAccessible = true, isLazy = false, obj, null, id, referenceManager.getRef(obj, id))\n                    parseInfo(si, depth - 1)\n                }\n            }\n            handlerManager.handleVariable(info, loopback, depth, startTime)\n        }\n\n        private def filterVariableNames(interpreterVariablesNames: Seq[String]) = {\n            val variablesNames = interpreterVariablesNames.seq\n                    .filter { name => !blackList.contains(name) }\n                    .filter { name => whiteList == null || whiteList.contains(name) }\n\n\n            val p = Pattern.compile(\"res\\\\d*\")\n            val (resVariables, otherVariables: immutable.Seq[String]) = variablesNames.partition(x => p.matcher(x).matches())\n            val sortedResVariables = resVariables\n                    .map(res => Try(res.stripPrefix(\"res\").toInt))\n                    .filter(_.isSuccess)\n                    .map(_.get)\n                    .sortWith(_ > _)\n                    .take(interpreterResCountLimit)\n                    .map(num => \"res\" + num)\n\n            val finalNames = otherVariables ++ sortedResVariables\n            finalNames\n        }\n\n        //noinspection ScalaUnusedSymbol\n        private implicit def toJavaFunction[A, B](f: A => B): JFunction[A, B] = new JFunction[A, B] {\n            override def apply(a: A): B = f(a)\n        }\n\n        private def checkTimeout(startTimeout: Long, passed: Int, total: Int): Boolean = {\n            val isTimeoutExceed = System.currentTimeMillis() - startTimeout > timeout\n            if (isTimeoutExceed)\n                errors += s\"Variables collect timeout. Exceed ${timeout}ms. Parsed $passed from $total.\"\n            isTimeoutExceed\n        }\n    }\n\n    class DatasetHandler extends AbstractTypeHandler {\n        override def accept(obj: Any): Boolean = obj.isInstanceOf[Dataset[_]]\n\n        override def handle(scalaInfo: ScalaVariableInfo, loopback: Loopback, depth: Int): mutable.Map[String, Any] = {\n            val obj = scalaInfo.value\n            val df = obj.asInstanceOf[Dataset[_]]\n\n\n            val schema = df.schema\n            val jsonSchemaColumns = schema.fields.map(field => {\n                val value = withJsonObject { jsonField =>\n                    jsonField += \"name\" -> wrap(field.name, null)\n                    jsonField += \"nullable\" -> wrap(field.nullable, null)\n                    jsonField += \"dataType\" -> wrap(field.dataType.typeName, null)\n                }\n                wrap(value, \"org.apache.spark.sql.types.StructField\")\n            }\n            )\n\n            val jsonSchema = mutable.Map(\n                ResNames.VALUE -> jsonSchemaColumns,\n                ResNames.TYPE -> \"org.apache.spark.sql.types.StructType\",\n                ResNames.LENGTH -> jsonSchemaColumns.length\n            )\n\n            val dfValue = mutable.Map(\n                \"schema()\" -> jsonSchema,\n                \"getStorageLevel()\" -> wrap(df.storageLevel.toString(), \"org.apache.spark.storage.StorageLevel\")\n            )\n\n            mutable.Map(\n                ResNames.VALUE -> dfValue\n            )\n        }\n    }\n\n\n    class RDDHandler extends AbstractTypeHandler {\n        override def accept(obj: Any): Boolean = obj.isInstanceOf[RDD[_]]\n\n        override def handle(scalaInfo: ScalaVariableInfo, loopback: Loopback, depth: Int): mutable.Map[String, Any] = withJsonObject {\n            json =>\n                val obj = scalaInfo.value\n                val rdd = obj.asInstanceOf[RDD[_]]\n                json += (ResNames.VALUE -> withJsonObject { value =>\n                    value += (\"getNumPartitions()\" -> wrap(rdd.getNumPartitions, \"Int\"))\n                    value += (\"name\" -> wrap(rdd.name, \"String\"))\n                    value += (\"id\" -> wrap(rdd.id, \"Int\"))\n                    value += (\"partitioner\" -> wrap(rdd.partitioner.toString, \"Option[org.apache.spark.Partitioner]\"))\n                    value += (\"getStorageLevel()\" -> wrap(rdd.getStorageLevel.toString, \"org.apache.spark.storage.StorageLevel\"))\n                })\n        }\n    }\n\n    class SparkContextHandler extends AbstractTypeHandler {\n        override def accept(obj: Any): Boolean = obj.isInstanceOf[SparkContext]\n\n        override def handle(scalaInfo: ScalaVariableInfo, loopback: Loopback, depth: Int): mutable.Map[String, Any] = withJsonObject {\n            json =>\n                val sc = scalaInfo.value.asInstanceOf[SparkContext]\n                json += (ResNames.VALUE -> withJsonObject { json =>\n                    json += (\"sparkUser\" -> wrap(sc.sparkUser, \"String\"))\n                    json += (\"sparkTime\" -> wrap(sc.startTime, \"Long\"))\n                    json += (\"applicationId()\" -> wrap(sc.applicationId, \"String\"))\n                    json += (\"applicationAttemptId()\" -> wrap(sc.applicationAttemptId.toString, \"Option[String]\"))\n                    json += (\"appName()\" -> sc.appName)\n                })\n        }\n    }\n\n    class SparkSessionHandler extends AbstractTypeHandler {\n        override def accept(obj: Any): Boolean = obj.isInstanceOf[SparkSession]\n\n        override def handle(scalaInfo: ScalaVariableInfo, loopback: Loopback, depth: Int): mutable.Map[String, Any] = withJsonObject {\n            json =>\n                val obj = scalaInfo.value\n                val id = scalaInfo.path\n\n                val spark = obj.asInstanceOf[SparkSession]\n                json += (ResNames.VALUE -> withJsonObject { json =>\n                    json += (\"version()\" -> spark.version)\n                    json += (\"sparkContext\" -> loopback.pass(spark.sparkContext, s\"$id.sparkContext\"))\n                })\n        }\n    }\n\n\n    /**\n     * Main section\n     */\n    val iMain: IMain = $intp\n    val depth: Int = 2\n    val filterUnitResults: Boolean = true\n    val enableProfiling: Boolean = true\n    val collectionSizeLimit = 100\n    val stringSizeLimit = 400\n    val timeout = 5000\n    val variableTimeout = 2000\n    val interpreterResCountLimit = 10\n    val blackList = \"$intp,sqlContext,z,engine\".split(',').toList\n    val whiteList: List[String] = null\n\n\n    val variableView = new VariablesView(\n        intp = iMain,\n        timeout = timeout,\n        variableTimeout = variableTimeout,\n        collectionSizeLimit = collectionSizeLimit,\n        stringSizeLimit = stringSizeLimit,\n        blackList = blackList,\n        whiteList = whiteList,\n        filterUnitResults = filterUnitResults,\n        enableProfiling = enableProfiling,\n        depth = depth,\n        interpreterResCountLimit = interpreterResCountLimit\n    )\n\n    implicit val ztoolsFormats: AnyRef with Formats = Serialization.formats(NoTypeHints)\n    val variablesJson = variableView.getZtoolsJsonResult\n    println(\"---ztools-scala---\")\n    println(variablesJson)\n    println(\"---ztools-scala---\")\n}\ncatch {\n    case t: Throwable =>\n        import org.apache.commons.lang.exception.ExceptionUtils\n        import org.json4s.jackson.Serialization\n        import org.json4s.{Formats, NoTypeHints}\n\n        implicit val ztoolsFormats: AnyRef with Formats = Serialization.formats(NoTypeHints)\n        val result = Serialization.write(Map(\n            \"errors\" -> Array(f\"${ExceptionUtils.getMessage(t)}\\n${ExceptionUtils.getStackTrace(t)}\")\n        ))\n        println(\"---ztools-scala---\")\n        println(result)\n        println(\"---ztools-scala---\")\n}\n{\n    var sqlTableShows: Array[String] = Array(\"SHOW TABLES  \")\n    val additionalTables = Array[Tuple2[String, String]]((\"\", \"facilitestable\"), (\"\", \"initialhoteltable\"), (\"\", \"initialtipologiastable\"), (\"\", \"initialquartosreservadostable\"), (\"\", \"feriadostable\"), (\"\", \"meteorologiatable\"), (\"\", \"eventostable\"), (\"\", \"hoteltable\"), (\"\", \"tipologiastable\"))\n    val timeout = 5000\n    val collectOnlyTempTables = false\n    val appendOutput = false\n\n    case class ZtoolsColumn(name: String,\n                            columnType: String,\n                            description: String)\n\n    case class ZtoolsTable(name: String,\n                           databaseName: String,\n                           var columns: Array[ZtoolsColumn],\n                           var error: String = null)\n\n    case class ZtoolsSqlProfile(request: String, time: Long)\n\n    case class ZtoolsSqlInfo(tables: Array[ZtoolsTable],\n                             errors: Array[String],\n                             profiling: Array[ZtoolsSqlProfile],\n                             appendOutput: Boolean = appendOutput)\n\n\n    //TO KNOW:\n    //We collect info by spark.sql not spark.catalog because there some errors with Glue, database does not read\n    //Additionally we cannot use column name because it can be different \"namespace\" in EMR and \"database\" in vanilla spark\n    def calcZtoolsSqlSchemas(): String = {\n        import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility\n        import com.fasterxml.jackson.annotation.PropertyAccessor\n        import com.fasterxml.jackson.databind.ObjectMapper\n        import org.apache.commons.lang.exception.ExceptionUtils\n        import org.apache.spark.sql.Row\n\n        import scala.collection.mutable.ArrayBuffer\n\n        val startTime = System.currentTimeMillis()\n        val errors = ArrayBuffer[String]()\n\n        def convertThrowable(msg: String, t: Throwable): String = msg + \"\\n\" +\n                ExceptionUtils.getRootCauseMessage(t) + \"\\n\" +\n                ExceptionUtils.getStackTrace(t)\n\n        def escapeSql(string: String) = \"`\" + string.replace(\"`\", \"``\") + \"`\"\n\n\n        var tables = ArrayBuffer[ZtoolsTable]()\n        var profilingResult = ArrayBuffer[ZtoolsSqlProfile]()\n\n        def performSql(sqlRequest: String): Tuple2[Array[_ <: Row], String] = {\n            if (System.currentTimeMillis() - startTime > timeout) {\n                val error = f\"Timeout $timeout exceed. Sql request '$sqlRequest' ignored.\"\n                errors.append(error)\n                return (Array.empty, error)\n            }\n            val startTransactionTime = System.currentTimeMillis()\n            try {\n                val rows = spark.sql(sqlRequest).collect()\n                (rows, null)\n            } catch {\n                case t: Throwable =>\n                    errors.append(convertThrowable(sqlRequest, t))\n                    (Array.empty, ExceptionUtils.getMessage(t))\n            } finally {\n                profilingResult += ZtoolsSqlProfile(sqlRequest, System.currentTimeMillis() - startTransactionTime)\n            }\n        }\n\n        if (sqlTableShows != null && sqlTableShows.isEmpty) {\n            val sqlRequest = \"show databases\"\n            val databases = performSql(sqlRequest)._1.map(_.getAs[String](0))\n            sqlTableShows = databases.map(db => f\"SHOW TABLES in $db\")\n        }\n\n        if (sqlTableShows == null) {\n            sqlTableShows = Array.empty\n        }\n\n        sqlTableShows.foreach(sqlRequest => {\n            try {\n                var listTables = performSql(sqlRequest)._1\n                if (collectOnlyTempTables)\n                    listTables = listTables.filter(_.getAs[Boolean](2) == true)\n\n                listTables.map(row => ZtoolsTable(\n                    databaseName = row.getAs[String](0),\n                    name = row.getAs[String](1),\n                    columns = Array.empty[ZtoolsColumn])).foreach(t => tables.append(t))\n            } catch {\n                case t: Throwable =>\n                    errors.append(convertThrowable(s\"Error transform output of  $sqlRequest\", t))\n                    ArrayBuffer.empty[ZtoolsTable]\n            }\n        })\n\n        val tableSet = (additionalTables.map(it => ZtoolsTable(it._2, it._1, Array.empty)) ++ tables).distinct\n\n        def processTable(table: ZtoolsTable): Unit = {\n            val columns = try {\n                val tableSqlName = if (table.databaseName == null || table.databaseName.isEmpty)\n                    escapeSql(table.name)\n                else\n                    escapeSql(table.databaseName) + \".\" + escapeSql(table.name)\n\n                //https://spark.apache.org/docs/3.0.0-preview/sql-ref-syntax-aux-describe-table.html\n                val sqlResult = performSql(s\"DESCRIBE TABLE $tableSqlName\")\n\n                val columnRows = sqlResult._1\n                table.error = sqlResult._2\n\n                //Ignore partition section\n                columnRows.takeWhile(row => !Option(row.getAs[String](0)).getOrElse(\"\").startsWith(\"# \"))\n                        .map(row => ZtoolsColumn(row.getAs[String](0), row.getAs[String](1), row.getAs[String](2)))\n            } catch {\n                case t: Throwable => convertThrowable(s\"Error list columns for ${table.name}\", t)\n                    table.error = ExceptionUtils.getRootCauseMessage(t)\n                    errors.append(convertThrowable(s\"Error list columns for ${table.name}\", t))\n                    return\n            }\n            table.columns = columns\n        }\n\n        tableSet.foreach(table => {\n            processTable(table)\n        })\n\n        val res = ZtoolsSqlInfo(tableSet.toArray, errors.toArray, profilingResult.toArray)\n        val objectMapper = new ObjectMapper().setVisibility(PropertyAccessor.FIELD, Visibility.ANY).writerWithDefaultPrettyPrinter()\n        objectMapper.writeValueAsString(res)\n    }\n\n    def ztoolsPrintResult(): Unit = {\n        val ztoolsSqlResult = calcZtoolsSqlSchemas()\n        println(\"---ztools-sql---\")\n        println(ztoolsSqlResult)\n        println(\"---ztools-sql---\")\n    }\n\n    ztoolsPrintResult()\n}",
   "config": {},
   "dateStarted": "2023-05-14 17:20:08.956",
   "dateUpdated": "2023-05-14 17:20:11.483",
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "<console>:390: \u001b[33mwarning: \u001b[0ma pure expression does nothing in statement position; you may be omitting necessary parentheses\n                       result\n                       ^\n<console>:565: \u001b[33mwarning: \u001b[0mcomparing values of types Long and Null using `!=' will always yield true\n                   val startTime = if (initStartTime != null)\n                                                     ^\n---ztools-scala---\n{\"variables\":{\"Maia\":{\"type\":\"List\",\"length\":1,\"value\":[{\"type\":\"java.lang.String\",\"value\":\"Maia\",\"time\":0}],\"time\":0},\"maxEndDate\":{\"type\":\"Object\",\"value\":\"2023-11-05\",\"time\":1},\"Obidos\":{\"type\":\"List\",\"length\":1,\"value\":[{\"type\":\"java.lang.String\",\"value\":\"Obidos\",\"time\":0}],\"time\":0},\"Braganca\":{\"type\":\"List\",\"length\":1,\"value\":[{\"type\":\"java.lang.String\",\"value\":\"Alto dos Lombos\",\"time\":0}],\"time\":1},\"spark\":{\"type\":\"org.apache.spark.sql.SparkSession\",\"value\":{\"sparkContext\":{\"type\":\"org.apache.spark.SparkContext\",\"value\":{\"appName()\":\"a0e28579-647b-4014-a0d8-823aa86a0b60\",\"sparkTime\":{\"type\":\"Long\",\"value\":1684078073753},\"applicationId()\":{\"type\":\"String\",\"value\":\"local-1684078075255\"},\"applicationAttemptId()\":{\"type\":\"Option[String]\",\"value\":\"None\"},\"sparkUser\":{\"type\":\"String\",\"value\":\"zeppelin\"}},\"time\":3},\"version()\":\"2.4.5\"},\"time\":21},\"Castelo_Branco\":{\"type\":\"List\",\"length\":4,\"value\":[{\"type\":\"java.lang.String\",\"value\":\"Castelo Branco\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Covilhã\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Sabugueiro / Seia\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Vale do Peso\",\"time\":0}],\"time\":1},\"csvHotel\":{\"type\":\"String\",\"value\":\"/data/tp/Hotel.csv\",\"time\":1},\"FacilitesTable\":{\"type\":\"String\",\"value\":\"Facilities\",\"time\":1},\"FeriadosTable\":{\"type\":\"String\",\"value\":\"Feriados\",\"time\":0},\"newQuartosReservados\":{\"type\":\"org.apache.spark.sql.Dataset\",\"value\":{\"getStorageLevel()\":{\"type\":\"org.apache.spark.storage.StorageLevel\",\"value\":\"StorageLevel(1 replicas)\"},\"schema()\":{\"type\":\"org.apache.spark.sql.types.StructType\",\"length\":20,\"value\":[{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"hotel_ID\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"Reserve_ID\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"pais\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"estado_reserva\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"room_ID\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"tipo_quarto\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"rate_plan\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"data_reserva\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"num_noites\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"Quantidade de quartos\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"ocupacao\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"adultos\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"criancas\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"bebes\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"preco_euros\"},\"dataType\":{\"type\":null,\"value\":\"double\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"data_chegada\"},\"dataType\":{\"type\":null,\"value\":\"date\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"data_partida\"},\"dataType\":{\"type\":null,\"value\":\"date\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"preco_noite\"},\"dataType\":{\"type\":null,\"value\":\"double\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"preco_noite_adulto\"},\"dataType\":{\"type\":null,\"value\":\"double\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"preco_noite_ocupacao\"},\"dataType\":{\"type\":null,\"value\":\"double\"}}}]}},\"time\":1},\"res83\":{\"type\":\"Unit\"},\"Albufeira\":{\"type\":\"List\",\"length\":11,\"value\":[{\"type\":\"java.lang.String\",\"value\":\"Albufeira - Algarve\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Alte\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Benafim\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Conceição de Tavira\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Fuseta\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Olhão\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Olhos D'Água\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"São Brás de Alportel\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Silves\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Tavira\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Vilamoura\",\"time\":0}],\"time\":1},\"df\":{\"type\":\"org.apache.spark.sql.Dataset\",\"value\":{\"getStorageLevel()\":{\"type\":\"org.apache.spark.storage.StorageLevel\",\"value\":\"StorageLevel(disk, memory, deserialized, 1 replicas)\"},\"schema()\":{\"type\":\"org.apache.spark.sql.types.StructType\",\"length\":4,\"value\":[{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"Location\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"Event\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"start_Date\"},\"dataType\":{\"type\":null,\"value\":\"date\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"end_date\"},\"dataType\":{\"type\":null,\"value\":\"date\"}}}]}},\"time\":5},\"minDate\":{\"type\":\"Object\",\"value\":\"2022-01-01\",\"time\":1},\"res86\":{\"type\":\"Unit\"},\"csvFeriados\":{\"type\":\"String\",\"value\":\"/data/tp/Feriados.csv\",\"time\":1},\"MeteorologiaTable\":{\"type\":\"String\",\"value\":\"Meteorologia\",\"time\":0},\"joinFolder\":{\"type\":\"String\",\"value\":\"/data/leitura\",\"time\":1},\"Aveiro\":{\"type\":\"List\",\"length\":1,\"value\":[{\"type\":\"java.lang.String\",\"value\":\"Aveiro\",\"time\":0}],\"time\":1},\"initialCount\":{\"type\":\"org.apache.spark.sql.Dataset\",\"value\":{\"getStorageLevel()\":{\"type\":\"org.apache.spark.storage.StorageLevel\",\"value\":\"StorageLevel(1 replicas)\"},\"schema()\":{\"type\":\"org.apache.spark.sql.types.StructType\",\"length\":19,\"value\":[{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"hotel_ID\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"Reserve_ID\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"pais\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"estado_reserva\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"room_ID\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"tipo_quarto\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"rate_plan\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"data_reserva\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"num_noites\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"Quantidade de quartos\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"ocupacao\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"adultos\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"criancas\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"bebes\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"preco_euros\"},\"dataType\":{\"type\":null,\"value\":\"double\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"data_chegada\"},\"dataType\":{\"type\":null,\"value\":\"date\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"data_partida\"},\"dataType\":{\"type\":null,\"value\":\"date\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"preco_noite\"},\"dataType\":{\"type\":null,\"value\":\"double\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"preco_noite_adulto\"},\"dataType\":{\"type\":null,\"value\":\"double\"}}}]}},\"time\":1},\"Moncao\":{\"type\":\"List\",\"length\":2,\"value\":[{\"type\":\"java.lang.String\",\"value\":\"Monção\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Valença do Minho\",\"time\":0}],\"time\":1},\"Amares\":{\"type\":\"List\",\"length\":5,\"value\":[{\"type\":\"java.lang.String\",\"value\":\"Amares\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Braga\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Póvoa de Lanhoso\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Tomar\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Torres Novas\",\"time\":0}],\"time\":1},\"QuartosReservadosTable\":{\"type\":\"String\",\"value\":\"QuartosReservados\",\"time\":1},\"joinTipologia\":{\"type\":\"org.apache.spark.sql.Dataset\",\"value\":{\"getStorageLevel()\":{\"type\":\"org.apache.spark.storage.StorageLevel\",\"value\":\"StorageLevel(disk, memory, deserialized, 1 replicas)\"},\"schema()\":{\"type\":\"org.apache.spark.sql.types.StructType\",\"length\":22,\"value\":[{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"hotel_ID\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"Reserve_ID\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"pais\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"estado_reserva\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"room_ID\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"Q_tipo_quarto\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"rate_plan\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"data_reserva\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"data_chegada\"},\"dataType\":{\"type\":null,\"value\":\"date\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"data_partida\"},\"dataType\":{\"type\":null,\"value\":\"date\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"num_noites\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"ocupacao\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"adultos\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"criancas\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"bebes\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"preco_euros\"},\"dataType\":{\"type\":null,\"value\":\"double\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"T_tipo_quarto\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"quantidade\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_maxima\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_max_adultos\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_max_criancas\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_max_bebes\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}}]}},\"time\":0},\"maxDate\":{\"type\":\"Object\",\"value\":\"2023-04-23\",\"time\":0},\"Espinho\":{\"type\":\"List\",\"length\":3,\"value\":[{\"type\":\"java.lang.String\",\"value\":\"Espinho\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Ovar\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Viseu\",\"time\":0}],\"time\":0},\"Campo_Maior\":{\"type\":\"List\",\"length\":1,\"value\":[{\"type\":\"java.lang.String\",\"value\":\"Campo Maior\",\"time\":0}],\"time\":0},\"Elvas\":{\"type\":\"List\",\"length\":1,\"value\":[{\"type\":\"java.lang.String\",\"value\":\"ELVAS\",\"time\":0}],\"time\":1},\"res80\":{\"type\":\"Unit\"},\"joinFeriados\":{\"type\":\"org.apache.spark.sql.Dataset\",\"value\":{\"getStorageLevel()\":{\"type\":\"org.apache.spark.storage.StorageLevel\",\"value\":\"StorageLevel(1 replicas)\"},\"schema()\":{\"type\":\"org.apache.spark.sql.types.StructType\",\"length\":30,\"value\":[{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"hotel_ID\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"Reserve_ID\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"pais\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"estado_reserva\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"room_ID\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"Q_tipo_quarto\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"rate_plan\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"data_reserva\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"data_chegada\"},\"dataType\":{\"type\":null,\"value\":\"date\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"data_partida\"},\"dataType\":{\"type\":null,\"value\":\"date\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"num_noites\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"ocupacao\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"adultos\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"criancas\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"bebes\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"preco_euros\"},\"dataType\":{\"type\":null,\"value\":\"double\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"T_tipo_quarto\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"quantidade\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_maxima\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_max_adultos\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_max_criancas\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_max_bebes\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"localizacao\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"area_localizacao\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"estrelas\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"idade_max_criancas\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"idade_max_bebes\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"hora_max_checkin\"},\"dataType\":{\"type\":null,\"value\":\"timestamp\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"qtd_quartos\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":false},\"name\":{\"type\":null,\"value\":\"is_holiday\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}}]}},\"time\":0},\"Batalha\":{\"type\":\"List\",\"length\":2,\"value\":[{\"type\":\"java.lang.String\",\"value\":\"Batalha\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Nazaré\",\"time\":0}],\"time\":0},\"lastException\":{\"type\":\"Throwable\",\"value\":\"org.apache.spark.sql.AnalysisException: path file:/data/outliers/reservas already exists.;\\n\\tat org.apache.spark.sql.execution.datasources.InsertIntoHadoopFsRelationCommand.run(InsertIntoHadoopFsRelationCommand.scala:114)\\n\\tat org.apache.spark.sql.execution.command.DataWritingCommandExec.sideEffectResult$lzycompute(commands.scala:104)\\n\\tat org.apache.spark.sql.execution.command.DataWritingCommandExec.sideEffectResult(commands.scala:102)\\n\\tat org.apache.spark.sql.execution.command.DataWritingCommandExec.doExecute(commands.scala:122)\\n\\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$1.apply(SparkPlan.scala:131)\\n\\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$1.apply(SparkPlan.scala:127)\\n\\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$executeQuery$1.apply(SparkPlan.scala:155)\\n\\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:151)\\n\\tat org.apache.spark.sql.execution.SparkPlan.executeQuery(SparkPlan.scala:152)\\n\\tat org.apache.spark.sql.execution.SparkPlan.execute(SparkPlan.scala:127)\\n\\tat org.apache.spark.sql.execution.QueryExecution.toRdd$lzycompute(QueryExecution.scala:83)\\n\\tat org.apache.spark.sql.execution.QueryExecution.toRdd(QueryExecution.scala:81)\\n\\tat org.apache.spark.sql.DataFrameWriter$$anonfun$runCommand$1.apply(DataFrameWriter.scala:676)\\n\\tat org.apache.spark.sql.DataFrameWriter$$anonfun$runCommand$1.apply(DataFrameWriter.scala:676)\\n\\tat org.apache.spark.sql.execution.SQLExecution$$anonfun$withNewExecutionId$1.apply(SQLExecution.scala:80)\\n\\tat org.apache.spark.sql.execution.SQLExecution$.withSQLConfPropagated(SQLExecution.scala:127)\\n\\tat org.apache.spark.sql.execution.SQLExecution$.withNewExecutionId(SQLExecution.scala:75)\\n\\tat org.apache.spark.sql.DataFrameWriter.runCommand(DataFrameWriter.scala:676)\\n\\tat org.apache.spark.sql.DataFrameWriter.saveToV1Source(DataFrameWriter.scala:285)\\n\\tat org.apache.spark.sql.DataFrameWriter.save(DataFrameWriter.scala:271)\\n\\tat org.apache.spark.sql.DataFrameWriter.save(DataFrameWriter.scala:229)\\n\\tat org.apache.spark.sql.DataFrameWriter.csv(DataFrameWriter.scala:664)\\n\\tat $line212243659938.$read$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw.<init>(<console>:60)\\n\\tat $line212243659938.$read$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw.<init>(<console>:77)\\n\\tat $line212243659938.$read$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw.<init>(<console>:79)\\n\\tat $line212243659938.$read$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw.<init>(<console>:81)\\n\\tat $line212243659938.$read$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw.<init>(<console>:83)\\n\\tat $line212243659938.$read$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw.<init>(<console>:85)\\n\\tat $line212243659938.$read$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw.<init>(<console>:87)\\n\\tat $line212243659938.$read$$iw$$iw$$iw$$iw$$iw$$iw$$iw.<init>(<console>:89)\\n\\tat $line212243659938.$read$$iw$$iw$$iw$$iw$$iw$$iw.<init>(<console>:91)\\n\\tat $line212243659938.$read$$iw$$iw$$iw$$iw$$iw.<init>(<console>:93)\\n\\tat $line212243659938.$read$$iw$$iw$$iw$$iw.<init>(<console>:95)\\n\\tat $line212243659938.$read$$iw$$iw$$iw.<init>(<console>:97)\\n\\tat $line212243659938.$read$$iw$$iw.<init>(<console>:99)\\n\\tat $line212243659938.$read$$iw.<init>(<console>:101)\\n\\tat $line212243659938.$read.<init>(<console>:103)\\n\\tat $line212243659938.$read$.<init>(<console>:107)\\n\\tat $line212243659938.$read$.<clinit>(<console>)\\n\\tat $line212243659938.$eval$.$print$lzycompute(<console>:7)\\n\\tat $line212243659938.$eval$.$print(<console>:6)\\n\\tat $line212243659938.$eval.$print(<console>)\\n\\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\\n\\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\\n\\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\n\\tat java.lang.reflect.Method.invoke(Method.java:498)\\n\\tat scala.tools.nsc.interpreter.IMain$ReadEvalPrint.call(IMain.scala:793)\\n\\tat scala.tools.nsc.interpreter.IMain$Request.loadAndRun(IMain.scala:1054)\\n\\tat scala.tools.nsc.interpreter.IMain$WrappedRequest$$anonfun$loadAndRunReq$1.apply(IMain.scala:645)\\n\\tat scala.tools.nsc.interpreter.IMain$WrappedRequest$$anonfun$loadAndRunReq$1.apply(IMain.scala:644)\\n\\tat scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)\\n\\tat scala.reflect.internal.util.AbstractFileClassLoader.asContext(AbstractFileClassLoader.scala:19)\\n\\tat scala.tools.nsc.interpreter.IMain$WrappedRequest.loadAndRunReq(IMain.scala:644)\\n\\tat scala.tools.nsc.interpreter.IMain.interpret(IMain.scala:576)\\n\\tat scala.tools.nsc.interpreter.IMain.interpret(IMain.scala:572)\\n\\tat org.apache.zeppelin.spark.SparkScala211Interpreter.scalaInterpret(SparkScala211Interpreter.scala:129)\\n\\tat org.apache.zeppelin.spark.BaseSparkScalaInterpreter$$anonfun$_interpret$1$1.apply(BaseSparkScalaInterpreter.scala:120)\\n\\tat org.apache.zeppelin.spark.BaseSparkScalaInterpreter$$anonfun$_interpret$1$1.apply(BaseSparkScalaInterpreter.scala:111)\\n\\tat scala.util.DynamicVariable.withValue(DynamicVariable.scala:58)\\n\\tat scala.Console$.withOut(Console.scala:65)\\n\\tat org.apache.zeppelin.spark.BaseSparkScalaInterpreter._interpret$1(BaseSparkScalaInterpreter.scala:111)\\n\\tat org.apache.zeppelin.spark.BaseSparkScalaInterpreter.interpret(BaseSparkScalaInterpreter.scala:146)\\n\\tat org.apache.zeppelin.spark.SparkInterpreter.internalInterpret(SparkInterpreter.java:183)\\n\\tat org.apache.zeppelin.interpreter.AbstractInterpreter.interpret(AbstractInterpreter.java:47)\\n\\tat org.apache.zeppelin.interpreter.LazyOpenInterpreter.interpret(LazyOpenInterpreter.java:110)\\n\\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$InterpretJob.jobRun(RemoteInterpreterServer.java:852)\\n\\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$InterpretJob.jobRun(RemoteInterpreterServer.java:744)\\n\\tat org.apache.zeppelin.scheduler.Job.run(Job.java:172)\\n\\tat org.apache.zeppelin.scheduler.AbstractScheduler.runJob(AbstractScheduler.java:132)\\n\\tat org.apache.zeppelin.scheduler.FIFOScheduler.lambda$runJobInScheduler$0(FIFOScheduler.java:42)\\n\\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\\n\\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\\n\\tat java.lang.Thread.run(Thread.java:748)\\n\",\"time\":1},\"Coimbra\":{\"type\":\"List\",\"length\":2,\"value\":[{\"type\":\"java.lang.String\",\"value\":\"Coimbra\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Travanca do Mondego\",\"time\":0}],\"time\":1},\"finalDataSet\":{\"type\":\"org.apache.spark.sql.Dataset\",\"value\":{\"getStorageLevel()\":{\"type\":\"org.apache.spark.storage.StorageLevel\",\"value\":\"StorageLevel(disk, memory, deserialized, 1 replicas)\"},\"schema()\":{\"type\":\"org.apache.spark.sql.types.StructType\",\"length\":36,\"value\":[{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"hotel_ID\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"Reserve_ID\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"pais\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"estado_reserva\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"room_ID\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"tipo_quarto\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"rate_plan\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"data_reserva\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"data_chegada\"},\"dataType\":{\"type\":null,\"value\":\"date\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"data_partida\"},\"dataType\":{\"type\":null,\"value\":\"date\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"num_noites\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"ocupacao\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"adultos\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"criancas\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"bebes\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"preco_euros\"},\"dataType\":{\"type\":null,\"value\":\"double\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"quantidade\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_maxima\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_max_adultos\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_max_criancas\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_max_bebes\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"localizacao\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"area_localizacao\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"estrelas\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"idade_max_criancas\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"idade_max_bebes\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"hora_max_checkin\"},\"dataType\":{\"type\":null,\"value\":\"timestamp\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"qtd_quartos\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"is_holiday\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"event_Location\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"event\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"city\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"temperature_avg\"},\"dataType\":{\"type\":null,\"value\":\"double\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"temperature_tmax\"},\"dataType\":{\"type\":null,\"value\":\"double\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"temperature_min\"},\"dataType\":{\"type\":null,\"value\":\"double\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"precipitation_avg\"},\"dataType\":{\"type\":null,\"value\":\"double\"}}}]}},\"time\":0},\"joinEventos\":{\"type\":\"org.apache.spark.sql.Dataset\",\"value\":{\"getStorageLevel()\":{\"type\":\"org.apache.spark.storage.StorageLevel\",\"value\":\"StorageLevel(1 replicas)\"},\"schema()\":{\"type\":\"org.apache.spark.sql.types.StructType\",\"length\":34,\"value\":[{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"hotel_ID\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"Reserve_ID\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"pais\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"estado_reserva\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"room_ID\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"Q_tipo_quarto\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"rate_plan\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"data_reserva\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"data_chegada\"},\"dataType\":{\"type\":null,\"value\":\"date\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"data_partida\"},\"dataType\":{\"type\":null,\"value\":\"date\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"num_noites\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"ocupacao\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"adultos\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"criancas\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"bebes\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"preco_euros\"},\"dataType\":{\"type\":null,\"value\":\"double\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"T_tipo_quarto\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"quantidade\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_maxima\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_max_adultos\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_max_criancas\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_max_bebes\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"localizacao\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"area_localizacao\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"estrelas\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"idade_max_criancas\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"idade_max_bebes\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"hora_max_checkin\"},\"dataType\":{\"type\":null,\"value\":\"timestamp\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"qtd_quartos\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":false},\"name\":{\"type\":null,\"value\":\"is_holiday\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"Location\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"Event\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"start_Date\"},\"dataType\":{\"type\":null,\"value\":\"date\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"end_date\"},\"dataType\":{\"type\":null,\"value\":\"date\"}}}]}},\"time\":1},\"Funchal\":{\"type\":\"List\",\"length\":2,\"value\":[{\"type\":\"java.lang.String\",\"value\":\"Câmara de Lobos\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Funchal\",\"time\":0}],\"time\":1},\"Porto\":{\"type\":\"List\",\"length\":10,\"value\":[{\"type\":\"java.lang.String\",\"value\":\"Ermesinde\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Gaia\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Lousada\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Madalena\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Porto\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"União de Freguesias do Centro\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Valongo\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Valpedre - Penafiel\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Vila Meã\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Vila Nova de Gaia\",\"time\":0}],\"time\":1},\"dfWithArea\":{\"type\":\"org.apache.spark.sql.Dataset\",\"value\":{\"getStorageLevel()\":{\"type\":\"org.apache.spark.storage.StorageLevel\",\"value\":\"StorageLevel(disk, memory, deserialized, 1 replicas)\"},\"schema()\":{\"type\":\"org.apache.spark.sql.types.StructType\",\"length\":8,\"value\":[{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"hotel_ID\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"localizacao\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"estrelas\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"idade_max_criancas\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"idade_max_bebes\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"hora_max_checkin\"},\"dataType\":{\"type\":null,\"value\":\"timestamp\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"qtd_quartos\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"area_localizacao\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}}]}},\"time\":1},\"initialTipologias\":{\"type\":\"org.apache.spark.sql.Dataset\",\"value\":{\"getStorageLevel()\":{\"type\":\"org.apache.spark.storage.StorageLevel\",\"value\":\"StorageLevel(1 replicas)\"},\"schema()\":{\"type\":\"org.apache.spark.sql.types.StructType\",\"length\":14,\"value\":[{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"hotel_ID\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"room_ID\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"tipo_quarto\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"quantidade\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_maxima\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_minima\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_max_adultos\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_min_adultos\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_max_criancas\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_min_criancas\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_max_bebes\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_max_camas_extra\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_max_camas_extra_criancas\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_max_bercos_extra\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}}]}},\"time\":1},\"res88\":{\"type\":\"Unit\"},\"InitialQuartosReservadosTable\":{\"type\":\"String\",\"value\":\"InitialQuartosReservados\",\"time\":0},\"Praia_da_Vitoria\":{\"type\":\"List\",\"length\":1,\"value\":[{\"type\":\"java.lang.String\",\"value\":\"Praia da Vitória\",\"time\":0}],\"time\":1},\"Evora\":{\"type\":\"List\",\"length\":1,\"value\":[{\"type\":\"java.lang.String\",\"value\":\"Evora\",\"time\":0}],\"time\":1},\"joinMeteoTemp\":{\"type\":\"org.apache.spark.sql.Dataset\",\"value\":{\"getStorageLevel()\":{\"type\":\"org.apache.spark.storage.StorageLevel\",\"value\":\"StorageLevel(1 replicas)\"},\"schema()\":{\"type\":\"org.apache.spark.sql.types.StructType\",\"length\":39,\"value\":[{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"hotel_ID\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"Reserve_ID\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"pais\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"estado_reserva\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"room_ID\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"Q_tipo_quarto\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"rate_plan\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"data_reserva\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"data_chegada\"},\"dataType\":{\"type\":null,\"value\":\"date\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"data_partida\"},\"dataType\":{\"type\":null,\"value\":\"date\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"num_noites\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"ocupacao\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"adultos\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"criancas\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"bebes\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"preco_euros\"},\"dataType\":{\"type\":null,\"value\":\"double\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"T_tipo_quarto\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"quantidade\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_maxima\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_max_adultos\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_max_criancas\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_max_bebes\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"localizacao\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"area_localizacao\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"estrelas\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"idade_max_criancas\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"idade_max_bebes\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"hora_max_checkin\"},\"dataType\":{\"type\":null,\"value\":\"timestamp\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"qtd_quartos\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":false},\"name\":{\"type\":null,\"value\":\"is_holiday\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"Location\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"Event\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"start_Date\"},\"dataType\":{\"type\":null,\"value\":\"date\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"end_date\"},\"dataType\":{\"type\":null,\"value\":\"date\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"city\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"tavg\"},\"dataType\":{\"type\":null,\"value\":\"double\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"tmax\"},\"dataType\":{\"type\":null,\"value\":\"double\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"tmin\"},\"dataType\":{\"type\":null,\"value\":\"double\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"prcp\"},\"dataType\":{\"type\":null,\"value\":\"double\"}}}]}},\"time\":0},\"joinTipologiaAndHotel\":{\"type\":\"org.apache.spark.sql.Dataset\",\"value\":{\"getStorageLevel()\":{\"type\":\"org.apache.spark.storage.StorageLevel\",\"value\":\"StorageLevel(1 replicas)\"},\"schema()\":{\"type\":\"org.apache.spark.sql.types.StructType\",\"length\":29,\"value\":[{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"hotel_ID\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"Reserve_ID\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"pais\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"estado_reserva\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"room_ID\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"Q_tipo_quarto\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"rate_plan\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"data_reserva\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"data_chegada\"},\"dataType\":{\"type\":null,\"value\":\"date\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"data_partida\"},\"dataType\":{\"type\":null,\"value\":\"date\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"num_noites\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"ocupacao\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"adultos\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"criancas\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"bebes\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"preco_euros\"},\"dataType\":{\"type\":null,\"value\":\"double\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"T_tipo_quarto\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"quantidade\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_maxima\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_max_adultos\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_max_criancas\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_max_bebes\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"localizacao\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"area_localizacao\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"estrelas\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"idade_max_criancas\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"idade_max_bebes\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"hora_max_checkin\"},\"dataType\":{\"type\":null,\"value\":\"timestamp\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"qtd_quartos\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}}]}},\"time\":1},\"mindata_data_partida\":{\"type\":\"Object\",\"value\":\"2022-01-02\",\"time\":1},\"HotelTable\":{\"type\":\"String\",\"value\":\"Hotel\",\"time\":0},\"Sintra\":{\"type\":\"List\",\"length\":1,\"value\":[{\"type\":\"java.lang.String\",\"value\":\"Sintra\",\"time\":0}],\"time\":0},\"res82\":{\"type\":\"Unit\"},\"mindata_data_chegada\":{\"type\":\"Object\",\"value\":\"2022-01-01\",\"time\":1},\"Acores\":{\"type\":\"List\",\"length\":6,\"value\":[{\"type\":\"java.lang.String\",\"value\":\"Açores\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Furnas S. Miguel - Açores\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Lagoa, Açores\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Ponta Delgada\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"São Vicente Ferreira, São Miguel - Açores\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Velas\",\"time\":0}],\"time\":4},\"Alcobaca\":{\"type\":\"List\",\"length\":3,\"value\":[{\"type\":\"java.lang.String\",\"value\":\"Alcanena\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Alcobaça\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"São Martinho do Porto\",\"time\":0}],\"time\":1},\"initialQuartosReservados\":{\"type\":\"org.apache.spark.sql.Dataset\",\"value\":{\"getStorageLevel()\":{\"type\":\"org.apache.spark.storage.StorageLevel\",\"value\":\"StorageLevel(1 replicas)\"},\"schema()\":{\"type\":\"org.apache.spark.sql.types.StructType\",\"length\":17,\"value\":[{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"hotel_ID\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"Reserve_ID\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"pais\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"estado_reserva\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"room_ID\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"tipo_quarto\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"rate_plan\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"data_reserva\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"num_noites\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"Quantidade de quartos\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"ocupacao\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"adultos\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"criancas\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"bebes\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"preco_euros\"},\"dataType\":{\"type\":null,\"value\":\"double\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"data_chegada\"},\"dataType\":{\"type\":null,\"value\":\"date\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"data_partida\"},\"dataType\":{\"type\":null,\"value\":\"date\"}}}]}},\"time\":1},\"minEndDate\":{\"type\":\"Object\",\"value\":\"2022-06-11\",\"time\":0},\"res85\":{\"type\":\"Unit\"},\"duplicateReservations\":{\"type\":\"org.apache.spark.sql.Dataset\",\"value\":{\"getStorageLevel()\":{\"type\":\"org.apache.spark.storage.StorageLevel\",\"value\":\"StorageLevel(1 replicas)\"},\"schema()\":{\"type\":\"org.apache.spark.sql.types.StructType\",\"length\":2,\"value\":[{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"Reserve_ID\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":false},\"name\":{\"type\":null,\"value\":\"count\"},\"dataType\":{\"type\":null,\"value\":\"long\"}}}]}},\"time\":1},\"res79\":{\"type\":\"Unit\"},\"Alijo\":{\"type\":\"List\",\"length\":2,\"value\":[{\"type\":\"java.lang.String\",\"value\":\"Alijó\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Pinhão - Alijó\",\"time\":0}],\"time\":0},\"csvEventos\":{\"type\":\"String\",\"value\":\"/data/tp/Eventos.csv\",\"time\":0},\"sc\":{\"ref\":\"spark.sparkContext\"},\"mindata_reserva\":{\"type\":\"Object\",\"value\":\"01/01/2022 10:17\",\"time\":1},\"csvTipologias\":{\"type\":\"String\",\"value\":\"/data/tp/Tipologias.csv\",\"time\":4},\"initalHotel\":{\"type\":\"org.apache.spark.sql.Dataset\",\"value\":{\"getStorageLevel()\":{\"type\":\"org.apache.spark.storage.StorageLevel\",\"value\":\"StorageLevel(1 replicas)\"},\"schema()\":{\"type\":\"org.apache.spark.sql.types.StructType\",\"length\":8,\"value\":[{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"hotel_ID\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"localizacao\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"estrelas\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"idade_max_criancas\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"idade_max_bebes\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"hora_max_checkin\"},\"dataType\":{\"type\":null,\"value\":\"timestamp\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"qtd_quartos\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"area_localizacao\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}}]}},\"time\":2},\"Lagos\":{\"type\":\"List\",\"length\":3,\"value\":[{\"type\":\"java.lang.String\",\"value\":\"Lagos\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Portimão\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Sagres\",\"time\":0}],\"time\":1},\"saveJoins\":false,\"maxStartDate\":{\"type\":\"Object\",\"value\":\"2023-11-05\",\"time\":1},\"Carnaxide\":{\"type\":\"List\",\"length\":4,\"value\":[{\"type\":\"java.lang.String\",\"value\":\"Almada\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Carnaxide\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Charneca de Caparica\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Lisboa\",\"time\":0}],\"time\":1},\"minStartDate\":{\"type\":\"Object\",\"value\":\"2022-06-01\",\"time\":0},\"InitialHotelTable\":{\"type\":\"String\",\"value\":\"InitialHotel\",\"time\":0},\"InitialTipologiasTable\":{\"type\":\"String\",\"value\":\"InitialTipologias\",\"time\":1},\"newHotel\":{\"type\":\"org.apache.spark.sql.Dataset\",\"value\":{\"getStorageLevel()\":{\"type\":\"org.apache.spark.storage.StorageLevel\",\"value\":\"StorageLevel(1 replicas)\"},\"schema()\":{\"type\":\"org.apache.spark.sql.types.StructType\",\"length\":8,\"value\":[{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"hotel_ID\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"localizacao\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"estrelas\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"idade_max_criancas\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"idade_max_bebes\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"hora_max_checkin\"},\"dataType\":{\"type\":null,\"value\":\"timestamp\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"qtd_quartos\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"area_localizacao\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}}]}},\"time\":0},\"csvMeteorologia\":{\"type\":\"String\",\"value\":\"/data/tp/Meteorologia.csv\",\"time\":1},\"res84\":{\"type\":\"Unit\"},\"newTipologias\":{\"type\":\"org.apache.spark.sql.Dataset\",\"value\":{\"getStorageLevel()\":{\"type\":\"org.apache.spark.storage.StorageLevel\",\"value\":\"StorageLevel(1 replicas)\"},\"schema()\":{\"type\":\"org.apache.spark.sql.types.StructType\",\"length\":11,\"value\":[{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"hotel_ID\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"room_ID\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"tipo_quarto\"},\"dataType\":{\"type\":null,\"value\":\"string\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"quantidade\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_maxima\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_max_adultos\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_max_criancas\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_max_bebes\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_max_camas_extra\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_max_camas_extra_criancas\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"capacidade_max_bercos_extra\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}}]}},\"time\":1},\"Guimaraes\":{\"type\":\"List\",\"length\":1,\"value\":[{\"type\":\"java.lang.String\",\"value\":\"Guimarães\",\"time\":0}],\"time\":0},\"TipologiasTable\":{\"type\":\"String\",\"value\":\"Tipologias\",\"time\":0},\"res87\":{\"type\":\"Unit\"},\"smallReservationsHotels\":{\"type\":\"org.apache.spark.sql.Dataset\",\"value\":{\"getStorageLevel()\":{\"type\":\"org.apache.spark.storage.StorageLevel\",\"value\":\"StorageLevel(1 replicas)\"},\"schema()\":{\"type\":\"org.apache.spark.sql.types.StructType\",\"length\":2,\"value\":[{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":true},\"name\":{\"type\":null,\"value\":\"hotel_ID\"},\"dataType\":{\"type\":null,\"value\":\"integer\"}}},{\"type\":\"org.apache.spark.sql.types.StructField\",\"value\":{\"nullable\":{\"type\":null,\"value\":false},\"name\":{\"type\":null,\"value\":\"count\"},\"dataType\":{\"type\":null,\"value\":\"long\"}}}]}},\"time\":0},\"getAreaUDF\":{\"type\":\"org.apache.spark.sql.expressions.UserDefinedFunction\",\"value\":{\"inputTypes\":{\"type\":\"Option[Seq[org.apache.spark.sql.types.DataType]]\",\"value\":\"Some(List(StringType))\",\"time\":1},\"dataType\":{\"type\":\"org.apache.spark.sql.types.DataType\",\"value\":\"StringType\",\"time\":1},\"f\":{\"type\":\"AnyRef\",\"value\":\"<function1>\",\"time\":0}},\"time\":8},\"maxdata_data_partida\":{\"type\":\"Object\",\"value\":\"2024-05-31\",\"time\":1},\"csvQuartosReservados\":{\"type\":\"String\",\"value\":\"/data/tp/QuartosReservados.csv\",\"time\":0},\"maxdata_data_chegada\":{\"type\":\"Object\",\"value\":\"2024-04-05\",\"time\":0},\"csvFacilities\":{\"type\":\"String\",\"value\":\"/data/tp/Facilities.csv\",\"time\":0},\"res81\":{\"type\":\"Unit\"},\"EventosTable\":{\"type\":\"String\",\"value\":\"Eventos\",\"time\":1},\"Viana_do_Castelo\":{\"type\":\"List\",\"length\":4,\"value\":[{\"type\":\"java.lang.String\",\"value\":\"Seixas - Caminha\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Valença, Viana do Castelo\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Viana do Castelo\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Vila Praia de Âncora\",\"time\":0}],\"time\":1},\"Carcavelos\":{\"type\":\"List\",\"length\":3,\"value\":[{\"type\":\"java.lang.String\",\"value\":\"Carcavelos\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Cascais\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Estoril\",\"time\":0}],\"time\":0},\"Chaves\":{\"type\":\"List\",\"length\":4,\"value\":[{\"type\":\"java.lang.String\",\"value\":\"Chaves\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Lamego\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Mesão Frio\",\"time\":0},{\"type\":\"java.lang.String\",\"value\":\"Valdigem - Lamego\",\"time\":0}],\"time\":0},\"maxdata_reserva\":{\"type\":\"Object\",\"value\":\"31/12/2022 22:54\",\"time\":0}},\"errors\":[]}\n---ztools-scala---\n---ztools-sql---\n{\n  \"tables\" : [ {\n    \"name\" : \"facilitestable\",\n    \"databaseName\" : \"\",\n    \"columns\" : [ ],\n    \"error\" : \"ClassCastException: [Ljava.lang.Object; cannot be cast to [Lorg.apache.spark.sql.Row;\"\n  }, {\n    \"name\" : \"initialhoteltable\",\n    \"databaseName\" : \"\",\n    \"columns\" : [ ],\n    \"error\" : \"ClassCastException: [Ljava.lang.Object; cannot be cast to [Lorg.apache.spark.sql.Row;\"\n  }, {\n    \"name\" : \"initialtipologiastable\",\n    \"databaseName\" : \"\",\n    \"columns\" : [ ],\n    \"error\" : \"ClassCastException: [Ljava.lang.Object; cannot be cast to [Lorg.apache.spark.sql.Row;\"\n  }, {\n    \"name\" : \"initialquartosreservadostable\",\n    \"databaseName\" : \"\",\n    \"columns\" : [ ],\n    \"error\" : \"ClassCastException: [Ljava.lang.Object; cannot be cast to [Lorg.apache.spark.sql.Row;\"\n  }, {\n    \"name\" : \"feriadostable\",\n    \"databaseName\" : \"\",\n    \"columns\" : [ ],\n    \"error\" : \"ClassCastException: [Ljava.lang.Object; cannot be cast to [Lorg.apache.spark.sql.Row;\"\n  }, {\n    \"name\" : \"meteorologiatable\",\n    \"databaseName\" : \"\",\n    \"columns\" : [ ],\n    \"error\" : \"ClassCastException: [Ljava.lang.Object; cannot be cast to [Lorg.apache.spark.sql.Row;\"\n  }, {\n    \"name\" : \"eventostable\",\n    \"databaseName\" : \"\",\n    \"columns\" : [ ],\n    \"error\" : \"ClassCastException: [Ljava.lang.Object; cannot be cast to [Lorg.apache.spark.sql.Row;\"\n  }, {\n    \"name\" : \"hoteltable\",\n    \"databaseName\" : \"\",\n    \"columns\" : [ ],\n    \"error\" : \"ClassCastException: [Ljava.lang.Object; cannot be cast to [Lorg.apache.spark.sql.Row;\"\n  }, {\n    \"name\" : \"tipologiastable\",\n    \"databaseName\" : \"\",\n    \"columns\" : [ ],\n    \"error\" : \"ClassCastException: [Ljava.lang.Object; cannot be cast to [Lorg.apache.spark.sql.Row;\"\n  }, {\n    \"name\" : \"eventos\",\n    \"databaseName\" : \"\",\n    \"columns\" : [ {\n      \"name\" : \"Location\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"Event\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"start_Date\",\n      \"columnType\" : \"date\",\n      \"description\" : null\n    }, {\n      \"name\" : \"end_date\",\n      \"columnType\" : \"date\",\n      \"description\" : null\n    } ],\n    \"error\" : null\n  }, {\n    \"name\" : \"facilities\",\n    \"databaseName\" : \"\",\n    \"columns\" : [ {\n      \"name\" : \"Hotel ID\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"Facility ID\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"Nome\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    } ],\n    \"error\" : null\n  }, {\n    \"name\" : \"feriados\",\n    \"databaseName\" : \"\",\n    \"columns\" : [ {\n      \"name\" : \"date\",\n      \"columnType\" : \"date\",\n      \"description\" : null\n    }, {\n      \"name\" : \"day\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"dayOfWeek\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"month\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"trimester\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"year\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"is_holiday\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"portugueseWeekName\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    } ],\n    \"error\" : null\n  }, {\n    \"name\" : \"finaldataset\",\n    \"databaseName\" : \"\",\n    \"columns\" : [ {\n      \"name\" : \"hotel_ID\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"Reserve_ID\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"pais\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"estado_reserva\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"room_ID\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"tipo_quarto\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"rate_plan\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"data_reserva\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"data_chegada\",\n      \"columnType\" : \"date\",\n      \"description\" : null\n    }, {\n      \"name\" : \"data_partida\",\n      \"columnType\" : \"date\",\n      \"description\" : null\n    }, {\n      \"name\" : \"num_noites\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"ocupacao\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"adultos\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"criancas\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"bebes\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"preco_euros\",\n      \"columnType\" : \"double\",\n      \"description\" : null\n    }, {\n      \"name\" : \"quantidade\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"capacidade_maxima\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"capacidade_max_adultos\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"capacidade_max_criancas\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"capacidade_max_bebes\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"localizacao\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"area_localizacao\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"estrelas\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"idade_max_criancas\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"idade_max_bebes\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"hora_max_checkin\",\n      \"columnType\" : \"timestamp\",\n      \"description\" : null\n    }, {\n      \"name\" : \"qtd_quartos\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"is_holiday\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"event_Location\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"event\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"city\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"temperature_avg\",\n      \"columnType\" : \"double\",\n      \"description\" : null\n    }, {\n      \"name\" : \"temperature_tmax\",\n      \"columnType\" : \"double\",\n      \"description\" : null\n    }, {\n      \"name\" : \"temperature_min\",\n      \"columnType\" : \"double\",\n      \"description\" : null\n    }, {\n      \"name\" : \"precipitation_avg\",\n      \"columnType\" : \"double\",\n      \"description\" : null\n    } ],\n    \"error\" : null\n  }, {\n    \"name\" : \"hotel\",\n    \"databaseName\" : \"\",\n    \"columns\" : [ {\n      \"name\" : \"hotel_ID\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"localizacao\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"estrelas\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"idade_max_criancas\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"idade_max_bebes\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"hora_max_checkin\",\n      \"columnType\" : \"timestamp\",\n      \"description\" : null\n    }, {\n      \"name\" : \"qtd_quartos\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"area_localizacao\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    } ],\n    \"error\" : null\n  }, {\n    \"name\" : \"initialhotel\",\n    \"databaseName\" : \"\",\n    \"columns\" : [ {\n      \"name\" : \"hotel_ID\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"localizacao\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"estrelas\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"idade_max_criancas\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"idade_max_bebes\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"hora_max_checkin\",\n      \"columnType\" : \"timestamp\",\n      \"description\" : null\n    }, {\n      \"name\" : \"qtd_quartos\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"area_localizacao\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    } ],\n    \"error\" : null\n  }, {\n    \"name\" : \"initialquartosreservados\",\n    \"databaseName\" : \"\",\n    \"columns\" : [ {\n      \"name\" : \"hotel_ID\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"Reserve_ID\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"pais\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"estado_reserva\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"room_ID\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"tipo_quarto\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"rate_plan\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"data_reserva\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"num_noites\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"Quantidade de quartos\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"ocupacao\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"adultos\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"criancas\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"bebes\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"preco_euros\",\n      \"columnType\" : \"double\",\n      \"description\" : null\n    }, {\n      \"name\" : \"data_chegada\",\n      \"columnType\" : \"date\",\n      \"description\" : null\n    }, {\n      \"name\" : \"data_partida\",\n      \"columnType\" : \"date\",\n      \"description\" : null\n    } ],\n    \"error\" : null\n  }, {\n    \"name\" : \"initialtipologias\",\n    \"databaseName\" : \"\",\n    \"columns\" : [ {\n      \"name\" : \"hotel_ID\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"room_ID\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"tipo_quarto\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"quantidade\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"capacidade_maxima\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"capacidade_minima\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"capacidade_max_adultos\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"capacidade_min_adultos\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"capacidade_max_criancas\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"capacidade_min_criancas\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"capacidade_max_bebes\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"capacidade_max_camas_extra\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"capacidade_max_camas_extra_criancas\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"capacidade_max_bercos_extra\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    } ],\n    \"error\" : null\n  }, {\n    \"name\" : \"joineddataset\",\n    \"databaseName\" : \"\",\n    \"columns\" : [ {\n      \"name\" : \"hotel_ID\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"Reserve_ID\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"pais\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"estado_reserva\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"room_ID\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"Q_tipo_quarto\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"rate_plan\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"data_reserva\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"data_chegada\",\n      \"columnType\" : \"date\",\n      \"description\" : null\n    }, {\n      \"name\" : \"data_partida\",\n      \"columnType\" : \"date\",\n      \"description\" : null\n    }, {\n      \"name\" : \"num_noites\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"ocupacao\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"adultos\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"criancas\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"bebes\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"preco_euros\",\n      \"columnType\" : \"double\",\n      \"description\" : null\n    }, {\n      \"name\" : \"T_tipo_quarto\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"quantidade\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"capacidade_maxima\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"capacidade_max_adultos\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"capacidade_max_criancas\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"capacidade_max_bebes\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"localizacao\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"area_localizacao\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"estrelas\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"idade_max_criancas\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"idade_max_bebes\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"hora_max_checkin\",\n      \"columnType\" : \"timestamp\",\n      \"description\" : null\n    }, {\n      \"name\" : \"qtd_quartos\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"is_holiday\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"Location\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"Event\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"start_Date\",\n      \"columnType\" : \"date\",\n      \"description\" : null\n    }, {\n      \"name\" : \"end_date\",\n      \"columnType\" : \"date\",\n      \"description\" : null\n    }, {\n      \"name\" : \"city\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"tavg\",\n      \"columnType\" : \"double\",\n      \"description\" : null\n    }, {\n      \"name\" : \"tmax\",\n      \"columnType\" : \"double\",\n      \"description\" : null\n    }, {\n      \"name\" : \"tmin\",\n      \"columnType\" : \"double\",\n      \"description\" : null\n    }, {\n      \"name\" : \"prcp\",\n      \"columnType\" : \"double\",\n      \"description\" : null\n    } ],\n    \"error\" : null\n  }, {\n    \"name\" : \"joineventos\",\n    \"databaseName\" : \"\",\n    \"columns\" : [ {\n      \"name\" : \"hotel_ID\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"Reserve_ID\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"pais\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"estado_reserva\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"room_ID\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"Q_tipo_quarto\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"rate_plan\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"data_reserva\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"data_chegada\",\n      \"columnType\" : \"date\",\n      \"description\" : null\n    }, {\n      \"name\" : \"data_partida\",\n      \"columnType\" : \"date\",\n      \"description\" : null\n    }, {\n      \"name\" : \"num_noites\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"ocupacao\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"adultos\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"criancas\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"bebes\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"preco_euros\",\n      \"columnType\" : \"double\",\n      \"description\" : null\n    }, {\n      \"name\" : \"T_tipo_quarto\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"quantidade\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"capacidade_maxima\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"capacidade_max_adultos\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"capacidade_max_criancas\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"capacidade_max_bebes\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"localizacao\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"area_localizacao\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"estrelas\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"idade_max_criancas\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"idade_max_bebes\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"hora_max_checkin\",\n      \"columnType\" : \"timestamp\",\n      \"description\" : null\n    }, {\n      \"name\" : \"qtd_quartos\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"is_holiday\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"Location\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"Event\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"start_Date\",\n      \"columnType\" : \"date\",\n      \"description\" : null\n    }, {\n      \"name\" : \"end_date\",\n      \"columnType\" : \"date\",\n      \"description\" : null\n    } ],\n    \"error\" : null\n  }, {\n    \"name\" : \"joinferiados\",\n    \"databaseName\" : \"\",\n    \"columns\" : [ {\n      \"name\" : \"hotel_ID\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"Reserve_ID\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"pais\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"estado_reserva\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"room_ID\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"Q_tipo_quarto\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"rate_plan\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"data_reserva\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"data_chegada\",\n      \"columnType\" : \"date\",\n      \"description\" : null\n    }, {\n      \"name\" : \"data_partida\",\n      \"columnType\" : \"date\",\n      \"description\" : null\n    }, {\n      \"name\" : \"num_noites\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"ocupacao\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"adultos\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"criancas\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"bebes\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"preco_euros\",\n      \"columnType\" : \"double\",\n      \"description\" : null\n    }, {\n      \"name\" : \"T_tipo_quarto\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"quantidade\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"capacidade_maxima\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"capacidade_max_adultos\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"capacidade_max_criancas\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"capacidade_max_bebes\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"localizacao\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"area_localizacao\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"estrelas\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"idade_max_criancas\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"idade_max_bebes\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"hora_max_checkin\",\n      \"columnType\" : \"timestamp\",\n      \"description\" : null\n    }, {\n      \"name\" : \"qtd_quartos\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"is_holiday\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    } ],\n    \"error\" : null\n  }, {\n    \"name\" : \"joinmeteotemp\",\n    \"databaseName\" : \"\",\n    \"columns\" : [ {\n      \"name\" : \"hotel_ID\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"Reserve_ID\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"pais\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"estado_reserva\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"room_ID\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"Q_tipo_quarto\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"rate_plan\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"data_reserva\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"data_chegada\",\n      \"columnType\" : \"date\",\n      \"description\" : null\n    }, {\n      \"name\" : \"data_partida\",\n      \"columnType\" : \"date\",\n      \"description\" : null\n    }, {\n      \"name\" : \"num_noites\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"ocupacao\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"adultos\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"criancas\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"bebes\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"preco_euros\",\n      \"columnType\" : \"double\",\n      \"description\" : null\n    }, {\n      \"name\" : \"T_tipo_quarto\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"quantidade\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"capacidade_maxima\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"capacidade_max_adultos\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"capacidade_max_criancas\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"capacidade_max_bebes\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"localizacao\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"area_localizacao\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"estrelas\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"idade_max_criancas\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"idade_max_bebes\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"hora_max_checkin\",\n      \"columnType\" : \"timestamp\",\n      \"description\" : null\n    }, {\n      \"name\" : \"qtd_quartos\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"is_holiday\",\n      \"columnType\" : \"int\",\n      \"description\" : null\n    }, {\n      \"name\" : \"Location\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"Event\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"start_Date\",\n      \"columnType\" : \"date\",\n      \"description\" : null\n    }, {\n      \"name\" : \"end_date\",\n      \"columnType\" : \"date\",\n      \"description\" : null\n    }, {\n      \"name\" : \"city\",\n      \"columnType\" : \"string\",\n      \"description\" : null\n    }, {\n      \"name\" : \"tavg\",\n      \"columnType\" : \"double\",\n      \"description\" : null\n    }, {"
     },
     {
      "type": "HTML",
      "data": "<div class=\"result-alert alert-warning\" role=\"alert\"><button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button><strong>Output is truncated</strong> to 102400 bytes. Learn more about <strong>ZEPPELIN_INTERPRETER_OUTPUT_LIMIT</strong></div>"
     }
    ]
   },
   "dateFinished": "2023-05-14 17:20:11.483"
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {}
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "// FILE #1",
   "id": "",
   "dateCreated": "2023-05-08 15:32:19.702",
   "config": {},
   "dateStarted": "2023-05-14 17:20:11.518",
   "dateUpdated": "2023-05-14 17:20:12.128",
   "dateFinished": "2023-05-14 17:20:12.127",
   "results": {
    "code": "SUCCESS",
    "msg": []
   }
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {
      "inlay": {}
     }
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "import org.apache.spark.sql.DataFrame\nimport org.apache.spark.sql.functions._\n\nval InitialHotelTable = \"InitialHotel\"\nval InitialTipologiasTable = \"InitialTipologias\"\nval InitialQuartosReservadosTable = \"InitialQuartosReservados\"\n\nval FacilitesTable = \"Facilities\"\nval HotelTable = \"Hotel\"\nval TipologiasTable = \"Tipologias\"\nval QuartosReservadosTable = \"QuartosReservados\"\nval FeriadosTable = \"Feriados\"\nval MeteorologiaTable = \"Meteorologia\"\nval EventosTable = \"Eventos\"\n\nval joinFolder = \"/data/leitura\"\n\ndef saveDataFrame(df: DataFrame, name: String): Unit = {\n    df.coalesce(1) // Print into a single file\n            .write\n            .mode(\"overwrite\")\n            .option(\"delimiter\", \";\")\n            .option(\"header\", true) // Maintain Headers\n            .csv(s\"$joinFolder/$name\") // Write to csv\n}",
   "id": "",
   "dateCreated": "2023-04-30 20:03:05.806",
   "config": {
    "tableHide": false
   },
   "dateStarted": "2023-05-14 17:20:12.128",
   "dateUpdated": "2023-05-14 17:20:12.373",
   "dateFinished": "2023-05-14 17:20:12.372",
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "import org.apache.spark.sql.DataFrame\nimport org.apache.spark.sql.functions._\n\u001b[1m\u001b[34mInitialHotelTable\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m = InitialHotel\n\u001b[1m\u001b[34mInitialTipologiasTable\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m = InitialTipologias\n\u001b[1m\u001b[34mInitialQuartosReservadosTable\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m = InitialQuartosReservados\n\u001b[1m\u001b[34mFacilitesTable\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m = Facilities\n\u001b[1m\u001b[34mHotelTable\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m = Hotel\n\u001b[1m\u001b[34mTipologiasTable\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m = Tipologias\n\u001b[1m\u001b[34mQuartosReservadosTable\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m = QuartosReservados\n\u001b[1m\u001b[34mFeriadosTable\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m = Feriados\n\u001b[1m\u001b[34mMeteorologiaTable\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m = Meteorologia\n\u001b[1m\u001b[34mEventosTable\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m = Eventos\n\u001b[1m\u001b[34mjoinFolder\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m =..."
     }
    ]
   }
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {
      "inlay": {},
      "ZTOOLS_DATA_FRAMES": [
       {
        "columns": [
         {
          "name": "Location",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "Event",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "start_Date",
          "tpe": {
           "presentableName": "date"
          },
          "nullable": true
         },
         {
          "name": "end_date",
          "tpe": {
           "presentableName": "date"
          },
          "nullable": true
         }
        ]
       }
      ]
     }
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "val csvFacilities = \"/data/tp/Facilities.csv\" // Facilities file\n\nval df = spark.read.format(\"csv\") // Read CSV\n        .option(\"header\", \"true\") // First line is a header\n        .option(\"inferSchema\", \"true\") // infer the data types \n        .option(\"delimiter\", \";\") // Columns separated by ';\n        .option(\"trim\", \"true\") // remove whitespaces from both ends of columns and val\n        .load(csvFacilities)\n\ndf.createOrReplaceTempView(FacilitesTable)\ndf.cache()\n//df.printSchema()\n//df.show()",
   "id": "",
   "dateCreated": "2023-04-23 23:44:45.859",
   "config": {
    "tableHide": false
   },
   "dateStarted": "2023-05-14 17:20:12.381",
   "dateUpdated": "2023-05-14 17:20:12.689",
   "dateFinished": "2023-05-14 17:20:12.689",
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "\u001b[1m\u001b[34mcsvFacilities\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m = /data/tp/Facilities.csv\n\u001b[1m\u001b[34mdf\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [Hotel ID: int, Facility ID: int ... 1 more field]\n\u001b[1m\u001b[34mres92\u001b[0m: \u001b[1m\u001b[32mdf.type\u001b[0m = [Hotel ID: int, Facility ID: int ... 1 more field]\n"
     }
    ]
   }
  },
  {
   "settings": {
    "params": {},
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "val csvHotel = \"/data/tp/Hotel.csv\" // Hotels file\nval Acores = List(\"Açores\", \"Furnas S. Miguel - Açores\", \"Lagoa, Açores\", \"Ponta Delgada\", \"São Vicente Ferreira, São Miguel - Açores\", \"Velas\")\nval Albufeira = List(\"Albufeira - Algarve\", \"Alte\", \"Benafim\", \"Conceição de Tavira\", \"Fuseta\", \"Olhão\", \"Olhos D'Água\", \"São Brás de Alportel\", \"Silves\", \"Tavira\", \"Vilamoura\")\nval Alcobaca = List(\"Alcanena\", \"Alcobaça\", \"São Martinho do Porto\")\nval Alijo = List(\"Alijó\", \"Pinhão - Alijó\")\nval Amares = List(\"Amares\", \"Braga\", \"Póvoa de Lanhoso\", \"Tomar\", \"Torres Novas\")\nval Aveiro = List(\"Aveiro\")\nval Batalha = List(\"Batalha\", \"Nazaré\")\nval Braganca = List(\"Alto dos Lombos\")\nval Campo_Maior = List(\"Campo Maior\")\nval Carnaxide = List(\"Almada\", \"Carnaxide\", \"Charneca de Caparica\", \"Lisboa\")\nval Carcavelos = List(\"Carcavelos\", \"Cascais\", \"Estoril\")\nval Castelo_Branco = List(\"Castelo Branco\", \"Covilhã\", \"Sabugueiro / Seia\", \"Vale do Peso\")\nval Chaves = List(\"Chaves\", \"Lamego\", \"Mesão Frio\", \"Valdigem - Lamego\")\nval Coimbra = List(\"Coimbra\", \"Travanca do Mondego\")\nval Elvas = List(\"ELVAS\")\nval Espinho = List(\"Espinho\", \"Ovar\", \"Viseu\")\nval Evora = List(\"Evora\")\nval Funchal = List(\"Câmara de Lobos\", \"Funchal\")\nval Guimaraes = List(\"Guimarães\")\nval Lagos = List(\"Lagos\", \"Portimão\", \"Sagres\")\nval Maia = List(\"Maia\")\nval Moncao = List(\"Monção\", \"Valença do Minho\")\nval Obidos = List(\"Obidos\")\nval Porto = List(\"Ermesinde\", \"Gaia\", \"Lousada\", \"Madalena\", \"Porto\", \"União de Freguesias do Centro\", \"Valongo\", \"Valpedre - Penafiel\", \"Vila Meã\", \"Vila Nova de Gaia\")\nval Praia_da_Vitoria = List(\"Praia da Vitória\")\nval Sintra = List(\"Sintra\")\nval Viana_do_Castelo = List(\"Seixas - Caminha\", \"Valença, Viana do Castelo\", \"Viana do Castelo\", \"Vila Praia de Âncora\")\n\ndef getArea(value: String) = value match {\n    case x if Acores.contains(x) => \"Açores\"\n    case x if Albufeira.contains(x) => \"Albufeira\"\n    case x if Alcobaca.contains(x) => \"Alcobaça\"\n    case x if Alijo.contains(x) => \"Alijó\"\n    case x if Amares.contains(x) => \"Amares\"\n    case x if Aveiro.contains(x) => \"Aveiro\"\n    case x if Batalha.contains(x) => \"Batalha\"\n    case x if Braganca.contains(x) => \"Bragança\"\n    case x if Campo_Maior.contains(x) => \"Campo Maior\"\n    case x if Carnaxide.contains(x) => \"Carnaxide\"\n    case x if Carcavelos.contains(x) => \"Carcavelos\"\n    case x if Castelo_Branco.contains(x) => \"Castelo Branco\"\n    case x if Chaves.contains(x) => \"Chaves\"\n    case x if Coimbra.contains(x) => \"Coimbra\"\n    case x if Elvas.contains(x) => \"Elvas\"\n    case x if Espinho.contains(x) => \"Espinho\"\n    case x if Evora.contains(x) => \"Evora\"\n    case x if Funchal.contains(x) => \"Funchal\"\n    case x if Guimaraes.contains(x) => \"Guimarães\"\n    case x if Lagos.contains(x) => \"Lagos\"\n    case x if Maia.contains(x) => \"Maia\"\n    case x if Moncao.contains(x) => \"Monção\"\n    case x if Obidos.contains(x) => \"Obidos\"\n    case x if Porto.contains(x) => \"Porto\"\n    case x if Praia_da_Vitoria.contains(x) => \"Praia da Vitória\"\n    case x if Sintra.contains(x) => \"Sintra\"\n    case x if Viana_do_Castelo.contains(x) => \"Viana do Castelo\"\n    case _ => value\n}\n\nval getAreaUDF = udf((value: String) => getArea(value))\n\nval df = spark.read.format(\"csv\")\n        .option(\"header\", \"true\")\n        .option(\"inferSchema\", \"true\")\n        .option(\"delimiter\", \";\")\n        .load(csvHotel)\n        .withColumnRenamed(\"Hotel ID\", \"hotel_ID\")\n        .withColumnRenamed(\"Localização\", \"localizacao\")\n        .withColumnRenamed(\"Estrelas\", \"estrelas\")\n        .withColumnRenamed(\"Idade Máxima de Crianças (Anos)\", \"idade_max_criancas\")\n        .withColumnRenamed(\"Idade Máxima de Bebés (Meses)\", \"idade_max_bebes\")\n        .withColumnRenamed(\"Hora máxima de check-in\", \"hora_max_checkin\")\n        .withColumnRenamed(\"Quantidade de quartos\", \"qtd_quartos\")\n        .withColumn(\"hora_max_checkin\", to_timestamp(col(\"hora_max_checkin\")))\n\nval dfWithArea = df.withColumn(\"area_localizacao\", getAreaUDF(col(\"localizacao\")))\n\ndfWithArea.createOrReplaceTempView(InitialHotelTable)\ndfWithArea.cache()\n//dfWithArea.printSchema()\n//dfWithArea.describe().show()\n//dfWithArea.show()",
   "config": {},
   "dateStarted": "2023-05-14 17:20:12.696",
   "dateUpdated": "2023-05-14 17:20:13.173",
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "\u001b[1m\u001b[34mcsvHotel\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m = /data/tp/Hotel.csv\n\u001b[1m\u001b[34mAcores\u001b[0m: \u001b[1m\u001b[32mList[String]\u001b[0m = List(Açores, Furnas S. Miguel - Açores, Lagoa, Açores, Ponta Delgada, São Vicente Ferreira, São Miguel - Açores, Velas)\n\u001b[1m\u001b[34mAlbufeira\u001b[0m: \u001b[1m\u001b[32mList[String]\u001b[0m = List(Albufeira - Algarve, Alte, Benafim, Conceição de Tavira, Fuseta, Olhão, Olhos D'Água, São Brás de Alportel, Silves, Tavira, Vilamoura)\n\u001b[1m\u001b[34mAlcobaca\u001b[0m: \u001b[1m\u001b[32mList[String]\u001b[0m = List(Alcanena, Alcobaça, São Martinho do Porto)\n\u001b[1m\u001b[34mAlijo\u001b[0m: \u001b[1m\u001b[32mList[String]\u001b[0m = List(Alijó, Pinhão - Alijó)\n\u001b[1m\u001b[34mAmares\u001b[0m: \u001b[1m\u001b[32mList[String]\u001b[0m = List(Amares, Braga, Póvoa de Lanhoso, Tomar, Torres Novas)\n\u001b[1m\u001b[34mAveiro\u001b[0m: \u001b[1m\u001b[32mList[String]\u001b[0m = List(Aveiro)\n\u001b[1m\u001b[34mBatalha\u001b[0m: \u001b[1m\u001b..."
     }
    ]
   },
   "dateFinished": "2023-05-14 17:20:13.173"
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {
      "ZTOOLS_DATA_FRAMES": [
       {
        "columns": [
         {
          "name": "Location",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "Event",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "start_Date",
          "tpe": {
           "presentableName": "date"
          },
          "nullable": true
         },
         {
          "name": "end_date",
          "tpe": {
           "presentableName": "date"
          },
          "nullable": true
         }
        ]
       }
      ]
     }
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "val csvTipologias = \"/data/tp/Tipologias.csv\" // Tipologias file\n\nval df = spark.read.format(\"csv\")\n        .option(\"header\", \"true\")\n        .option(\"inferSchema\", \"true\")\n        .option(\"delimiter\", \";\")\n        .option(\"trim\", \"true\")\n        .load(csvTipologias)\n        .withColumnRenamed(\"Hotel ID\", \"hotel_ID\")\n        .withColumnRenamed(\"Room ID\", \"room_ID\")\n        .withColumnRenamed(\"Tipo de quarto\", \"tipo_quarto\")\n        .withColumnRenamed(\"Quantidade\", \"quantidade\")\n        .withColumnRenamed(\"Capacidade máxima\", \"capacidade_maxima\")\n        .withColumnRenamed(\"Capacidade mínima\", \"capacidade_minima\") // !\n        .withColumnRenamed(\"Capacidade máxima de adultos\", \"capacidade_max_adultos\")\n        .withColumnRenamed(\"Capacidade mínima de adultos\", \"capacidade_min_adultos\") // !\n        .withColumnRenamed(\"Capacidade máxima de crianças\", \"capacidade_max_criancas\")\n        .withColumnRenamed(\"Capacidade mínima de crianças\", \"capacidade_min_criancas\") // !\n        .withColumnRenamed(\"Capacidade máxima de bebés\", \"capacidade_max_bebes\")\n        .withColumnRenamed(\"Capacidade máxima de camas extra\", \"capacidade_max_camas_extra\") // !\n        .withColumnRenamed(\"Capacidade máxima de camas extra (crianças)\", \"capacidade_max_camas_extra_criancas\") // !\n        .withColumnRenamed(\"Capacidade máxima de berços extra\", \"capacidade_max_bercos_extra\") // !\n\ndf.createOrReplaceTempView(InitialTipologiasTable)\ndf.cache()\n//df.describe().show()\n//df.printSchema()\n//df.show()",
   "config": {},
   "dateStarted": "2023-05-14 17:20:13.184",
   "dateUpdated": "2023-05-14 17:20:13.497",
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "\u001b[1m\u001b[34mcsvTipologias\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m = /data/tp/Tipologias.csv\n\u001b[1m\u001b[34mdf\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [hotel_ID: int, room_ID: int ... 12 more fields]\n\u001b[1m\u001b[34mres94\u001b[0m: \u001b[1m\u001b[32mdf.type\u001b[0m = [hotel_ID: int, room_ID: int ... 12 more fields]\n"
     }
    ]
   },
   "dateFinished": "2023-05-14 17:20:13.497"
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {
      "ZTOOLS_DATA_FRAMES": [
       {
        "columns": [
         {
          "name": "Location",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "Event",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "start_Date",
          "tpe": {
           "presentableName": "date"
          },
          "nullable": true
         },
         {
          "name": "end_date",
          "tpe": {
           "presentableName": "date"
          },
          "nullable": true
         }
        ]
       }
      ]
     }
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "val csvQuartosReservados = \"/data/tp/QuartosReservados.csv\" // Quartos_Reservados File\n\nval df = spark.read.format(\"csv\")\n        .option(\"header\", \"true\")\n        .option(\"inferSchema\", \"true\")\n        .option(\"delimiter\", \";\")\n        .option(\"trim\", \"true\") // remove whitespaces from both ends of columns and val\n        .load(csvQuartosReservados)\n        .withColumnRenamed(\"Hotel ID\", \"hotel_ID\")\n        .withColumnRenamed(\"Reserve ID\", \"Reserve_ID\")\n        .withColumnRenamed(\"País\", \"pais\")\n        .withColumnRenamed(\"Estado da reserva\", \"estado_reserva\")\n        .withColumnRenamed(\"Room ID\", \"room_ID\")\n        .withColumnRenamed(\"Tipo de Quarto\", \"tipo_quarto\") // !\n        .withColumnRenamed(\"RatePlan\", \"rate_plan\")\n        .withColumnRenamed(\"Data da reserva\", \"data_reserva\")\n        .withColumn(\"data_chegada\", to_date(col(\"Data chegada\"), \"dd/MM/yyyy\"))\n        .drop(\"Data chegada\")\n        .withColumn(\"data_partida\", to_date(col(\"Data de partida\"), \"dd/MM/yyyy\"))\n        .drop(\"Data de partida\")\n        .withColumnRenamed(\"Número de noites\", \"num_noites\")\n        .withColumnRenamed(\"Ocupação\", \"ocupacao\")\n        .withColumnRenamed(\"Adultos\", \"adultos\")\n        .withColumnRenamed(\"Crianças\", \"criancas\")\n        .withColumnRenamed(\"Bebés\", \"bebes\") // !\n        .withColumnRenamed(\"Preço (€)\", \"preco_euros\")\n\nval mindata_reserva = df.select(min(\"data_reserva\")).first()(0)\nval maxdata_reserva = df.select(max(\"data_reserva\")).first()(0)\nprintln(s\"Minimum data_reserva date: $mindata_reserva\")\nprintln(s\"Maximum data_reserva date: $maxdata_reserva\")\n\nval mindata_data_chegada = df.select(min(\"data_chegada\")).first()(0)\nval maxdata_data_chegada = df.select(max(\"data_chegada\")).first()(0)\nprintln(s\"Minimum data_chegada date: $mindata_data_chegada\")\nprintln(s\"Maximum data_chegada date: $maxdata_data_chegada\")\n\nval mindata_data_partida = df.select(min(\"data_partida\")).first()(0)\nval maxdata_data_partida = df.select(max(\"data_partida\")).first()(0)\nprintln(s\"Minimum data_partida date: $mindata_data_partida\")\nprintln(s\"Maximum data_partida date: $maxdata_data_partida\")\n\ndf.createOrReplaceTempView(InitialQuartosReservadosTable)\ndf.cache()\n//df.printSchema()\n//df.show()\n//df.select(\"pais\", \"estado_reserva\", \"rate_plan\", \"data_reserva\", \"data_chegada\", \"data_partida\", \"num_noites\", \"ocupacao\", \"adultos\", \"criancas\", \"preco_euros\").describe().show()",
   "config": {},
   "dateStarted": "2023-05-14 17:20:13.505",
   "dateUpdated": "2023-05-14 17:20:14.324",
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "Minimum data_reserva date: 01/01/2022 10:17\nMaximum data_reserva date: 31/12/2022 22:54\nMinimum data_chegada date: 2022-01-01\nMaximum data_chegada date: 2024-04-05\nMinimum data_partida date: 2022-01-02\nMaximum data_partida date: 2024-05-31\n\u001b[1m\u001b[34mcsvQuartosReservados\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m = /data/tp/QuartosReservados.csv\n\u001b[1m\u001b[34mdf\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [hotel_ID: int, Reserve_ID: int ... 15 more fields]\n\u001b[1m\u001b[34mmindata_reserva\u001b[0m: \u001b[1m\u001b[32mAny\u001b[0m = 01/01/2022 10:17\n\u001b[1m\u001b[34mmaxdata_reserva\u001b[0m: \u001b[1m\u001b[32mAny\u001b[0m = 31/12/2022 22:54\n\u001b[1m\u001b[34mmindata_data_chegada\u001b[0m: \u001b[1m\u001b[32mAny\u001b[0m = 2022-01-01\n\u001b[1m\u001b[34mmaxdata_data_chegada\u001b[0m: \u001b[1m\u001b[32mAny\u001b[0m = 2024-04-05\n\u001b[1m\u001b[34mmindata_data_partida\u001b[0m: \u001b[1m\u001b[32mAny\u001b[0m = 2022-01-02\n\u001b[1m\u001b[34mmaxdata_data_partida\u001b[0m: \u001b[1m\u001b[32mAny\u001b[0m = 2024-05-31\n\u001b[1m\u001b[34mres95\u001b[0m: \u001b[1m\u001b[32mdf.type\u001b[0m = [hotel_ID: int, Reserve_ID: int ... 15 more fields]\n"
     }
    ]
   },
   "dateFinished": "2023-05-14 17:20:14.324"
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {
      "ZTOOLS_DATA_FRAMES": [
       {
        "columns": [
         {
          "name": "Location",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "Event",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "start_Date",
          "tpe": {
           "presentableName": "date"
          },
          "nullable": true
         },
         {
          "name": "end_date",
          "tpe": {
           "presentableName": "date"
          },
          "nullable": true
         }
        ]
       }
      ]
     }
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "val csvFeriados = \"/data/tp/Feriados.csv\" // Holidays file\n\nval df = spark.read.format(\"csv\")\n        .option(\"header\", \"true\") // set this to true if your CSV file has header\n        .option(\"inferSchema\", \"true\") // set this to true if you want Spark to infer the schema\n        .option(\"delimiter\", \";\") // ; is the separator\n        .option(\"trim\", \"true\") // remove whitespaces from both ends of columns and val\n        .load(csvFeriados)\n        .withColumn(\"date\", to_date(col(\"date\"), \"dd/MM/yyyy\"))\n\nval minDate = df.select(min(\"date\")).first()(0)\nval maxDate = df.select(max(\"date\")).first()(0)\nprintln(s\"Minimum start date: $minDate\")\nprintln(s\"Maximum start date: $maxDate\")\n\ndf.createOrReplaceTempView(FeriadosTable)\ndf.cache()\n//df.printSchema()\n//df.describe().show()\n//df.show()",
   "config": {},
   "dateStarted": "2023-05-14 17:20:14.335",
   "dateUpdated": "2023-05-14 17:20:14.719",
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "Minimum start date: 2022-01-01\nMaximum start date: 2023-12-31\n\u001b[1m\u001b[34mcsvFeriados\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m = /data/tp/Feriados.csv\n\u001b[1m\u001b[34mdf\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [date: date, day: int ... 6 more fields]\n\u001b[1m\u001b[34mminDate\u001b[0m: \u001b[1m\u001b[32mAny\u001b[0m = 2022-01-01\n\u001b[1m\u001b[34mmaxDate\u001b[0m: \u001b[1m\u001b[32mAny\u001b[0m = 2023-12-31\n\u001b[1m\u001b[34mres96\u001b[0m: \u001b[1m\u001b[32mdf.type\u001b[0m = [date: date, day: int ... 6 more fields]\n"
     }
    ]
   },
   "dateFinished": "2023-05-14 17:20:14.719"
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {
      "ZTOOLS_DATA_FRAMES": [
       {
        "columns": [
         {
          "name": "Location",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "Event",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "start_Date",
          "tpe": {
           "presentableName": "date"
          },
          "nullable": true
         },
         {
          "name": "end_date",
          "tpe": {
           "presentableName": "date"
          },
          "nullable": true
         }
        ]
       }
      ]
     }
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "val csvMeteorologia = \"/data/tp/Meteorologia.csv\" // Holidays file\n\nval df = spark.read.format(\"csv\")\n        .option(\"header\", \"true\") // set this to true if your CSV file has header\n        .option(\"inferSchema\", \"true\") // set this to true if you want Spark to infer the schema\n        .option(\"delimiter\", \";\") // ; is the separator\n        .option(\"trim\", \"true\") // remove whitespaces from both ends of columns and val\n        .load(csvMeteorologia)\n        .withColumn(\"date\", to_date(col(\"date\"), \"dd/MM/yyyy\"))\n\nval minDate = df.select(min(\"date\")).first()(0)\nval maxDate = df.select(max(\"date\")).first()(0)\nprintln(s\"Minimum start date: $minDate\")\nprintln(s\"Maximum start date: $maxDate\")\n\ndf.createOrReplaceTempView(MeteorologiaTable)\ndf.cache()\n//df.printSchema()\n//df.describe().show()\n//df.show()",
   "config": {},
   "dateStarted": "2023-05-14 17:20:14.727",
   "dateUpdated": "2023-05-14 17:20:15.174",
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "Minimum start date: 2022-01-01\nMaximum start date: 2023-04-23\n\u001b[1m\u001b[34mcsvMeteorologia\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m = /data/tp/Meteorologia.csv\n\u001b[1m\u001b[34mdf\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [date: date, tavg: double ... 8 more fields]\n\u001b[1m\u001b[34mminDate\u001b[0m: \u001b[1m\u001b[32mAny\u001b[0m = 2022-01-01\n\u001b[1m\u001b[34mmaxDate\u001b[0m: \u001b[1m\u001b[32mAny\u001b[0m = 2023-04-23\n\u001b[1m\u001b[34mres97\u001b[0m: \u001b[1m\u001b[32mdf.type\u001b[0m = [date: date, tavg: double ... 8 more fields]\n"
     }
    ]
   },
   "dateFinished": "2023-05-14 17:20:15.174"
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {
      "ZTOOLS_DATA_FRAMES": [
       {
        "columns": [
         {
          "name": "Location",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "Event",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "start_Date",
          "tpe": {
           "presentableName": "date"
          },
          "nullable": true
         },
         {
          "name": "end_date",
          "tpe": {
           "presentableName": "date"
          },
          "nullable": true
         }
        ]
       }
      ]
     }
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "val csvEventos = \"/data/tp/Eventos.csv\" // Holidays file\n\nval df = spark.read.format(\"csv\")\n        .option(\"header\", \"true\") // set this to true if your CSV file has header\n        .option(\"inferSchema\", \"true\") // set this to true if you want Spark to infer the schema\n        .option(\"delimiter\", \";\") // ; is the separator\n        .option(\"trim\", \"true\") // remove whitespaces from both ends of columns and values\n        .load(csvEventos)\n        .withColumn(\"end_date\", to_date(trim(col(\"end_date\")), \"dd/MM/yyyy\"))\n        .withColumn(\"start_Date\", to_date(col(\"start_Date\"), \"dd/MM/yyyy\"))\n\nval minStartDate = df.select(min(\"start_Date\")).first()(0)\nval maxStartDate = df.select(max(\"start_Date\")).first()(0)\nval minEndDate = df.select(min(\"end_date\")).first()(0)\nval maxEndDate = df.select(max(\"end_date\")).first()(0)\n\nprintln(s\"Minimum start date: $minStartDate\")\nprintln(s\"Maximum start date: $maxStartDate\")\nprintln(s\"Minimum end date: $minEndDate\")\nprintln(s\"Maximum end date: $maxEndDate\")\n\ndf.createOrReplaceTempView(EventosTable)\ndf.cache()\n//df.printSchema()\n//df.describe().show()\n//df.show()",
   "config": {},
   "dateStarted": "2023-05-14 17:20:15.181",
   "dateUpdated": "2023-05-14 17:20:15.701",
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "Minimum start date: 2022-06-01\nMaximum start date: 2023-11-05\nMinimum end date: 2022-06-11\nMaximum end date: 2023-11-05\n\u001b[1m\u001b[34mcsvEventos\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m = /data/tp/Eventos.csv\n\u001b[1m\u001b[34mdf\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [Location: string, Event: string ... 2 more fields]\n\u001b[1m\u001b[34mminStartDate\u001b[0m: \u001b[1m\u001b[32mAny\u001b[0m = 2022-06-01\n\u001b[1m\u001b[34mmaxStartDate\u001b[0m: \u001b[1m\u001b[32mAny\u001b[0m = 2023-11-05\n\u001b[1m\u001b[34mminEndDate\u001b[0m: \u001b[1m\u001b[32mAny\u001b[0m = 2022-06-11\n\u001b[1m\u001b[34mmaxEndDate\u001b[0m: \u001b[1m\u001b[32mAny\u001b[0m = 2023-11-05\n\u001b[1m\u001b[34mres98\u001b[0m: \u001b[1m\u001b[32mdf.type\u001b[0m = [Location: string, Event: string ... 2 more fields]\n"
     }
    ]
   },
   "dateFinished": "2023-05-14 17:20:15.701"
  },
  {
   "settings": {
    "params": {},
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "/* \n-----------------------------------------------------------------------------------------\n                                After Reading Transformations\n-----------------------------------------------------------------------------------------\n*/",
   "config": {},
   "dateStarted": "2023-05-14 17:20:15.710",
   "dateUpdated": "2023-05-14 17:20:15.849",
   "results": {
    "code": "SUCCESS",
    "msg": []
   },
   "dateFinished": "2023-05-14 17:20:15.849"
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {
      "ZTOOLS_DATA_FRAMES": [
       {
        "columns": [
         {
          "name": "hotel_ID",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "localizacao",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "estrelas",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "idade_max_criancas",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "idade_max_bebes",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "hora_max_checkin",
          "tpe": {
           "presentableName": "timestamp"
          },
          "nullable": true
         },
         {
          "name": "qtd_quartos",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "area_localizacao",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         }
        ]
       },
       {
        "columns": [
         {
          "name": "hotel_ID",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "localizacao",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "estrelas",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "idade_max_criancas",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "idade_max_bebes",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "hora_max_checkin",
          "tpe": {
           "presentableName": "timestamp"
          },
          "nullable": true
         },
         {
          "name": "qtd_quartos",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "area_localizacao",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         }
        ]
       }
      ]
     }
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "// Initial transformation of Hotel table\nvar initalHotel = spark.sql(\"SELECT * FROM InitialHotel\")\n\nvar newHotel = spark.sql(\n    \"\"\"\n        SELECT * FROM InitialHotel AS H\n        WHERE EXISTS (\n            SELECT 1 FROM InitialQuartosReservados qr\n            WHERE h.hotel_ID = qr.hotel_ID\n        )\n    \"\"\")\n\nnewHotel.createOrReplaceTempView(HotelTable)\n\nprintln(\"Total lines removed: \" + (initalHotel.count() - newHotel.count()))",
   "config": {},
   "dateStarted": "2023-05-14 17:20:15.852",
   "dateUpdated": "2023-05-14 17:20:16.261",
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "Total lines removed: 57\n\u001b[1m\u001b[34minitalHotel\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [hotel_ID: int, localizacao: string ... 6 more fields]\n\u001b[1m\u001b[34mnewHotel\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [hotel_ID: int, localizacao: string ... 6 more fields]\n"
     }
    ]
   },
   "dateFinished": "2023-05-14 17:20:16.261"
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {
      "ZTOOLS_DATA_FRAMES": [
       {
        "columns": [
         {
          "name": "hotel_ID",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "room_ID",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "tipo_quarto",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "quantidade",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_maxima",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_minima",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_max_adultos",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_min_adultos",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_max_criancas",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_min_criancas",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_max_bebes",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_max_camas_extra",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_max_camas_extra_criancas",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_max_bercos_extra",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         }
        ]
       },
       {
        "columns": [
         {
          "name": "hotel_ID",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "room_ID",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "tipo_quarto",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "quantidade",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_maxima",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_max_adultos",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_max_criancas",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_max_bebes",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_max_camas_extra",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_max_camas_extra_criancas",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "capacidade_max_bercos_extra",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         }
        ]
       }
      ]
     }
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "// Initial transformation of Tipologias table\n\nval initialTipologias = spark.sql(s\"SELECT * FROM $InitialTipologiasTable\")\n\nval newTipologias = initialTipologias\n        .drop(\"capacidade_minima\")\n        .drop(\"capacidade_min_adultos\")\n        .drop(\"capacidade_min_criancas\")\n//        .drop(\"capacidade_max_camas_extra\")\n//        .drop(\"capacidade_max_camas_extra_criancas\")\n//        .drop(\"capacidade_max_bercos_extra\")\n\nnewTipologias.createOrReplaceTempView(TipologiasTable)\n\nprintln(\"Total lines removed: \" + (initialTipologias.count() - newTipologias.count()))",
   "config": {},
   "dateStarted": "2023-05-14 17:20:16.269",
   "dateUpdated": "2023-05-14 17:20:16.538",
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "Total lines removed: 0\n\u001b[1m\u001b[34minitialTipologias\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [hotel_ID: int, room_ID: int ... 12 more fields]\n\u001b[1m\u001b[34mnewTipologias\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [hotel_ID: int, room_ID: int ... 9 more fields]\n"
     }
    ]
   },
   "dateFinished": "2023-05-14 17:20:16.538"
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {
      "ZTOOLS_DATA_FRAMES": [
       {
        "columns": [
         {
          "name": "hotel_ID",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "Reserve_ID",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "pais",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "estado_reserva",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "room_ID",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "tipo_quarto",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "rate_plan",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "data_reserva",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "num_noites",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "Quantidade de quartos",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "ocupacao",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "adultos",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "criancas",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "bebes",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "preco_euros",
          "tpe": {
           "presentableName": "double"
          },
          "nullable": true
         },
         {
          "name": "data_chegada",
          "tpe": {
           "presentableName": "date"
          },
          "nullable": true
         },
         {
          "name": "data_partida",
          "tpe": {
           "presentableName": "date"
          },
          "nullable": true
         }
        ]
       }
      ]
     }
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "// Initial transformation of Quartos Reservados table\nval initialQuartosReservados = spark.sql(s\"SELECT * FROM $InitialQuartosReservadosTable\")\n\nval smallReservationsHotels = initialQuartosReservados\n        .groupBy(\"hotel_ID\").count()\n        .filter($\"count\" < 13)\n\nval newQuartosReservados = initialQuartosReservados\n        .filter($\"estado_reserva\".notEqual(\"CourtesyHold\")) // Remove reserve state \"CourtesyHold\" (5 reservations)\n        .filter(datediff($\"data_partida\", $\"data_chegada\") <= 14) // Remove lines where the booking has more than 14 days (115 reservations)\n        .join(smallReservationsHotels, Seq(\"hotel_ID\"), \"leftanti\") // Remove hotels that have less than 13 bookings (21 reservations)\n        .withColumn(\"preco_noite\", $\"preco_euros\" / $\"num_noites\")\n        .withColumn(\"preco_noite_adulto\", $\"preco_euros\" / $\"num_noites\" / $\"adultos\")\n        .withColumn(\"preco_noite_ocupacao\", $\"preco_euros\" / $\"num_noites\" / $\"ocupacao\")\n        .filter($\"preco_noite_ocupacao\" < 1000) // Remove bookings with price greater than 5000€ (5 reservations)\n\n//println(\"Count: \" + smallReservationsHotels.count())\n//smallReservationsHotels.show()\n\n//newQuartosReservados.cache()\n//newQuartosReservados.createOrReplaceTempView(QuartosReservadosTable)\n\nsaveDataFrame(newQuartosReservados, \"reservas\")\n\nprintln(\"Total lines removed: \" + (initialQuartosReservados.count() - newQuartosReservados.count()))\nprintln(\"Total lines: \" + newQuartosReservados.count())\n//newQuartosReservados.show()",
   "config": {},
   "dateStarted": "2023-05-14 17:20:16.547",
   "dateUpdated": "2023-05-14 17:20:21.217",
   "dateFinished": "2023-05-14 17:20:21.216",
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "Total lines removed: 140\nTotal lines: 24965\n\u001b[1m\u001b[34minitialQuartosReservados\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [hotel_ID: int, Reserve_ID: int ... 15 more fields]\n\u001b[1m\u001b[34msmallReservationsHotels\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [hotel_ID: int, count: bigint]\n\u001b[1m\u001b[34mnewQuartosReservados\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [hotel_ID: int, Reserve_ID: int ... 18 more fields]\n"
     }
    ]
   }
  }
 ],
 "name": "Zeppelin Notebook",
 "id": "",
 "noteParams": {},
 "noteForms": {},
 "angularObjects": {},
 "config": {
  "isZeppelinNotebookCronEnable": false,
  "looknfeel": "default",
  "personalizedMode": "false"
 },
 "info": {}
}