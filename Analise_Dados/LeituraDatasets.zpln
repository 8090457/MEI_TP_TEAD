{
 "paragraphs": [
  {
   "settings": {
    "params": {
     "bdtMeta": {}
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "// FILE #1",
   "id": "",
   "dateCreated": "2023-05-08 15:32:19.702",
   "config": {},
   "dateStarted": "2023-05-10 01:01:35.183",
   "dateUpdated": "2023-05-10 01:01:35.378",
   "dateFinished": "2023-05-10 01:01:35.378"
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {
      "inlay": {}
     }
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "import org.apache.spark.sql.DataFrame\nimport org.apache.spark.sql.functions._\nimport spark.implicits._\nimport org.apache.spark.sql.types._\nimport java.sql.Date\n\nval InitialHotelTable = \"InitialHotel\"\nval InitialTipologiasTable = \"InitialTipologias\"\nval InitialQuartosReservadosTable = \"InitialQuartosReservados\"\n\nval FacilitesTable = \"Facilities\"\nval HotelTable = \"Hotel\"\nval TipologiasTable = \"Tipologias\"\nval QuartosReservadosTable = \"QuartosReservados\"\nval FeriadosTable = \"Feriados\"\nval MeteorologiaTable = \"Meteorologia\"\nval EventosTable = \"Eventos\"",
   "id": "",
   "dateCreated": "2023-04-30 20:03:05.806",
   "config": {
    "tableHide": false
   },
   "dateStarted": "2023-05-10 01:01:35.379",
   "dateUpdated": "2023-05-10 01:01:36.956",
   "dateFinished": "2023-05-10 01:01:36.956"
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {
      "inlay": {}
     }
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "val csvFacilities = \"/data/tp/Facilities.csv\" // Facilities file\n\nval df = spark.read.format(\"csv\") // Read CSV\n        .option(\"header\", \"true\") // First line is a header\n        .option(\"inferSchema\", \"true\") // infer the data types \n        .option(\"delimiter\", \";\") // Columns separated by ';\n        .option(\"trim\", \"true\") // remove whitespaces from both ends of columns and val\n  .load(csvFacilities)\n\ndf.createOrReplaceTempView(FacilitesTable)\ndf.cache()\n//df.printSchema()\n//df.show()",
   "id": "",
   "dateCreated": "2023-04-23 23:44:45.859",
   "config": {
    "tableHide": false
   },
   "dateStarted": "2023-05-10 01:01:36.967",
   "dateUpdated": "2023-05-10 01:01:37.385",
   "dateFinished": "2023-05-10 01:01:37.385"
  },
  {
   "user": "anonymous",
   "config": {
    "colWidth": 12,
    "fontSize": 9,
    "enabled": true,
    "results": {},
    "editorSetting": {
     "language": "scala",
     "editOnDblClick": false,
     "completionKey": "TAB",
     "completionSupport": true
    },
    "editorMode": "ace/mode/scala",
    "tableHide": false,
    "editorHide": false
   },
   "settings": {
    "params": {
     "bdtMeta": {
      "inlay": {}
     }
    },
    "forms": {}
   },
   "apps": [],
   "jobName": "paragraph_1563110258183_1613653816",
   "id": "20190714-161738_1950435706",
   "dateCreated": "2019-07-14T16:17:38+0300",
   "status": "FINISHED",
   "progressUpdateIntervalMs": 500,
   "focus": true,
   "$$hashKey": "object:394",
   "text": "val csvHotel = \"/data/tp/Hotel.csv\" // Hotels file\nval Acores = List(\"Açores\", \"Furnas S. Miguel - Açores\", \"Lagoa, Açores\",\"Ponta Delgada\",\"São Vicente Ferreira, São Miguel - Açores\", \"Velas\")\nval Albufeira = List(\"Albufeira - Algarve\", \"Alte\", \"Benafim\", \"Conceição de Tavira\", \"Fuseta\", \"Olhão\", \"Olhos D'Água\", \"São Brás de Alportel\", \"Silves\", \"Tavira\", \"Vilamoura\")\nval Alcobaca = List(\"Alcanena\", \"Alcobaça\", \"São Martinho do Porto\")\nval Alijo = List(\"Alijó\", \"Pinhão - Alijó\")\nval Amares = List(\"Amares\", \"Braga\", \"Póvoa de Lanhoso\", \"Tomar\", \"Torres Novas\")\nval Aveiro = List(\"Aveiro\")\nval Batalha = List(\"Batalha\", \"Nazaré\")\nval Braganca = List(\"Alto dos Lombos\")\nval Campo_Maior = List(\"Campo Maior\")\nval Carnaxide = List(\"Almada\", \"Carnaxide\", \"Charneca de Caparica\", \"Lisboa\")\nval Carcavelos = List(\"Carcavelos\", \"Cascais\", \"Estoril\")\nval Castelo_Branco = List(\"Castelo Branco\", \"Covilhã\", \"Sabugueiro / Seia\", \"Vale do Peso\")\nval Chaves = List(\"Chaves\", \"Lamego\", \"Mesão Frio\", \"Valdigem - Lamego\")\nval Coimbra = List(\"Coimbra\", \"Travanca do Mondego\")\nval Elvas = List(\"ELVAS\")\nval Espinho = List(\"Espinho\", \"Ovar\", \"Viseu\")\nval Evora = List(\"Evora\")\nval Funchal = List(\"Câmara de Lobos\", \"Funchal\")\nval Guimaraes = List(\"Guimarães\")\nval Lagos = List(\"Lagos\", \"Portimão\", \"Sagres\")\nval Maia = List(\"Maia\")\nval Moncao = List(\"Monção\", \"Valença do Minho\")\nval Obidos = List(\"Obidos\")\nval Porto = List(\"Ermesinde\", \"Gaia\", \"Lousada\", \"Madalena\", \"Porto\", \"União de Freguesias do Centro\", \"Valongo\", \"Valpedre - Penafiel\", \"Vila Meã\", \"Vila Nova de Gaia\")\nval Praia_da_Vitoria = List(\"Praia da Vitória\")\nval Sintra = List(\"Sintra\")\nval Viana_do_Castelo = List(\"Seixas - Caminha\", \"Valença, Viana do Castelo\", \"Viana do Castelo\", \"Vila Praia de Âncora\")\n\ndef getArea(value: String)= value match {\n    case x if Acores.contains(x) => \"Açores\"\n    case x if Albufeira.contains(x) => \"Albufeira\"\n    case x if Alcobaca.contains(x) => \"Alcobaça\"\n    case x if Alijo.contains(x) => \"Alijó\"\n    case x if Amares.contains(x) => \"Amares\"\n    case x if Aveiro.contains(x) => \"Aveiro\"\n    case x if Batalha.contains(x) => \"Batalha\"\n    case x if Braganca.contains(x) => \"Bragança\"\n    case x if Campo_Maior.contains(x) => \"Campo Maior\"\n    case x if Carnaxide.contains(x) => \"Carnaxide\"\n    case x if Carcavelos.contains(x) => \"Carcavelos\"\n    case x if Castelo_Branco.contains(x) => \"Castelo Branco\"\n    case x if Chaves.contains(x) => \"Chaves\"\n    case x if Coimbra.contains(x) => \"Coimbra\"\n    case x if Elvas.contains(x) => \"Elvas\"\n    case x if Espinho.contains(x) => \"Espinho\"\n    case x if Evora.contains(x) => \"Evora\"\n    case x if Funchal.contains(x) => \"Funchal\"\n    case x if Guimaraes.contains(x) => \"Guimarães\"\n    case x if Lagos.contains(x) => \"Lagos\"\n    case x if Maia.contains(x) => \"Maia\"\n    case x if Moncao.contains(x) => \"Monção\"\n    case x if Obidos.contains(x) => \"Obidos\"\n    case x if Porto.contains(x) => \"Porto\"\n    case x if Praia_da_Vitoria.contains(x) => \"Praia da Vitória\"\n    case x if Sintra.contains(x) => \"Sintra\"\n    case x if Viana_do_Castelo.contains(x) => \"Viana do Castelo\"\n    case _ => value\n}\n\nval getAreaUDF = udf((value: String) => getArea(value))\n\nval df = spark.read.format(\"csv\")\n        .option(\"header\", \"true\")\n        .option(\"inferSchema\", \"true\")\n        .option(\"delimiter\", \";\")\n        .load(csvHotel)\n        .withColumnRenamed(\"Hotel ID\", \"hotel_ID\")\n        .withColumnRenamed(\"Localização\", \"localizacao\")\n        .withColumnRenamed(\"Estrelas\", \"estrelas\")\n        .withColumnRenamed(\"Idade Máxima de Crianças (Anos)\", \"idade_max_criancas\")\n        .withColumnRenamed(\"Idade Máxima de Bebés (Meses)\", \"idade_max_bebes\")\n        .withColumnRenamed(\"Hora máxima de check-in\", \"hora_max_checkin\")\n        .withColumnRenamed(\"Quantidade de quartos\", \"qtd_quartos\")\n        .withColumn(\"hora_max_checkin\", to_timestamp(col(\"hora_max_checkin\")))\n\nval dfWithArea = df.withColumn(\"area_localizacao\", getAreaUDF(col(\"localizacao\")))\n\ndfWithArea.createOrReplaceTempView(InitialHotelTable)\ndfWithArea.cache()\n//dfWithArea.printSchema()\n//dfWithArea.describe().show()\n//dfWithArea.show()",
   "dateStarted": "2023-05-10 01:01:37.392",
   "dateUpdated": "2023-05-10 01:01:38.868",
   "dateFinished": "2023-05-10 01:01:38.868"
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {
      "inlay": {}
     }
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "val csvTipologias = \"/data/tp/Tipologias.csv\" // Tipologias file\n\nval df = spark.read.format(\"csv\")\n        .option(\"header\", \"true\")\n        .option(\"inferSchema\", \"true\")\n        .option(\"delimiter\", \";\")\n        .option(\"trim\", \"true\")\n        .load(csvTipologias)\n        .withColumnRenamed(\"Hotel ID\", \"hotel_ID\")\n        .withColumnRenamed(\"Room ID\", \"room_ID\")\n        .withColumnRenamed(\"Tipo de quarto\", \"tipo_quarto\")\n        .withColumnRenamed(\"Quantidade\", \"quantidade\")\n        .withColumnRenamed(\"Capacidade máxima\", \"capacidade_maxima\")\n        .withColumnRenamed(\"Capacidade mínima\", \"capacidade_minima\") // !\n        .withColumnRenamed(\"Capacidade máxima de adultos\", \"capacidade_max_adultos\")\n        .withColumnRenamed(\"Capacidade mínima de adultos\", \"capacidade_min_adultos\") // !\n        .withColumnRenamed(\"Capacidade máxima de crianças\", \"capacidade_max_criancas\")\n        .withColumnRenamed(\"Capacidade mínima de crianças\", \"capacidade_min_criancas\") // !\n        .withColumnRenamed(\"Capacidade máxima de bebés\", \"capacidade_max_bebes\")\n        .withColumnRenamed(\"Capacidade máxima de camas extra\", \"capacidade_max_camas_extra\") // !\n        .withColumnRenamed(\"Capacidade máxima de camas extra (crianças)\", \"capacidade_max_camas_extra_criancas\") // !\n        .withColumnRenamed(\"Capacidade máxima de berços extra\", \"capacidade_max_bercos_extra\") // !\n\ndf.createOrReplaceTempView(InitialTipologiasTable)\ndf.cache()\n//df.describe().show()\n//df.printSchema()\n//df.show()",
   "id": "",
   "dateCreated": "2023-04-24 21:16:30.526",
   "config": {
    "tableHide": false
   },
   "dateStarted": "2023-05-10 01:01:38.878",
   "dateUpdated": "2023-05-10 01:01:39.272",
   "dateFinished": "2023-05-10 01:01:39.272"
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {}
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "val csvQuartosReservados= \"/data/tp/QuartosReservados.csv\" // Quartos_Reservados File\n\nval df = spark.read.format(\"csv\")\n        .option(\"header\", \"true\")\n        .option(\"inferSchema\", \"true\")\n        .option(\"delimiter\", \";\")\n        .option(\"trim\", \"true\") // remove whitespaces from both ends of columns and val\n        .load(csvQuartosReservados)\n        .withColumnRenamed(\"Hotel ID\", \"hotel_ID\")\n        .withColumnRenamed(\"Reserve ID\", \"Reserve_ID\")\n        .withColumnRenamed(\"País\", \"pais\")\n        .withColumnRenamed(\"Estado da reserva\", \"estado_reserva\")\n        .withColumnRenamed(\"Room ID\", \"room_ID\")\n        .withColumnRenamed(\"Tipo de Quarto\", \"tipo_quarto\") // !\n        .withColumnRenamed(\"RatePlan\", \"rate_plan\")\n        .withColumnRenamed(\"Data da reserva\", \"data_reserva\")\n        .withColumn(\"data_chegada\", to_date(col(\"Data chegada\"), \"dd/MM/yyyy\"))\n        .drop(\"Data chegada\")\n        .withColumn(\"data_partida\", to_date(col(\"Data de partida\"), \"dd/MM/yyyy\"))\n        .drop(\"Data de partida\")\n        .withColumnRenamed(\"Número de noites\", \"num_noites\")\n        .withColumnRenamed(\"Ocupação\", \"ocupacao\")\n        .withColumnRenamed(\"Adultos\", \"adultos\")\n        .withColumnRenamed(\"Crianças\", \"criancas\")\n        .withColumnRenamed(\"Bebés\", \"bebes\") // !\n        .withColumnRenamed(\"Preço (€)\", \"preco_euros\")\n\nval mindata_reserva = df.select(min(\"data_reserva\")).first()(0)\nval maxdata_reserva = df.select(max(\"data_reserva\")).first()(0)\nprintln(s\"Minimum data_reserva date: $mindata_reserva\")\nprintln(s\"Maximum data_reserva date: $maxdata_reserva\")\n\nval mindata_data_chegada = df.select(min(\"data_chegada\")).first()(0)\nval maxdata_data_chegada= df.select(max(\"data_chegada\")).first()(0)\nprintln(s\"Minimum data_chegada date: $mindata_data_chegada\")\nprintln(s\"Maximum data_chegada date: $maxdata_data_chegada\")\n\nval mindata_data_partida = df.select(min(\"data_partida\")).first()(0)\nval maxdata_data_partida= df.select(max(\"data_partida\")).first()(0)\nprintln(s\"Minimum data_partida date: $mindata_data_partida\")\nprintln(s\"Maximum data_partida date: $maxdata_data_partida\")\n\ndf.createOrReplaceTempView(InitialQuartosReservadosTable)\ndf.cache()\n//df.printSchema()\n//df.show()\n//df.select(\"pais\", \"estado_reserva\", \"rate_plan\", \"data_reserva\", \"data_chegada\", \"data_partida\", \"num_noites\", \"ocupacao\", \"adultos\", \"criancas\", \"preco_euros\").describe().show()",
   "id": "",
   "dateCreated": "2023-04-24 21:18:31.653",
   "config": {
    "editorHide": false
   },
   "dateStarted": "2023-05-10 01:01:39.279",
   "dateUpdated": "2023-05-10 01:01:40.974",
   "dateFinished": "2023-05-10 01:01:40.974"
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {}
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "val csvFeriados= \"/data/tp/Feriados.csv\" // Holidays file\n\nval df = spark.read.format(\"csv\")\n        .option(\"header\", \"true\") // set this to true if your CSV file has header\n        .option(\"inferSchema\", \"true\") // set this to true if you want Spark to infer the schema\n        .option(\"delimiter\", \";\") // ; is the separator\n        .option(\"trim\", \"true\") // remove whitespaces from both ends of columns and val\n        .load(csvFeriados)\n        .withColumn(\"date\", to_date(col(\"date\"), \"dd/MM/yyyy\"))\n\nval minDate = df.select(min(\"date\")).first()(0)\nval maxDate = df.select(max(\"date\")).first()(0)\nprintln(s\"Minimum start date: $minDate\")\nprintln(s\"Maximum start date: $maxDate\")\n\ndf.createOrReplaceTempView(FeriadosTable)\ndf.cache()\n//df.printSchema()\n//df.describe().show()\n//df.show()",
   "id": "",
   "dateCreated": "2023-04-24 22:00:30.321",
   "config": {},
   "dateStarted": "2023-05-10 01:01:40.985",
   "dateUpdated": "2023-05-10 01:01:41.618",
   "dateFinished": "2023-05-10 01:01:41.618"
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {}
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "val csvMeteorologia= \"/data/tp/Meteorologia.csv\" // Holidays file\n\nval df = spark.read.format(\"csv\")\n        .option(\"header\", \"true\") // set this to true if your CSV file has header\n        .option(\"inferSchema\", \"true\") // set this to true if you want Spark to infer the schema\n        .option(\"delimiter\", \";\") // ; is the separator\n         .option(\"trim\", \"true\") // remove whitespaces from both ends of columns and val\n        .load(csvMeteorologia)\n        .withColumn(\"date\", to_date(col(\"date\"), \"dd/MM/yyyy\"))\n\nval minDate = df.select(min(\"date\")).first()(0)\nval maxDate = df.select(max(\"date\")).first()(0)\nprintln(s\"Minimum start date: $minDate\")\nprintln(s\"Maximum start date: $maxDate\")\n\ndf.createOrReplaceTempView(MeteorologiaTable)\ndf.cache()\n//df.printSchema()\n//df.describe().show()\n//df.show()",
   "id": "",
   "dateCreated": "2023-04-30 21:07:30.821",
   "config": {},
   "dateStarted": "2023-05-10 01:01:41.628",
   "dateUpdated": "2023-05-10 01:01:42.201",
   "dateFinished": "2023-05-10 01:01:42.201"
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {}
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "val csvEventos= \"/data/tp/Eventos.csv\" // Holidays file\n\nval df = spark.read.format(\"csv\")\n        .option(\"header\", \"true\") // set this to true if your CSV file has header\n        .option(\"inferSchema\", \"true\") // set this to true if you want Spark to infer the schema\n        .option(\"delimiter\", \";\") // ; is the separator\n        .option(\"trim\", \"true\") // remove whitespaces from both ends of columns and values\n        .load(csvEventos)\n        .withColumn(\"end_date\", to_date(trim(col(\"end_date\")), \"dd/MM/yyyy\"))\n        .withColumn(\"start_Date\", to_date(col(\"start_Date\"), \"dd/MM/yyyy\"))\n\nval minStartDate = df.select(min(\"start_Date\")).first()(0)\nval maxStartDate = df.select(max(\"start_Date\")).first()(0)\nval minEndDate = df.select(min(\"end_date\")).first()(0)\nval maxEndDate = df.select(max(\"end_date\")).first()(0)\n\nprintln(s\"Minimum start date: $minStartDate\")\nprintln(s\"Maximum start date: $maxStartDate\")\nprintln(s\"Minimum end date: $minEndDate\")\nprintln(s\"Maximum end date: $maxEndDate\")\n\ndf.createOrReplaceTempView(EventosTable)\ndf.cache()\n//df.printSchema()\n//df.describe().show()\n//df.show()",
   "config": {},
   "dateStarted": "2023-05-10 01:01:42.211",
   "dateUpdated": "2023-05-10 01:01:43.059",
   "dateFinished": "2023-05-10 01:01:43.059"
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {}
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "/* \n-----------------------------------------------------------------------------------------\n                                After Reading Transformations\n-----------------------------------------------------------------------------------------\n*/",
   "id": "",
   "dateCreated": "2023-05-08 16:57:04.969",
   "config": {},
   "dateStarted": "2023-05-10 01:01:43.068",
   "dateUpdated": "2023-05-10 01:01:43.325",
   "dateFinished": "2023-05-10 01:01:43.325"
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {}
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "// Initial transformation of Hotel table\nvar initalHotel = spark.sql(\"SELECT * FROM InitialHotel\")\n\nvar newHotel = spark.sql(\n    \"\"\"\n        SELECT * FROM InitialHotel AS H\n        WHERE EXISTS (\n            SELECT 1 FROM InitialQuartosReservados qr\n            WHERE h.hotel_ID = qr.hotel_ID\n        )\n    \"\"\")\n\nnewHotel.createOrReplaceTempView(HotelTable)\n\nprintln(\"Total lines removed: \" + (initalHotel.count() - newHotel.count()))",
   "id": "",
   "dateCreated": "2023-05-08 16:58:17.271",
   "config": {
    "editorHide": false
   },
   "dateStarted": "2023-05-10 01:01:43.327",
   "dateUpdated": "2023-05-10 01:01:48.478",
   "dateFinished": "2023-05-10 01:01:48.478"
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {}
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "// Initial transformation of Tipologias table\n\nval initialTipologias = spark.sql(s\"SELECT * FROM $InitialTipologiasTable\")\n\nval newTipologias = initialTipologias\n        .drop(\"capacidade_minima\")\n        .drop(\"capacidade_min_adultos\")\n        .drop(\"capacidade_min_criancas\")\n//        .drop(\"capacidade_max_camas_extra\")\n//        .drop(\"capacidade_max_camas_extra_criancas\")\n//        .drop(\"capacidade_max_bercos_extra\")\n\nnewTipologias.createOrReplaceTempView(TipologiasTable)\n\nprintln(\"Total lines removed: \" + (initialTipologias.count() - newTipologias.count()))",
   "id": "",
   "dateCreated": "2023-05-08 16:58:47.072",
   "config": {},
   "dateStarted": "2023-05-10 01:01:48.484",
   "dateUpdated": "2023-05-10 01:01:48.912",
   "dateFinished": "2023-05-10 01:01:48.912"
  },
  {
   "settings": {
    "params": {
     "bdtMeta": {
      "ZTOOLS_DATA_FRAMES": [
       {
        "columns": [
         {
          "name": "hotel_ID",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "Reserve_ID",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "pais",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "estado_reserva",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "room_ID",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "tipo_quarto",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "rate_plan",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "data_reserva",
          "tpe": {
           "presentableName": "string"
          },
          "nullable": true
         },
         {
          "name": "num_noites",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "Quantidade de quartos",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "ocupacao",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "adultos",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "criancas",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "bebes",
          "tpe": {
           "presentableName": "integer"
          },
          "nullable": true
         },
         {
          "name": "preco_euros",
          "tpe": {
           "presentableName": "double"
          },
          "nullable": true
         },
         {
          "name": "data_chegada",
          "tpe": {
           "presentableName": "date"
          },
          "nullable": true
         },
         {
          "name": "data_partida",
          "tpe": {
           "presentableName": "date"
          },
          "nullable": true
         }
        ]
       }
      ]
     }
    },
    "forms": {}
   },
   "apps": [],
   "status": "FINISHED",
   "text": "// Initial transformation of Quartos Reservados table\nval initialQuartosReservados = spark.sql(s\"SELECT * FROM $InitialQuartosReservadosTable\")\n\nval smallReservationsHotels = initialQuartosReservados\n                            .groupBy(\"hotel_ID\").count()\n                            .filter($\"count\" < 13)\n\nval newQuartosReservados = initialQuartosReservados\n        .filter($\"estado_reserva\".notEqual(\"CourtesyHold\")) // Remove reserve state \"CourtesyHold\" (5 reservations)\n        .filter(datediff($\"data_partida\", $\"data_chegada\") <= 14) // Remove lines where the booking has more than 14 days (115 reservations)\n        .join(smallReservationsHotels, Seq(\"hotel_ID\"), \"leftanti\") // Remove hotels that have less than 13 bookings (21 reservations)\n        .withColumn(\"preco_noite\", $\"preco_euros\" / $\"num_noites\")\n        .withColumn(\"preco_noite_adulto\", $\"preco_euros\" / $\"num_noites\" / $\"adultos\")\n        .filter($\"preco_euros\" <= 5000) // Remove bookings with price greater than 5000€ (5 reservations)\n\nnewQuartosReservados.cache()\nnewQuartosReservados.createOrReplaceTempView(QuartosReservadosTable)\n\nnewQuartosReservados.coalesce(1) // Print into a single file\n            .write\n//            .mode(\"overwrite\")\n            .option(\"delimiter\", \";\")\n            .option(\"header\", true) // Maintain Headers\n            .csv(s\"/data/outliers/reservas\") // Write to csv\n\nprintln(\"Total lines removed: \" + (initialQuartosReservados.count() - newQuartosReservados.count()))\nnewQuartosReservados.filter($\"criancas\" =!= 0).show()",
   "id": "",
   "dateCreated": "2023-05-08 16:58:48.800",
   "config": {},
   "dateStarted": "2023-05-10 01:06:23.486",
   "dateUpdated": "2023-05-10 01:06:25.058",
   "dateFinished": "2023-05-10 01:06:25.058",
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "Total lines removed: 140\n+--------+----------+--------+--------------+-------+--------------------+--------------------+----------------+----------+---------------------+--------+-------+--------+-----+--------------+------------+------------+------------------+------------------+\n|hotel_ID|Reserve_ID|    pais|estado_reserva|room_ID|         tipo_quarto|           rate_plan|    data_reserva|num_noites|Quantidade de quartos|ocupacao|adultos|criancas|bebes|   preco_euros|data_chegada|data_partida|       preco_noite|preco_noite_adulto|\n+--------+----------+--------+--------------+-------+--------------------+--------------------+----------------+----------+---------------------+--------+-------+--------+-----+--------------+------------+------------+------------------+------------------+\n|     444|   1723060|Portugal|     Registado|   2074|Duplo   Vista Mar...|              Normal|17/04/2023 22:30|         2|                    1|       1|      1|       1|    0|         220.0|  2023-04-21|  2023-04-23|             110.0|             110.0|\n|     444|   1723060|Portugal|     Registado|   2386| Twin vista  mar ...|              Normal|17/04/2023 22:30|         2|                    1|       1|      1|       1|    0|         220.0|  2023-04-21|  2023-04-23|             110.0|             110.0|\n|     426|   1723048|Portugal|     Registado|   1991|Duplo Premium - C...|                 BAR|17/04/2023 22:17|         1|                    1|       2|      2|       1|    0|          99.0|  2023-06-09|  2023-06-10|              99.0|              49.5|\n|     444|   1723011|Portugal|     Registado|   2075|        Suite Junior|              Normal|17/04/2023 21:35|         1|                    1|       2|      2|       1|    0|         165.0|  2023-04-30|  2023-05-01|             165.0|              82.5|\n|     556|   1721184|  França|     Registado|   2847|Double Room w/ext...|WEB (Best Availab...|15/04/2023 18:24|         1|                    1|       2|      2|       1|    0|         101.5|  2023-08-04|  2023-08-05|             101.5|             50.75|\n|     379|   1720752| Irlanda|     Registado|   1739|Suite T1 Vista Ma...|      Non Refundable|15/04/2023 07:17|         9|                    1|       2|      2|       1|    0|       2265.75|  2023-07-05|  2023-07-14|            251.75|           125.875|\n|     444|   1720522|Portugal|     Registado|   2075|        Suite Junior|              Normal|14/04/2023 18:46|         1|                    1|       2|      2|       2|    0|         190.0|  2023-04-29|  2023-04-30|             190.0|              95.0|\n|     537|   1720169|Portugal|     Registado|   2720|Alojamento Arraiolos|    Não Reembolsável|14/04/2023 10:23|         3|                    1|       2|      2|       1|    1|388.4999999998|  2023-06-08|  2023-06-11|129.49999999993335| 64.74999999996668|\n|     444|   1720153|Portugal|     Registado|   2229|              Triplo|              Normal|14/04/2023 09:58|         2|                    1|       2|      2|       1|    0|         220.0|  2023-04-14|  2023-04-16|             110.0|              55.0|\n|     311|   1720121|Portugal|     Registado|   1946|DBT - Quarto Dupl...|      MR - Main Rate|14/04/2023 09:17|         1|                    1|       2|      2|       1|    0|       101.365|  2023-05-23|  2023-05-24|           101.365|           50.6825|\n|     311|   1720120|Portugal|  NãoRegistado|   1946|DBT - Quarto Dupl...|      MR - Main Rate|14/04/2023 09:16|         1|                    1|       2|      2|       1|    0|       101.365|  2023-05-23|  2023-05-24|           101.365|           50.6825|\n|     537|   1720048|Portugal|     Cancelado|   2720|Alojamento Arraiolos|    Não Reembolsável|14/04/2023 06:52|         3|                    1|       2|      2|       1|    1|388.4999999998|  2023-06-08|  2023-06-11|129.49999999993335| 64.74999999996668|\n|     537|   1719741|Portugal|     Cancelado|   2721|     Alojamento Nisa|                 Bar|13/04/2023 17:19|         4|                    1|       2|      2|       1|    1|         560.0|  2023-08-16|  2023-08-20|             140.0|              70.0|\n|     535|   1718761|Portugal|      Pendente|   2524|         Quarto Twin|             WebSite|12/04/2023 14:40|         2|                    1|       2|      2|       1|    0|         174.0|  2023-04-21|  2023-04-23|              87.0|              43.5|\n|     482|   1718660|Portugal|     Registado|   2285|      Apartamento T1|(WEB) Non-refunda...|12/04/2023 12:36|         2|                    1|       2|      2|       1|    0| 97.1799999999|  2023-04-12|  2023-04-14|    48.58999999995|   24.294999999975|\n|     426|   1718508|Portugal|     Registado|   1992|        Junior Suite|                 BAR|12/04/2023 09:57|         1|                    1|       2|      2|       1|    0|         150.0|  2023-04-15|  2023-04-16|             150.0|              75.0|\n|     444|   1718293|Portugal|     Registado|   2229|              Triplo|              Normal|11/04/2023 22:29|         2|                    1|       2|      2|       1|    0|         220.0|  2023-04-12|  2023-04-14|             110.0|              55.0|\n|     311|   1718248| Espanha|    Modificada|   1407|DB - Quarto Duplo...|        Main Rate BB|11/04/2023 21:28|         1|                    1|       1|      1|       1|    0|     96.066375|  2023-04-18|  2023-04-19|         96.066375|         96.066375|\n|     311|   1718234| Espanha|  NãoRegistado|   1407|DB - Quarto Duplo...|        Main Rate BB|11/04/2023 21:09|         1|                    1|       1|      1|       1|    0|     96.066375|  2023-04-18|  2023-04-19|         96.066375|         96.066375|\n|     537|   1718212|Portugal|     Cancelado|   2720|Alojamento Arraiolos|    Não Reembolsável|11/04/2023 20:46|         5|                    1|       2|      2|       1|    0|647.4999999997|  2023-07-21|  2023-07-26|   129.49999999994|    64.74999999997|\n+--------+----------+--------+--------------+-------+--------------------+--------------------+----------------+----------+---------------------+--------+-------+--------+-----+--------------+------------+------------+------------------+------------------+\nonly showing top 20 rows\n\n\u001b[1m\u001b[34minitialQuartosReservados\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [hotel_ID: int, Reserve_ID: int ... 15 more fields]\n\u001b[1m\u001b[34msmallReservationsHotels\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [hotel_ID: int, count: bigint]\n\u001b[1m\u001b[34mnewQuartosReservados\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [hotel_ID: int, Reserve_ID: int ... 17 more fields]\n"
     }
    ]
   }
  }
 ],
 "name": "Zeppelin Notebook",
 "id": "",
 "noteParams": {},
 "noteForms": {},
 "angularObjects": {},
 "config": {
  "isZeppelinNotebookCronEnable": false,
  "looknfeel": "default",
  "personalizedMode": "false"
 },
 "info": {}
}